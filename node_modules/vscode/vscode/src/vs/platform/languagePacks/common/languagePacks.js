const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  CancellationTokenSource
} = require('../../../base/common/cancellation.js');
const {
  Disposable
} = require('../../../base/common/lifecycle.js');
const {
  language
} = require('../../../base/common/platform.js');
const {
  localizeWithPath
} = require('../../../nls.js');
const {
  IExtensionGalleryService
} = require('../../extensionManagement/common/extensionManagement.service.js');
const _moduleId = "vs/platform/languagePacks/common/languagePacks";
function getLocale(extension) {
  return extension.tags.find(t => t.startsWith('lp-'))?.split('lp-')[1];
}
let LanguagePackBaseService = class LanguagePackBaseService extends Disposable {
  constructor(extensionGalleryService) {
    super();
    this.extensionGalleryService = extensionGalleryService;
  }
  async getAvailableLanguages() {
    const timeout = new CancellationTokenSource();
    setTimeout(() => timeout.cancel(), 1000);
    let result;
    try {
      result = await this.extensionGalleryService.query({
        text: 'category:"language packs"',
        pageSize: 20
      }, timeout.token);
    } catch (_) {
      return [];
    }
    const languagePackExtensions = result.firstPage.filter(e => e.properties.localizedLanguages?.length && e.tags.some(t => t.startsWith('lp-')));
    const allFromMarketplace = languagePackExtensions.map(lp => {
      const languageName = lp.properties.localizedLanguages?.[0];
      const locale = getLocale(lp);
      const baseQuickPick = this.createQuickPickItem(locale, languageName, lp);
      return {
        ...baseQuickPick,
        extensionId: lp.identifier.id,
        galleryExtension: lp
      };
    });
    allFromMarketplace.push(this.createQuickPickItem('en', 'English'));
    return allFromMarketplace;
  }
  createQuickPickItem(locale, languageName, languagePack) {
    const label = languageName ?? locale;
    let description;
    if (label !== locale) {
      description = `(${locale})`;
    }
    if (locale.toLowerCase() === language.toLowerCase()) {
      description ??= '';
      description += localizeWithPath(_moduleId, 0, " (Current)");
    }
    if (languagePack?.installCount) {
      description ??= '';
      const count = languagePack.installCount;
      let countLabel;
      if (count > 1000000) {
        countLabel = `${Math.floor(count / 100000) / 10}M`;
      } else if (count > 1000) {
        countLabel = `${Math.floor(count / 1000)}K`;
      } else {
        countLabel = String(count);
      }
      description += ` $(cloud-download) ${countLabel}`;
    }
    return {
      id: locale,
      label,
      description
    };
  }
};
LanguagePackBaseService = __decorate([__param(0, IExtensionGalleryService)], LanguagePackBaseService);
exports.LanguagePackBaseService = LanguagePackBaseService;
exports.getLocale = getLocale;