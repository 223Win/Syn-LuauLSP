const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  $,
  clearNode,
  append
} = require('../../../base/browser/dom.js');
const {
  Widget
} = require('../../../base/browser/ui/widget.js');
const {
  Emitter
} = require('../../../base/common/event.js');
const {
  Disposable,
  DisposableStore,
  toDisposable
} = require('../../../base/common/lifecycle.js');
const {
  createAndFillInActionBarActions
} = require('./menuEntryActionViewItem.js');
const {
  IMenuService
} = require('../common/actions.service.js');
const {
  IContextKeyService
} = require('../../contextkey/common/contextkey.service.js');
const {
  IInstantiationService
} = require('../../instantiation/common/instantiation.js');
const {
  asCssVariableWithDefault,
  asCssVariable
} = require('../../theme/common/colorUtils.js');
const {
  contrastBorder
} = require('../../theme/common/colors/baseColors.js');
const {} = require('../../theme/common/colors/chartsColors.js');
const {
  editorBackground,
  editorForeground
} = require('../../theme/common/colors/editorColors.js');
const {
  buttonBackground,
  buttonForeground
} = require('../../theme/common/colors/inputColors.js');
const {} = require('../../theme/common/colors/listColors.js');
const {} = require('../../theme/common/colors/menuColors.js');
const {} = require('../../theme/common/colors/minimapColors.js');
const {} = require('../../theme/common/colors/miscColors.js');
const {} = require('../../theme/common/colors/quickpickColors.js');
const {} = require('../../theme/common/colors/searchColors.js');
class FloatingClickWidget extends Widget {
  constructor(label) {
    super();
    this.label = label;
    this._onClick = this._register(new Emitter());
    this.onClick = this._onClick.event;
    this._domNode = $('.floating-click-widget');
    this._domNode.style.padding = '6px 11px';
    this._domNode.style.borderRadius = '2px';
    this._domNode.style.cursor = 'pointer';
    this._domNode.style.zIndex = '1';
  }
  getDomNode() {
    return this._domNode;
  }
  render() {
    clearNode(this._domNode);
    this._domNode.style.backgroundColor = asCssVariableWithDefault(buttonBackground, asCssVariable(editorBackground));
    this._domNode.style.color = asCssVariableWithDefault(buttonForeground, asCssVariable(editorForeground));
    this._domNode.style.border = `1px solid ${asCssVariable(contrastBorder)}`;
    append(this._domNode, $('')).textContent = this.label;
    this.onclick(this._domNode, () => this._onClick.fire());
  }
}
let AbstractFloatingClickMenu = class AbstractFloatingClickMenu extends Disposable {
  constructor(menuId, menuService, contextKeyService) {
    super();
    this.renderEmitter = new Emitter();
    this.onDidRender = this.renderEmitter.event;
    this.menu = this._register(menuService.createMenu(menuId, contextKeyService));
  }
  render() {
    const menuDisposables = this._register(new DisposableStore());
    const renderMenuAsFloatingClickBtn = () => {
      menuDisposables.clear();
      if (!this.isVisible()) {
        return;
      }
      const actions = [];
      createAndFillInActionBarActions(this.menu, {
        renderShortTitle: true,
        shouldForwardArgs: true
      }, actions);
      if (actions.length === 0) {
        return;
      }
      const [first] = actions;
      const widget = this.createWidget(first, menuDisposables);
      menuDisposables.add(widget);
      menuDisposables.add(widget.onClick(() => first.run(this.getActionArg())));
      widget.render();
    };
    this._register(this.menu.onDidChange(renderMenuAsFloatingClickBtn));
    renderMenuAsFloatingClickBtn();
  }
  getActionArg() {
    return undefined;
  }
  isVisible() {
    return true;
  }
};
AbstractFloatingClickMenu = __decorate([__param(1, IMenuService), __param(2, IContextKeyService)], AbstractFloatingClickMenu);
let FloatingClickMenu = class FloatingClickMenu extends AbstractFloatingClickMenu {
  constructor(options, instantiationService, menuService, contextKeyService) {
    super(options.menuId, menuService, contextKeyService);
    this.options = options;
    this.instantiationService = instantiationService;
    this.render();
  }
  createWidget(action, disposable) {
    const w = this.instantiationService.createInstance(FloatingClickWidget, action.label);
    const node = w.getDomNode();
    this.options.container.appendChild(node);
    disposable.add(toDisposable(() => this.options.container.removeChild(node)));
    return w;
  }
  getActionArg() {
    return this.options.getActionArg();
  }
};
FloatingClickMenu = __decorate([__param(1, IInstantiationService), __param(2, IMenuService), __param(3, IContextKeyService)], FloatingClickMenu);
exports.AbstractFloatingClickMenu = AbstractFloatingClickMenu;
exports.FloatingClickMenu = FloatingClickMenu;
exports.FloatingClickWidget = FloatingClickWidget;