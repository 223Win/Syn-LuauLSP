const {
  coalesce
} = require('../../../base/common/arrays.js');
const {
  toDisposable
} = require('../../../base/common/lifecycle.js');
const {
  Registry
} = require('../../registry/common/platform.js');
var DefaultQuickAccessFilterValue;
(function (DefaultQuickAccessFilterValue) {
  DefaultQuickAccessFilterValue[DefaultQuickAccessFilterValue["PRESERVE"] = 0] = "PRESERVE";
  DefaultQuickAccessFilterValue[DefaultQuickAccessFilterValue["LAST"] = 1] = "LAST";
})(DefaultQuickAccessFilterValue || (DefaultQuickAccessFilterValue = {}));
const Extensions = {
  Quickaccess: 'workbench.contributions.quickaccess'
};
class QuickAccessRegistry {
  constructor() {
    this.providers = [];
    this.defaultProvider = undefined;
  }
  registerQuickAccessProvider(provider) {
    if (provider.prefix.length === 0) {
      this.defaultProvider = provider;
    } else {
      this.providers.push(provider);
    }
    this.providers.sort((providerA, providerB) => providerB.prefix.length - providerA.prefix.length);
    return toDisposable(() => {
      this.providers.splice(this.providers.indexOf(provider), 1);
      if (this.defaultProvider === provider) {
        this.defaultProvider = undefined;
      }
    });
  }
  getQuickAccessProviders() {
    return coalesce([this.defaultProvider, ...this.providers]);
  }
  getQuickAccessProvider(prefix) {
    const result = prefix ? this.providers.find(provider => prefix.startsWith(provider.prefix)) || undefined : undefined;
    return result || this.defaultProvider;
  }
  clear() {
    const providers = [...this.providers];
    const defaultProvider = this.defaultProvider;
    this.providers = [];
    this.defaultProvider = undefined;
    return () => {
      this.providers = providers;
      this.defaultProvider = defaultProvider;
    };
  }
}
Registry.add(Extensions.Quickaccess, new QuickAccessRegistry());
exports.DefaultQuickAccessFilterValue = DefaultQuickAccessFilterValue;
exports.Extensions = Extensions;
exports.QuickAccessRegistry = QuickAccessRegistry;