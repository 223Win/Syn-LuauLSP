const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  addDisposableListener
} = require('../../../base/browser/dom.js');
const {
  alert,
  status
} = require('../../../base/browser/ui/aria/aria.js');
const {
  mainWindow
} = require('../../../base/browser/window.js');
const {
  Emitter
} = require('../../../base/common/event.js');
const {
  Disposable
} = require('../../../base/common/lifecycle.js');
const {
  CONTEXT_ACCESSIBILITY_MODE_ENABLED
} = require('../common/accessibility.js');
const {
  IConfigurationService
} = require('../../configuration/common/configuration.service.js');
const {
  IContextKeyService
} = require('../../contextkey/common/contextkey.service.js');
const {
  ILayoutService
} = require('../../layout/browser/layoutService.service.js');
let AccessibilityService = class AccessibilityService extends Disposable {
  constructor(_contextKeyService, _layoutService, _configurationService) {
    super();
    this._contextKeyService = _contextKeyService;
    this._layoutService = _layoutService;
    this._configurationService = _configurationService;
    this._accessibilitySupport = 0;
    this._onDidChangeScreenReaderOptimized = new Emitter();
    this._onDidChangeReducedMotion = new Emitter();
    this._accessibilityModeEnabledContext = CONTEXT_ACCESSIBILITY_MODE_ENABLED.bindTo(this._contextKeyService);
    const updateContextKey = () => this._accessibilityModeEnabledContext.set(this.isScreenReaderOptimized());
    this._register(this._configurationService.onDidChangeConfiguration(e => {
      if (e.affectsConfiguration('editor.accessibilitySupport')) {
        updateContextKey();
        this._onDidChangeScreenReaderOptimized.fire();
      }
      if (e.affectsConfiguration('workbench.reduceMotion')) {
        this._configMotionReduced = this._configurationService.getValue('workbench.reduceMotion');
        this._onDidChangeReducedMotion.fire();
      }
    }));
    updateContextKey();
    this._register(this.onDidChangeScreenReaderOptimized(() => updateContextKey()));
    const reduceMotionMatcher = mainWindow.matchMedia(`(prefers-reduced-motion: reduce)`);
    this._systemMotionReduced = reduceMotionMatcher.matches;
    this._configMotionReduced = this._configurationService.getValue('workbench.reduceMotion');
    this.initReducedMotionListeners(reduceMotionMatcher);
  }
  initReducedMotionListeners(reduceMotionMatcher) {
    this._register(addDisposableListener(reduceMotionMatcher, 'change', () => {
      this._systemMotionReduced = reduceMotionMatcher.matches;
      if (this._configMotionReduced === 'auto') {
        this._onDidChangeReducedMotion.fire();
      }
    }));
    const updateRootClasses = () => {
      const reduce = this.isMotionReduced();
      this._layoutService.mainContainer.classList.toggle('reduce-motion', reduce);
      this._layoutService.mainContainer.classList.toggle('enable-motion', !reduce);
    };
    updateRootClasses();
    this._register(this.onDidChangeReducedMotion(() => updateRootClasses()));
  }
  get onDidChangeScreenReaderOptimized() {
    return this._onDidChangeScreenReaderOptimized.event;
  }
  isScreenReaderOptimized() {
    const config = this._configurationService.getValue('editor.accessibilitySupport');
    return config === 'on' || config === 'auto' && this._accessibilitySupport === 2;
  }
  get onDidChangeReducedMotion() {
    return this._onDidChangeReducedMotion.event;
  }
  isMotionReduced() {
    const config = this._configMotionReduced;
    return config === 'on' || config === 'auto' && this._systemMotionReduced;
  }
  alwaysUnderlineAccessKeys() {
    return Promise.resolve(false);
  }
  getAccessibilitySupport() {
    return this._accessibilitySupport;
  }
  setAccessibilitySupport(accessibilitySupport) {
    if (this._accessibilitySupport === accessibilitySupport) {
      return;
    }
    this._accessibilitySupport = accessibilitySupport;
    this._onDidChangeScreenReaderOptimized.fire();
  }
  alert(message) {
    alert(message);
  }
  status(message) {
    status(message);
  }
};
AccessibilityService = __decorate([__param(0, IContextKeyService), __param(1, ILayoutService), __param(2, IConfigurationService)], AccessibilityService);
exports.AccessibilityService = AccessibilityService;