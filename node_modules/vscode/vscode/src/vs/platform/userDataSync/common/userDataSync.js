const {
  distinct
} = require('../../../base/common/arrays.js');
const {
  isObject,
  isString
} = require('../../../base/common/types.js');
const {
  localizeWithPath
} = require('../../../nls.js');
const {
  Extensions,
  allSettings
} = require('../../configuration/common/configurationRegistry.js');
const {
  EXTENSION_IDENTIFIER_PATTERN
} = require('../../extensionManagement/common/extensionManagement.js');
const {
  Extensions$1
} = require('../../jsonschemas/common/jsonContributionRegistry.js');
const {
  Registry
} = require('../../registry/common/platform.js');
const _moduleId = "vs/platform/userDataSync/common/userDataSync";
function getDisallowedIgnoredSettings() {
  const allSettings = Registry.as(Extensions.Configuration).getConfigurationProperties();
  return Object.keys(allSettings).filter(setting => !!allSettings[setting].disallowSyncIgnore);
}
function getDefaultIgnoredSettings() {
  const allSettings = Registry.as(Extensions.Configuration).getConfigurationProperties();
  const ignoreSyncSettings = Object.keys(allSettings).filter(setting => !!allSettings[setting].ignoreSync);
  const machineSettings = Object.keys(allSettings).filter(setting => allSettings[setting].scope === 2 || allSettings[setting].scope === 6);
  const disallowedSettings = getDisallowedIgnoredSettings();
  return distinct([...ignoreSyncSettings, ...machineSettings, ...disallowedSettings]);
}
const USER_DATA_SYNC_CONFIGURATION_SCOPE = 'settingsSync';
const CONFIG_SYNC_KEYBINDINGS_PER_PLATFORM = 'settingsSync.keybindingsPerPlatform';
function registerConfiguration() {
  const ignoredSettingsSchemaId = 'vscode://schemas/ignoredSettings';
  const configurationRegistry = Registry.as(Extensions.Configuration);
  configurationRegistry.registerConfiguration({
    id: 'settingsSync',
    order: 30,
    title: localizeWithPath(_moduleId, 0, "Settings Sync"),
    type: 'object',
    properties: {
      [CONFIG_SYNC_KEYBINDINGS_PER_PLATFORM]: {
        type: 'boolean',
        description: localizeWithPath(_moduleId, 1, "Synchronize keybindings for each platform."),
        default: true,
        scope: 1,
        tags: ['sync', 'usesOnlineServices']
      },
      'settingsSync.ignoredExtensions': {
        'type': 'array',
        markdownDescription: localizeWithPath(_moduleId, 2, "List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`."),
        items: [{
          type: 'string',
          pattern: EXTENSION_IDENTIFIER_PATTERN,
          errorMessage: localizeWithPath(_moduleId, 3, "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'.")
        }],
        'default': [],
        'scope': 1,
        uniqueItems: true,
        disallowSyncIgnore: true,
        tags: ['sync', 'usesOnlineServices']
      },
      'settingsSync.ignoredSettings': {
        'type': 'array',
        description: localizeWithPath(_moduleId, 4, "Configure settings to be ignored while synchronizing."),
        'default': [],
        'scope': 1,
        $ref: ignoredSettingsSchemaId,
        additionalProperties: true,
        uniqueItems: true,
        disallowSyncIgnore: true,
        tags: ['sync', 'usesOnlineServices']
      }
    }
  });
  const jsonRegistry = Registry.as(Extensions$1.JSONContribution);
  const registerIgnoredSettingsSchema = () => {
    const disallowedIgnoredSettings = getDisallowedIgnoredSettings();
    const defaultIgnoredSettings = getDefaultIgnoredSettings();
    const settings = Object.keys(allSettings.properties).filter(setting => !defaultIgnoredSettings.includes(setting));
    const ignoredSettings = defaultIgnoredSettings.filter(setting => !disallowedIgnoredSettings.includes(setting));
    const ignoredSettingsSchema = {
      items: {
        type: 'string',
        enum: [...settings, ...ignoredSettings.map(setting => `-${setting}`)]
      }
    };
    jsonRegistry.registerSchema(ignoredSettingsSchemaId, ignoredSettingsSchema);
  };
  return configurationRegistry.onDidUpdateConfiguration(() => registerIgnoredSettingsSchema());
}
function isAuthenticationProvider(thing) {
  return thing && isObject(thing) && isString(thing.id) && Array.isArray(thing.scopes);
}
const ALL_SYNC_RESOURCES = ["settings", "keybindings", "snippets", "tasks", "extensions", "globalState", "profiles"];
function getPathSegments(collection, ...paths) {
  return collection ? [collection, ...paths] : paths;
}
function getLastSyncResourceUri(collection, syncResource, environmentService, extUri) {
  return extUri.joinPath(environmentService.userDataSyncHome, ...getPathSegments(collection, syncResource, `lastSync${syncResource}.json`));
}
const HEADER_OPERATION_ID = 'x-operation-id';
const HEADER_EXECUTION_ID = 'X-Execution-Id';
function createSyncHeaders(executionId) {
  const headers = {};
  headers[HEADER_EXECUTION_ID] = executionId;
  return headers;
}
class UserDataSyncError extends Error {
  constructor(message, code, resource, operationId) {
    super(message);
    this.code = code;
    this.resource = resource;
    this.operationId = operationId;
    this.name = `${this.code} (UserDataSyncError) syncResource:${this.resource || 'unknown'} operationId:${this.operationId || 'unknown'}`;
  }
}
class UserDataSyncStoreError extends UserDataSyncError {
  constructor(message, url, code, serverCode, operationId) {
    super(message, code, undefined, operationId);
    this.url = url;
    this.serverCode = serverCode;
  }
}
class UserDataAutoSyncError extends UserDataSyncError {
  constructor(message, code) {
    super(message, code);
  }
}
(function (UserDataSyncError) {
  function toUserDataSyncError(error) {
    if (error instanceof UserDataSyncError) {
      return error;
    }
    const match = /^(.+) \(UserDataSyncError\) syncResource:(.+) operationId:(.+)$/.exec(error.name);
    if (match && match[1]) {
      const syncResource = match[2] === 'unknown' ? undefined : match[2];
      const operationId = match[3] === 'unknown' ? undefined : match[3];
      return new UserDataSyncError(error.message, match[1], syncResource, operationId);
    }
    return new UserDataSyncError(error.message, "Unknown");
  }
  UserDataSyncError.toUserDataSyncError = toUserDataSyncError;
})(UserDataSyncError || (UserDataSyncError = {}));
const SYNC_SERVICE_URL_TYPE = 'sync.store.url.type';
function getEnablementKey(resource) {
  return `sync.enable.${resource}`;
}
const USER_DATA_SYNC_LOG_ID = 'userDataSync';
const USER_DATA_SYNC_SCHEME = 'vscode-userdata-sync';
const PREVIEW_DIR_NAME = 'preview';
exports.ALL_SYNC_RESOURCES = ALL_SYNC_RESOURCES;
exports.CONFIG_SYNC_KEYBINDINGS_PER_PLATFORM = CONFIG_SYNC_KEYBINDINGS_PER_PLATFORM;
exports.HEADER_EXECUTION_ID = HEADER_EXECUTION_ID;
exports.HEADER_OPERATION_ID = HEADER_OPERATION_ID;
exports.PREVIEW_DIR_NAME = PREVIEW_DIR_NAME;
exports.SYNC_SERVICE_URL_TYPE = SYNC_SERVICE_URL_TYPE;
exports.USER_DATA_SYNC_CONFIGURATION_SCOPE = USER_DATA_SYNC_CONFIGURATION_SCOPE;
exports.USER_DATA_SYNC_LOG_ID = USER_DATA_SYNC_LOG_ID;
exports.USER_DATA_SYNC_SCHEME = USER_DATA_SYNC_SCHEME;
exports.UserDataAutoSyncError = UserDataAutoSyncError;
exports.UserDataSyncError = UserDataSyncError;
exports.UserDataSyncStoreError = UserDataSyncStoreError;
exports.createSyncHeaders = createSyncHeaders;
exports.getDefaultIgnoredSettings = getDefaultIgnoredSettings;
exports.getDisallowedIgnoredSettings = getDisallowedIgnoredSettings;
exports.getEnablementKey = getEnablementKey;
exports.getLastSyncResourceUri = getLastSyncResourceUri;
exports.getPathSegments = getPathSegments;
exports.isAuthenticationProvider = isAuthenticationProvider;
exports.registerConfiguration = registerConfiguration;