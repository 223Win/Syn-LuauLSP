const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  addDisposableListener,
  EventType,
  trackFocus,
  $
} = require('../../../base/browser/dom.js');
const {
  ActionBar
} = require('../../../base/browser/ui/actionbar/actionbar.js');
const {
  Disposable,
  MutableDisposable,
  DisposableStore
} = require('../../../base/common/lifecycle.js');
const {} = require('./actionWidget.css.js');
const {
  localizeWithPath,
  localize2WithPath
} = require('../../../nls.js');
const {
  acceptSelectedActionCommand,
  previewSelectedActionCommand,
  ActionList
} = require('./actionList.js');
const {
  registerAction2,
  Action2
} = require('../../actions/common/actions.js');
const {
  RawContextKey
} = require('../../contextkey/common/contextkey.js');
const {
  IContextKeyService
} = require('../../contextkey/common/contextkey.service.js');
const {
  IContextViewService
} = require('../../contextview/browser/contextView.service.js');
const {
  registerSingleton
} = require('../../instantiation/common/extensions.js');
const {
  createDecorator,
  IInstantiationService
} = require('../../instantiation/common/instantiation.js');
const {
  registerColor
} = require('../../theme/common/colorUtils.js');
const {} = require('../../theme/common/colors/baseColors.js');
const {} = require('../../theme/common/colors/chartsColors.js');
const {} = require('../../theme/common/colors/editorColors.js');
const {
  inputActiveOptionBackground
} = require('../../theme/common/colors/inputColors.js');
const {} = require('../../theme/common/colors/listColors.js');
const {} = require('../../theme/common/colors/menuColors.js');
const {} = require('../../theme/common/colors/minimapColors.js');
const {} = require('../../theme/common/colors/miscColors.js');
const {} = require('../../theme/common/colors/quickpickColors.js');
const {} = require('../../theme/common/colors/searchColors.js');
const _moduleId = "vs/platform/actionWidget/browser/actionWidget";
registerColor('actionBar.toggledBackground', {
  dark: inputActiveOptionBackground,
  light: inputActiveOptionBackground,
  hcDark: inputActiveOptionBackground,
  hcLight: inputActiveOptionBackground
}, localizeWithPath(_moduleId, 0, 'Background color for toggled action items in action bar.'));
const ActionWidgetContextKeys = {
  Visible: new RawContextKey('codeActionMenuVisible', false, localizeWithPath(_moduleId, 1, "Whether the action widget list is visible"))
};
const IActionWidgetService = createDecorator('actionWidgetService');
let ActionWidgetService = class ActionWidgetService extends Disposable {
  get isVisible() {
    return ActionWidgetContextKeys.Visible.getValue(this._contextKeyService) || false;
  }
  constructor(_contextViewService, _contextKeyService, _instantiationService) {
    super();
    this._contextViewService = _contextViewService;
    this._contextKeyService = _contextKeyService;
    this._instantiationService = _instantiationService;
    this._list = this._register(new MutableDisposable());
  }
  show(user, supportsPreview, items, delegate, anchor, container, actionBarActions) {
    const visibleContext = ActionWidgetContextKeys.Visible.bindTo(this._contextKeyService);
    const list = this._instantiationService.createInstance(ActionList, user, supportsPreview, items, delegate);
    this._contextViewService.showContextView({
      getAnchor: () => anchor,
      render: container => {
        visibleContext.set(true);
        return this._renderWidget(container, list, actionBarActions ?? []);
      },
      onHide: didCancel => {
        visibleContext.reset();
        this._onWidgetClosed(didCancel);
      }
    }, container, false);
  }
  acceptSelected(preview) {
    this._list.value?.acceptSelected(preview);
  }
  focusPrevious() {
    this._list?.value?.focusPrevious();
  }
  focusNext() {
    this._list?.value?.focusNext();
  }
  hide(didCancel) {
    this._list.value?.hide(didCancel);
    this._list.clear();
  }
  clear() {
    this._list.clear();
  }
  _renderWidget(element, list, actionBarActions) {
    const widget = document.createElement('div');
    widget.classList.add('action-widget');
    element.appendChild(widget);
    this._list.value = list;
    if (this._list.value) {
      widget.appendChild(this._list.value.domNode);
    } else {
      throw new Error('List has no value');
    }
    const renderDisposables = new DisposableStore();
    const menuBlock = document.createElement('div');
    const block = element.appendChild(menuBlock);
    block.classList.add('context-view-block');
    renderDisposables.add(addDisposableListener(block, EventType.MOUSE_DOWN, e => e.stopPropagation()));
    const pointerBlockDiv = document.createElement('div');
    const pointerBlock = element.appendChild(pointerBlockDiv);
    pointerBlock.classList.add('context-view-pointerBlock');
    renderDisposables.add(addDisposableListener(pointerBlock, EventType.POINTER_MOVE, () => pointerBlock.remove()));
    renderDisposables.add(addDisposableListener(pointerBlock, EventType.MOUSE_DOWN, () => pointerBlock.remove()));
    let actionBarWidth = 0;
    if (actionBarActions.length) {
      const actionBar = this._createActionBar('.action-widget-action-bar', actionBarActions);
      if (actionBar) {
        widget.appendChild(actionBar.getContainer().parentElement);
        renderDisposables.add(actionBar);
        actionBarWidth = actionBar.getContainer().offsetWidth;
      }
    }
    const width = this._list.value?.layout(actionBarWidth);
    widget.style.width = `${width}px`;
    const focusTracker = renderDisposables.add(trackFocus(element));
    renderDisposables.add(focusTracker.onDidBlur(() => this.hide(true)));
    return renderDisposables;
  }
  _createActionBar(className, actions) {
    if (!actions.length) {
      return undefined;
    }
    const container = $(className);
    const actionBar = new ActionBar(container);
    actionBar.push(actions, {
      icon: false,
      label: true
    });
    return actionBar;
  }
  _onWidgetClosed(didCancel) {
    this._list.value?.hide(didCancel);
  }
};
ActionWidgetService = __decorate([__param(0, IContextViewService), __param(1, IContextKeyService), __param(2, IInstantiationService)], ActionWidgetService);
registerSingleton(IActionWidgetService, ActionWidgetService, 1);
const weight = 100 + 1000;
registerAction2(class extends Action2 {
  constructor() {
    super({
      id: 'hideCodeActionWidget',
      title: localize2WithPath(_moduleId, 2, "Hide action widget"),
      precondition: ActionWidgetContextKeys.Visible,
      keybinding: {
        weight,
        primary: 9,
        secondary: [1024 | 9]
      }
    });
  }
  run(accessor) {
    accessor.get(IActionWidgetService).hide(true);
  }
});
registerAction2(class extends Action2 {
  constructor() {
    super({
      id: 'selectPrevCodeAction',
      title: localize2WithPath(_moduleId, 3, "Select previous action"),
      precondition: ActionWidgetContextKeys.Visible,
      keybinding: {
        weight,
        primary: 16,
        secondary: [2048 | 16],
        mac: {
          primary: 16,
          secondary: [2048 | 16, 256 | 46]
        }
      }
    });
  }
  run(accessor) {
    const widgetService = accessor.get(IActionWidgetService);
    if (widgetService instanceof ActionWidgetService) {
      widgetService.focusPrevious();
    }
  }
});
registerAction2(class extends Action2 {
  constructor() {
    super({
      id: 'selectNextCodeAction',
      title: localize2WithPath(_moduleId, 4, "Select next action"),
      precondition: ActionWidgetContextKeys.Visible,
      keybinding: {
        weight,
        primary: 18,
        secondary: [2048 | 18],
        mac: {
          primary: 18,
          secondary: [2048 | 18, 256 | 44]
        }
      }
    });
  }
  run(accessor) {
    const widgetService = accessor.get(IActionWidgetService);
    if (widgetService instanceof ActionWidgetService) {
      widgetService.focusNext();
    }
  }
});
registerAction2(class extends Action2 {
  constructor() {
    super({
      id: acceptSelectedActionCommand,
      title: localize2WithPath(_moduleId, 5, "Accept selected action"),
      precondition: ActionWidgetContextKeys.Visible,
      keybinding: {
        weight,
        primary: 3,
        secondary: [2048 | 89]
      }
    });
  }
  run(accessor) {
    const widgetService = accessor.get(IActionWidgetService);
    if (widgetService instanceof ActionWidgetService) {
      widgetService.acceptSelected();
    }
  }
});
registerAction2(class extends Action2 {
  constructor() {
    super({
      id: previewSelectedActionCommand,
      title: localize2WithPath(_moduleId, 6, "Preview selected action"),
      precondition: ActionWidgetContextKeys.Visible,
      keybinding: {
        weight,
        primary: 2048 | 3
      }
    });
  }
  run(accessor) {
    const widgetService = accessor.get(IActionWidgetService);
    if (widgetService instanceof ActionWidgetService) {
      widgetService.acceptSelected(true);
    }
  }
});
exports.IActionWidgetService = IActionWidgetService;