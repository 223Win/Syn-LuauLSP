const {
  isMacintosh,
  isNative,
  isWeb,
  isLinux
} = require('../../../base/common/platform.js');
const WindowMinimumSize = {
  WIDTH: 400,
  WIDTH_WITH_VERTICAL_PANEL: 600,
  HEIGHT: 270
};
function isWorkspaceToOpen(uriToOpen) {
  return !!uriToOpen.workspaceUri;
}
function isFolderToOpen(uriToOpen) {
  return !!uriToOpen.folderUri;
}
function isFileToOpen(uriToOpen) {
  return !!uriToOpen.fileUri;
}
function getMenuBarVisibility(configurationService) {
  const nativeTitleBarEnabled = hasNativeTitlebar(configurationService);
  const menuBarVisibility = configurationService.getValue('window.menuBarVisibility');
  if (menuBarVisibility === 'default' || nativeTitleBarEnabled && menuBarVisibility === 'compact' || isMacintosh && isNative) {
    return 'classic';
  } else {
    return menuBarVisibility;
  }
}
function hasCustomTitlebar(configurationService, titleBarStyle) {
  return true;
}
function hasNativeTitlebar(configurationService, titleBarStyle) {
  if (!titleBarStyle) {
    titleBarStyle = getTitleBarStyle(configurationService);
  }
  return titleBarStyle === "native";
}
function getTitleBarStyle(configurationService) {
  if (isWeb) {
    return "custom";
  }
  const configuration = configurationService.getValue('window');
  if (configuration) {
    const useNativeTabs = isMacintosh && configuration.nativeTabs === true;
    if (useNativeTabs) {
      return "native";
    }
    const useSimpleFullScreen = isMacintosh && configuration.nativeFullScreen === false;
    if (useSimpleFullScreen) {
      return "native";
    }
    const style = configuration.titleBarStyle;
    if (style === "native" || style === "custom") {
      return style;
    }
  }
  return isLinux ? "native" : "custom";
}
exports.WindowMinimumSize = WindowMinimumSize;
exports.getMenuBarVisibility = getMenuBarVisibility;
exports.getTitleBarStyle = getTitleBarStyle;
exports.hasCustomTitlebar = hasCustomTitlebar;
exports.hasNativeTitlebar = hasNativeTitlebar;
exports.isFileToOpen = isFileToOpen;
exports.isFolderToOpen = isFolderToOpen;
exports.isWorkspaceToOpen = isWorkspaceToOpen;