const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  ModifierKeyEmitter
} = require('../../../base/browser/dom.js');
const {
  Separator
} = require('../../../base/common/actions.js');
const {
  Emitter
} = require('../../../base/common/event.js');
const {
  Disposable
} = require('../../../base/common/lifecycle.js');
const {
  createAndFillInContextMenuActions
} = require('../../actions/browser/menuEntryActionViewItem.js');
const {
  MenuId
} = require('../../actions/common/actions.js');
const {
  IMenuService
} = require('../../actions/common/actions.service.js');
const {
  IContextKeyService
} = require('../../contextkey/common/contextkey.service.js');
const {
  IKeybindingService
} = require('../../keybinding/common/keybinding.service.js');
const {
  INotificationService
} = require('../../notification/common/notification.service.js');
const {
  ITelemetryService
} = require('../../telemetry/common/telemetry.service.js');
const {
  ContextMenuHandler
} = require('./contextMenuHandler.js');
const {
  IContextViewService
} = require('./contextView.service.js');
let ContextMenuService = class ContextMenuService extends Disposable {
  get contextMenuHandler() {
    if (!this._contextMenuHandler) {
      this._contextMenuHandler = new ContextMenuHandler(this.contextViewService, this.telemetryService, this.notificationService, this.keybindingService);
    }
    return this._contextMenuHandler;
  }
  constructor(telemetryService, notificationService, contextViewService, keybindingService, menuService, contextKeyService) {
    super();
    this.telemetryService = telemetryService;
    this.notificationService = notificationService;
    this.contextViewService = contextViewService;
    this.keybindingService = keybindingService;
    this.menuService = menuService;
    this.contextKeyService = contextKeyService;
    this._contextMenuHandler = undefined;
    this._onDidShowContextMenu = this._store.add(new Emitter());
    this.onDidShowContextMenu = this._onDidShowContextMenu.event;
    this._onDidHideContextMenu = this._store.add(new Emitter());
    this.onDidHideContextMenu = this._onDidHideContextMenu.event;
  }
  configure(options) {
    this.contextMenuHandler.configure(options);
  }
  showContextMenu(delegate) {
    delegate = ContextMenuMenuDelegate.transform(delegate, this.menuService, this.contextKeyService);
    this.contextMenuHandler.showContextMenu({
      ...delegate,
      onHide: didCancel => {
        delegate.onHide?.(didCancel);
        this._onDidHideContextMenu.fire();
      }
    });
    ModifierKeyEmitter.getInstance().resetKeyStatus();
    this._onDidShowContextMenu.fire();
  }
};
ContextMenuService = __decorate([__param(0, ITelemetryService), __param(1, INotificationService), __param(2, IContextViewService), __param(3, IKeybindingService), __param(4, IMenuService), __param(5, IContextKeyService)], ContextMenuService);
var ContextMenuMenuDelegate;
(function (ContextMenuMenuDelegate) {
  function is(thing) {
    return thing && thing.menuId instanceof MenuId;
  }
  function transform(delegate, menuService, globalContextKeyService) {
    if (!is(delegate)) {
      return delegate;
    }
    const {
      menuId,
      menuActionOptions,
      contextKeyService
    } = delegate;
    return {
      ...delegate,
      getActions: () => {
        const target = [];
        if (menuId) {
          const menu = menuService.createMenu(menuId, contextKeyService ?? globalContextKeyService);
          createAndFillInContextMenuActions(menu, menuActionOptions, target);
          menu.dispose();
        }
        if (!delegate.getActions) {
          return target;
        } else {
          return Separator.join(delegate.getActions(), target);
        }
      }
    };
  }
  ContextMenuMenuDelegate.transform = transform;
})(ContextMenuMenuDelegate || (ContextMenuMenuDelegate = {}));
exports.ContextMenuMenuDelegate = ContextMenuMenuDelegate;
exports.ContextMenuService = ContextMenuService;