const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  EditorInput
} = require('./editorInput.js');
const {
  getLargeFileConfirmationLimit,
  ByteSize
} = require('../../../platform/files/common/files.js');
const {
  IFileService
} = require('../../../platform/files/common/files.service.js');
const {
  ILabelService
} = require('../../../platform/label/common/label.service.js');
const {
  isEqual,
  dirname
} = require('../../../base/common/resources.js');
const {
  IFilesConfigurationService
} = require('../../services/filesConfiguration/common/filesConfigurationService.service.js');
const {
  isConfigured
} = require('../../../platform/configuration/common/configuration.js');
const {
  ITextResourceConfigurationService
} = require('../../../editor/common/services/textResourceConfiguration.js');
const {
  ICustomEditorLabelService
} = require('../../services/editor/common/customEditorLabelService.service.js');
let AbstractResourceEditorInput = class AbstractResourceEditorInput extends EditorInput {
  get capabilities() {
    let capabilities = 32;
    if (this.fileService.hasProvider(this.resource)) {
      if (this.filesConfigurationService.isReadonly(this.resource)) {
        capabilities |= 2;
      }
    } else {
      capabilities |= 4;
    }
    if (!(capabilities & 2)) {
      capabilities |= 128;
    }
    return capabilities;
  }
  get preferredResource() {
    return this._preferredResource;
  }
  constructor(resource, preferredResource, labelService, fileService, filesConfigurationService, textResourceConfigurationService, customEditorLabelService) {
    super();
    this.resource = resource;
    this.labelService = labelService;
    this.fileService = fileService;
    this.filesConfigurationService = filesConfigurationService;
    this.textResourceConfigurationService = textResourceConfigurationService;
    this.customEditorLabelService = customEditorLabelService;
    this._name = undefined;
    this._shortDescription = undefined;
    this._mediumDescription = undefined;
    this._longDescription = undefined;
    this._shortTitle = undefined;
    this._mediumTitle = undefined;
    this._longTitle = undefined;
    this._preferredResource = preferredResource || resource;
    this.registerListeners();
  }
  registerListeners() {
    this._register(this.labelService.onDidChangeFormatters(e => this.onLabelEvent(e.scheme)));
    this._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onLabelEvent(e.scheme)));
    this._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onLabelEvent(e.scheme)));
    this._register(this.customEditorLabelService.onDidChange(() => this.updateLabel()));
  }
  onLabelEvent(scheme) {
    if (scheme === this._preferredResource.scheme) {
      this.updateLabel();
    }
  }
  updateLabel() {
    this._name = undefined;
    this._shortDescription = undefined;
    this._mediumDescription = undefined;
    this._longDescription = undefined;
    this._shortTitle = undefined;
    this._mediumTitle = undefined;
    this._longTitle = undefined;
    this._onDidChangeLabel.fire();
  }
  setPreferredResource(preferredResource) {
    if (!isEqual(preferredResource, this._preferredResource)) {
      this._preferredResource = preferredResource;
      this.updateLabel();
    }
  }
  getName() {
    if (typeof this._name !== 'string') {
      this._name = this.customEditorLabelService.getName(this._preferredResource) ?? this.labelService.getUriBasenameLabel(this._preferredResource);
    }
    return this._name;
  }
  getDescription(verbosity = 1) {
    switch (verbosity) {
      case 0:
        return this.shortDescription;
      case 2:
        return this.longDescription;
      case 1:
      default:
        return this.mediumDescription;
    }
  }
  get shortDescription() {
    if (typeof this._shortDescription !== 'string') {
      this._shortDescription = this.labelService.getUriBasenameLabel(dirname(this._preferredResource));
    }
    return this._shortDescription;
  }
  get mediumDescription() {
    if (typeof this._mediumDescription !== 'string') {
      this._mediumDescription = this.labelService.getUriLabel(dirname(this._preferredResource), {
        relative: true
      });
    }
    return this._mediumDescription;
  }
  get longDescription() {
    if (typeof this._longDescription !== 'string') {
      this._longDescription = this.labelService.getUriLabel(dirname(this._preferredResource));
    }
    return this._longDescription;
  }
  get shortTitle() {
    if (typeof this._shortTitle !== 'string') {
      this._shortTitle = this.getName();
    }
    return this._shortTitle;
  }
  get mediumTitle() {
    if (typeof this._mediumTitle !== 'string') {
      this._mediumTitle = this.labelService.getUriLabel(this._preferredResource, {
        relative: true
      });
    }
    return this._mediumTitle;
  }
  get longTitle() {
    if (typeof this._longTitle !== 'string') {
      this._longTitle = this.labelService.getUriLabel(this._preferredResource);
    }
    return this._longTitle;
  }
  getTitle(verbosity) {
    switch (verbosity) {
      case 0:
        return this.shortTitle;
      case 2:
        return this.longTitle;
      default:
      case 1:
        return this.mediumTitle;
    }
  }
  isReadonly() {
    return this.filesConfigurationService.isReadonly(this.resource);
  }
  ensureLimits(options) {
    if (options?.limits) {
      return options.limits;
    }
    const defaultSizeLimit = getLargeFileConfirmationLimit(this.resource);
    let configuredSizeLimit = undefined;
    const configuredSizeLimitMb = this.textResourceConfigurationService.inspect(this.resource, null, 'workbench.editorLargeFileConfirmation');
    if (isConfigured(configuredSizeLimitMb)) {
      configuredSizeLimit = configuredSizeLimitMb.value * ByteSize.MB;
    }
    return {
      size: configuredSizeLimit ?? defaultSizeLimit
    };
  }
};
AbstractResourceEditorInput = __decorate([__param(2, ILabelService), __param(3, IFileService), __param(4, IFilesConfigurationService), __param(5, ITextResourceConfigurationService), __param(6, ICustomEditorLabelService)], AbstractResourceEditorInput);
exports.AbstractResourceEditorInput = AbstractResourceEditorInput;