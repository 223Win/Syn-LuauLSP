const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  URI
} = require('../../../base/common/uri.js');
const {
  MainContext
} = require('./extHost.protocol.js');
const {
  Disposable,
  FileDecoration
} = require('./extHostTypes.js');
const {
  createDecorator
} = require('../../../platform/instantiation/common/instantiation.js');
const {
  IExtHostRpcService
} = require('./extHostRpcService.js');
const {
  ILogService
} = require('../../../platform/log/common/log.service.js');
const {
  groupBy,
  asArray
} = require('../../../base/common/arrays.js');
const {
  compare,
  count
} = require('../../../base/common/strings.js');
const {
  dirname
} = require('../../../base/common/path.js');
const {
  checkProposedApiEnabled
} = require('../../services/extensions/common/extensions.js');
var ExtHostDecorations_1;
let ExtHostDecorations = class ExtHostDecorations {
  static {
    ExtHostDecorations_1 = this;
  }
  static {
    this._handlePool = 0;
  }
  static {
    this._maxEventSize = 250;
  }
  constructor(extHostRpc, _logService) {
    this._logService = _logService;
    this._provider = new Map();
    this._proxy = extHostRpc.getProxy(MainContext.MainThreadDecorations);
  }
  registerFileDecorationProvider(provider, extensionDescription) {
    const handle = ExtHostDecorations_1._handlePool++;
    this._provider.set(handle, {
      provider,
      extensionDescription
    });
    this._proxy.$registerDecorationProvider(handle, extensionDescription.identifier.value);
    const listener = provider.onDidChangeFileDecorations && provider.onDidChangeFileDecorations(e => {
      if (!e) {
        this._proxy.$onDidChange(handle, null);
        return;
      }
      const array = asArray(e);
      if (array.length <= ExtHostDecorations_1._maxEventSize) {
        this._proxy.$onDidChange(handle, array);
        return;
      }
      this._logService.warn('[Decorations] CAPPING events from decorations provider', extensionDescription.identifier.value, array.length);
      const mapped = array.map(uri => ({
        uri,
        rank: count(uri.path, '/')
      }));
      const groups = groupBy(mapped, (a, b) => a.rank - b.rank || compare(a.uri.path, b.uri.path));
      const picked = [];
      outer: for (const uris of groups) {
        let lastDirname;
        for (const obj of uris) {
          const myDirname = dirname(obj.uri.path);
          if (lastDirname !== myDirname) {
            lastDirname = myDirname;
            if (picked.push(obj.uri) >= ExtHostDecorations_1._maxEventSize) {
              break outer;
            }
          }
        }
      }
      this._proxy.$onDidChange(handle, picked);
    });
    return new Disposable(() => {
      listener?.dispose();
      this._proxy.$unregisterDecorationProvider(handle);
      this._provider.delete(handle);
    });
  }
  async $provideDecorations(handle, requests, token) {
    if (!this._provider.has(handle)) {
      return Object.create(null);
    }
    const result = Object.create(null);
    const {
      provider,
      extensionDescription: extensionId
    } = this._provider.get(handle);
    await Promise.all(requests.map(async request => {
      try {
        const {
          uri,
          id
        } = request;
        const data = await Promise.resolve(provider.provideFileDecoration(URI.revive(uri), token));
        if (!data) {
          return;
        }
        try {
          FileDecoration.validate(data);
          if (data.badge && typeof data.badge !== 'string') {
            checkProposedApiEnabled(extensionId, 'codiconDecoration');
          }
          result[id] = [data.propagate, data.tooltip, data.badge, data.color];
        } catch (e) {
          this._logService.warn(`INVALID decoration from extension '${extensionId.identifier.value}': ${e}`);
        }
      } catch (err) {
        this._logService.error(err);
      }
    }));
    return result;
  }
};
ExtHostDecorations = ExtHostDecorations_1 = __decorate([__param(0, IExtHostRpcService), __param(1, ILogService)], ExtHostDecorations);
const IExtHostDecorations = createDecorator('IExtHostDecorations');
exports.ExtHostDecorations = ExtHostDecorations;
exports.IExtHostDecorations = IExtHostDecorations;