const {
  MainContext
} = require('./extHost.protocol.js');
const {
  URI
} = require('../../../base/common/uri.js');
const {
  toDisposable
} = require('../../../base/common/lifecycle.js');
const {
  onUnexpectedError
} = require('../../../base/common/errors.js');
const {
  ExtensionIdentifierSet
} = require('../../../platform/extensions/common/extensions.js');
class ExtHostUrls {
  static {
    this.HandlePool = 0;
  }
  constructor(mainContext) {
    this.handles = new ExtensionIdentifierSet();
    this.handlers = new Map();
    this._proxy = mainContext.getProxy(MainContext.MainThreadUrls);
  }
  registerUriHandler(extension, handler) {
    const extensionId = extension.identifier;
    if (this.handles.has(extensionId)) {
      throw new Error(`Protocol handler already registered for extension ${extensionId}`);
    }
    const handle = ExtHostUrls.HandlePool++;
    this.handles.add(extensionId);
    this.handlers.set(handle, handler);
    this._proxy.$registerUriHandler(handle, extensionId, extension.displayName || extension.name);
    return toDisposable(() => {
      this.handles.delete(extensionId);
      this.handlers.delete(handle);
      this._proxy.$unregisterUriHandler(handle);
    });
  }
  $handleExternalUri(handle, uri) {
    const handler = this.handlers.get(handle);
    if (!handler) {
      return Promise.resolve(undefined);
    }
    try {
      handler.handleUri(URI.revive(uri));
    } catch (err) {
      onUnexpectedError(err);
    }
    return Promise.resolve(undefined);
  }
  async createAppUri(uri) {
    return URI.revive(await this._proxy.$createAppUri(uri));
  }
}
exports.ExtHostUrls = ExtHostUrls;