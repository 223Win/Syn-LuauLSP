const {
  __decorate
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  ProgressLocation
} = require('./extHostTypeConverters.js');
const {
  Progress
} = require('../../../platform/progress/common/progress.js');
const {
  CancellationToken,
  CancellationTokenSource
} = require('../../../base/common/cancellation.js');
const {
  throttle
} = require('../../../base/common/decorators.js');
const {
  onUnexpectedExternalError
} = require('../../../base/common/errors.js');
class ExtHostProgress {
  constructor(proxy) {
    this._handles = 0;
    this._mapHandleToCancellationSource = new Map();
    this._proxy = proxy;
  }
  async withProgress(extension, options, task) {
    const handle = this._handles++;
    const {
      title,
      location,
      cancellable
    } = options;
    const source = {
      label: extension.displayName || extension.name,
      id: extension.identifier.value
    };
    this._proxy.$startProgress(handle, {
      location: ProgressLocation.from(location),
      title,
      source,
      cancellable
    }, !extension.isUnderDevelopment ? extension.identifier.value : undefined).catch(onUnexpectedExternalError);
    return this._withProgress(handle, task, !!cancellable);
  }
  _withProgress(handle, task, cancellable) {
    let source;
    if (cancellable) {
      source = new CancellationTokenSource();
      this._mapHandleToCancellationSource.set(handle, source);
    }
    const progressEnd = handle => {
      this._proxy.$progressEnd(handle);
      this._mapHandleToCancellationSource.delete(handle);
      source?.dispose();
    };
    let p;
    try {
      p = task(new ProgressCallback(this._proxy, handle), cancellable && source ? source.token : CancellationToken.None);
    } catch (err) {
      progressEnd(handle);
      throw err;
    }
    p.then(result => progressEnd(handle), err => progressEnd(handle));
    return p;
  }
  $acceptProgressCanceled(handle) {
    const source = this._mapHandleToCancellationSource.get(handle);
    if (source) {
      source.cancel();
      this._mapHandleToCancellationSource.delete(handle);
    }
  }
}
function mergeProgress(result, currentValue) {
  result.message = currentValue.message;
  if (typeof currentValue.increment === 'number') {
    if (typeof result.increment === 'number') {
      result.increment += currentValue.increment;
    } else {
      result.increment = currentValue.increment;
    }
  }
  return result;
}
class ProgressCallback extends Progress {
  constructor(_proxy, _handle) {
    super(p => this.throttledReport(p));
    this._proxy = _proxy;
    this._handle = _handle;
  }
  throttledReport(p) {
    this._proxy.$progressReport(this._handle, p);
  }
}
ProgressCallback.__decorator = __decorate([throttle(100, (result, currentValue) => mergeProgress(result, currentValue), () => Object.create(null))], ProgressCallback.prototype, "throttledReport", null);
exports.ExtHostProgress = ExtHostProgress;