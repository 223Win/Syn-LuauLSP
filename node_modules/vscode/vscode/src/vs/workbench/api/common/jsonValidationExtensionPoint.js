const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  localizeWithPath
} = require('../../../nls.js');
const {
  ExtensionsRegistry
} = require('../../services/extensions/common/extensionsRegistry.js');
const {
  joinPath,
  isEqualOrParent
} = require('../../../base/common/resources.js');
const {
  isString
} = require('../../../base/common/types.js');
const {
  Disposable
} = require('../../../base/common/lifecycle.js');
const {
  Extensions
} = require('../../services/extensionManagement/common/extensionFeatures.js');
const {
  Registry
} = require('../../../platform/registry/common/platform.js');
const {
  SyncDescriptor
} = require('../../../platform/instantiation/common/descriptors.js');
const {
  MarkdownString
} = require('../../../base/common/htmlContent.js');
const {
  registerWorkbenchContribution2
} = require('../../common/contributions.js');
const {
  IInstantiationService
} = require('../../../platform/instantiation/common/instantiation.js');
const _moduleId = "vs/workbench/api/common/jsonValidationExtensionPoint";
const configurationExtPoint = ExtensionsRegistry.registerExtensionPoint({
  extensionPoint: 'jsonValidation',
  defaultExtensionKind: ['workspace', 'web'],
  jsonSchema: {
    description: localizeWithPath(_moduleId, 0, 'Contributes json schema configuration.'),
    type: 'array',
    defaultSnippets: [{
      body: [{
        fileMatch: '${1:file.json}',
        url: '${2:url}'
      }]
    }],
    items: {
      type: 'object',
      defaultSnippets: [{
        body: {
          fileMatch: '${1:file.json}',
          url: '${2:url}'
        }
      }],
      properties: {
        fileMatch: {
          type: ['string', 'array'],
          description: localizeWithPath(_moduleId, 1, 'The file pattern (or an array of patterns) to match, for example "package.json" or "*.launch". Exclusion patterns start with \'!\''),
          items: {
            type: ['string']
          }
        },
        url: {
          description: localizeWithPath(_moduleId, 2, 'A schema URL (\'http:\', \'https:\') or relative path to the extension folder (\'./\').'),
          type: 'string'
        }
      }
    }
  }
});
class JSONValidationExtensionPoint {
  constructor() {
    configurationExtPoint.setHandler(extensions => {
      for (const extension of extensions) {
        const extensionValue = extension.value;
        const collector = extension.collector;
        const extensionLocation = extension.description.extensionLocation;
        if (!extensionValue || !Array.isArray(extensionValue)) {
          collector.error(localizeWithPath(_moduleId, 3, "'configuration.jsonValidation' must be a array"));
          return;
        }
        extensionValue.forEach(extension => {
          if (!isString(extension.fileMatch) && !(Array.isArray(extension.fileMatch) && extension.fileMatch.every(isString))) {
            collector.error(localizeWithPath(_moduleId, 4, "'configuration.jsonValidation.fileMatch' must be defined as a string or an array of strings."));
            return;
          }
          const uri = extension.url;
          if (!isString(uri)) {
            collector.error(localizeWithPath(_moduleId, 5, "'configuration.jsonValidation.url' must be a URL or relative path"));
            return;
          }
          if (uri.startsWith('./')) {
            try {
              const colorThemeLocation = joinPath(extensionLocation, uri);
              if (!isEqualOrParent(colorThemeLocation, extensionLocation)) {
                collector.warn(localizeWithPath(_moduleId, 6, "Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.", configurationExtPoint.name, colorThemeLocation.toString(), extensionLocation.path));
              }
            } catch (e) {
              collector.error(localizeWithPath(_moduleId, 7, "'configuration.jsonValidation.url' is an invalid relative URL: {0}", e.message));
            }
          } else if (!/^[^:/?#]+:\/\//.test(uri)) {
            collector.error(localizeWithPath(_moduleId, 8, "'configuration.jsonValidation.url' must be an absolute URL or start with './'  to reference schemas located in the extension."));
            return;
          }
        });
      }
    });
  }
}
class JSONValidationDataRenderer extends Disposable {
  constructor() {
    super(...arguments);
    this.type = 'table';
  }
  shouldRender(manifest) {
    return !!manifest.contributes?.jsonValidation;
  }
  render(manifest) {
    const contrib = manifest.contributes?.jsonValidation || [];
    if (!contrib.length) {
      return {
        data: {
          headers: [],
          rows: []
        },
        dispose: () => {}
      };
    }
    const headers = [localizeWithPath(_moduleId, 9, "File Match"), localizeWithPath(_moduleId, 10, "Schema")];
    const rows = contrib.map(v => {
      return [new MarkdownString().appendMarkdown(`\`${Array.isArray(v.fileMatch) ? v.fileMatch.join(', ') : v.fileMatch}\``), v.url];
    });
    return {
      data: {
        headers,
        rows
      },
      dispose: () => {}
    };
  }
}
Registry.as(Extensions.ExtensionFeaturesRegistry).registerExtensionFeature({
  id: 'jsonValidation',
  label: localizeWithPath(_moduleId, 11, "JSON Validation"),
  access: {
    canToggle: false
  },
  renderer: new SyncDescriptor(JSONValidationDataRenderer)
});
let JSONValidationExtensionPointWorkbenchContribution = class JSONValidationExtensionPointWorkbenchContribution {
  static {
    this.ID = 'workbench.contrib.jsonValidationExtensionPoint';
  }
  constructor(instantiationService) {
    this.instantiationService = instantiationService;
    this.instantiationService.createInstance(JSONValidationExtensionPoint);
  }
};
JSONValidationExtensionPointWorkbenchContribution = __decorate([__param(0, IInstantiationService)], JSONValidationExtensionPointWorkbenchContribution);
registerWorkbenchContribution2(JSONValidationExtensionPointWorkbenchContribution.ID, JSONValidationExtensionPointWorkbenchContribution, 1);
exports.JSONValidationExtensionPoint = JSONValidationExtensionPoint;