const {
  toDisposable
} = require('../../../base/common/lifecycle.js');
const {
  isString
} = require('../../../base/common/types.js');
const {
  URI
} = require('../../../base/common/uri.js');
const {
  checkProposedApiEnabled
} = require('../../services/extensions/common/extensions.js');
const {
  MainContext
} = require('./extHost.protocol.js');
class ExtHostProfileContentHandlers {
  constructor(mainContext) {
    this.handlers = new Map();
    this.proxy = mainContext.getProxy(MainContext.MainThreadProfileContentHandlers);
  }
  registerProfileContentHandler(extension, id, handler) {
    checkProposedApiEnabled(extension, 'profileContentHandlers');
    if (this.handlers.has(id)) {
      throw new Error(`Handler with id '${id}' already registered`);
    }
    this.handlers.set(id, handler);
    this.proxy.$registerProfileContentHandler(id, handler.name, handler.description, extension.identifier.value);
    return toDisposable(() => {
      this.handlers.delete(id);
      this.proxy.$unregisterProfileContentHandler(id);
    });
  }
  async $saveProfile(id, name, content, token) {
    const handler = this.handlers.get(id);
    if (!handler) {
      throw new Error(`Unknown handler with id: ${id}`);
    }
    return handler.saveProfile(name, content, token);
  }
  async $readProfile(id, idOrUri, token) {
    const handler = this.handlers.get(id);
    if (!handler) {
      throw new Error(`Unknown handler with id: ${id}`);
    }
    return handler.readProfile(isString(idOrUri) ? idOrUri : URI.revive(idOrUri), token);
  }
}
exports.ExtHostProfileContentHandlers = ExtHostProfileContentHandlers;