const {
  URI
} = require('../../../base/common/uri.js');
const {
  MainContext
} = require('./extHost.protocol.js');
const {
  asPromise
} = require('../../../base/common/async.js');
const {
  DocumentSelector
} = require('./extHostTypeConverters.js');
class ExtHostQuickDiff {
  static {
    this.handlePool = 0;
  }
  constructor(mainContext, uriTransformer) {
    this.uriTransformer = uriTransformer;
    this.providers = new Map();
    this.proxy = mainContext.getProxy(MainContext.MainThreadQuickDiff);
  }
  $provideOriginalResource(handle, uriComponents, token) {
    const uri = URI.revive(uriComponents);
    const provider = this.providers.get(handle);
    if (!provider) {
      return Promise.resolve(null);
    }
    return asPromise(() => provider.provideOriginalResource(uri, token)).then(r => r || null);
  }
  registerQuickDiffProvider(selector, quickDiffProvider, label, rootUri) {
    const handle = ExtHostQuickDiff.handlePool++;
    this.providers.set(handle, quickDiffProvider);
    this.proxy.$registerQuickDiffProvider(handle, DocumentSelector.from(selector, this.uriTransformer), label, rootUri);
    return {
      dispose: () => {
        this.proxy.$unregisterQuickDiffProvider(handle);
        this.providers.delete(handle);
      }
    };
  }
}
exports.ExtHostQuickDiff = ExtHostQuickDiff;