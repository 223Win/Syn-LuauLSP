const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  MainContext
} = require('./extHost.protocol.js');
const {
  IExtHostRpcService
} = require('./extHostRpcService.js');
const {
  WorkspaceEdit
} = require('./extHostTypeConverters.js');
const {
  SerializableObjectWithBuffers
} = require('../../services/extensions/common/proxyIdentifier.js');
let ExtHostBulkEdits = class ExtHostBulkEdits {
  constructor(extHostRpc, extHostDocumentsAndEditors) {
    this._proxy = extHostRpc.getProxy(MainContext.MainThreadBulkEdits);
    this._versionInformationProvider = {
      getTextDocumentVersion: uri => extHostDocumentsAndEditors.getDocument(uri)?.version,
      getNotebookDocumentVersion: () => undefined
    };
  }
  applyWorkspaceEdit(edit, extension, metadata) {
    const dto = new SerializableObjectWithBuffers(WorkspaceEdit.from(edit, this._versionInformationProvider));
    return this._proxy.$tryApplyWorkspaceEdit(dto, undefined, metadata?.isRefactoring ?? false);
  }
};
ExtHostBulkEdits = __decorate([__param(0, IExtHostRpcService)], ExtHostBulkEdits);
exports.ExtHostBulkEdits = ExtHostBulkEdits;