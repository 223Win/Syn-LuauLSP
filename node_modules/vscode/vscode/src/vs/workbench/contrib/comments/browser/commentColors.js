const {
  CommentThreadState
} = require('../../../../editor/common/languages.js');
const {
  peekViewTitleBackground
} = require('../../../../editor/contrib/peekView/browser/peekView.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  registerColor,
  transparent
} = require('../../../../platform/theme/common/colorUtils.js');
const {
  disabledForeground,
  contrastBorder
} = require('../../../../platform/theme/common/colors/baseColors.js');
const {} = require('../../../../platform/theme/common/colors/chartsColors.js');
const {} = require('../../../../platform/theme/common/colors/editorColors.js');
const {} = require('../../../../platform/theme/common/colors/inputColors.js');
const {
  listFocusOutline
} = require('../../../../platform/theme/common/colors/listColors.js');
const {} = require('../../../../platform/theme/common/colors/menuColors.js');
const {} = require('../../../../platform/theme/common/colors/minimapColors.js');
const {} = require('../../../../platform/theme/common/colors/miscColors.js');
const {} = require('../../../../platform/theme/common/colors/quickpickColors.js');
const {} = require('../../../../platform/theme/common/colors/searchColors.js');
const _moduleId = "vs/workbench/contrib/comments/browser/commentColors";
const resolvedCommentViewIcon = registerColor('commentsView.resolvedIcon', {
  dark: disabledForeground,
  light: disabledForeground,
  hcDark: contrastBorder,
  hcLight: contrastBorder
}, localizeWithPath(_moduleId, 0, 'Icon color for resolved comments.'));
const unresolvedCommentViewIcon = registerColor('commentsView.unresolvedIcon', {
  dark: listFocusOutline,
  light: listFocusOutline,
  hcDark: contrastBorder,
  hcLight: contrastBorder
}, localizeWithPath(_moduleId, 1, 'Icon color for unresolved comments.'));
registerColor('editorCommentsWidget.replyInputBackground', {
  dark: peekViewTitleBackground,
  light: peekViewTitleBackground,
  hcDark: peekViewTitleBackground,
  hcLight: peekViewTitleBackground
}, localizeWithPath(_moduleId, 2, 'Background color for comment reply input box.'));
const resolvedCommentBorder = registerColor('editorCommentsWidget.resolvedBorder', {
  dark: resolvedCommentViewIcon,
  light: resolvedCommentViewIcon,
  hcDark: contrastBorder,
  hcLight: contrastBorder
}, localizeWithPath(_moduleId, 3, 'Color of borders and arrow for resolved comments.'));
const unresolvedCommentBorder = registerColor('editorCommentsWidget.unresolvedBorder', {
  dark: unresolvedCommentViewIcon,
  light: unresolvedCommentViewIcon,
  hcDark: contrastBorder,
  hcLight: contrastBorder
}, localizeWithPath(_moduleId, 4, 'Color of borders and arrow for unresolved comments.'));
registerColor('editorCommentsWidget.rangeBackground', {
  dark: transparent(unresolvedCommentBorder, .1),
  light: transparent(unresolvedCommentBorder, .1),
  hcDark: transparent(unresolvedCommentBorder, .1),
  hcLight: transparent(unresolvedCommentBorder, .1)
}, localizeWithPath(_moduleId, 5, 'Color of background for comment ranges.'));
registerColor('editorCommentsWidget.rangeActiveBackground', {
  dark: transparent(unresolvedCommentBorder, .1),
  light: transparent(unresolvedCommentBorder, .1),
  hcDark: transparent(unresolvedCommentBorder, .1),
  hcLight: transparent(unresolvedCommentBorder, .1)
}, localizeWithPath(_moduleId, 6, 'Color of background for currently selected or hovered comment range.'));
const commentThreadStateBorderColors = new Map([[CommentThreadState.Unresolved, unresolvedCommentBorder], [CommentThreadState.Resolved, resolvedCommentBorder]]);
const commentThreadStateIconColors = new Map([[CommentThreadState.Unresolved, unresolvedCommentViewIcon], [CommentThreadState.Resolved, resolvedCommentViewIcon]]);
const commentThreadStateColorVar = '--comment-thread-state-color';
const commentViewThreadStateColorVar = '--comment-view-thread-state-color';
const commentThreadStateBackgroundColorVar = '--comment-thread-state-background-color';
function getCommentThreadStateColor(state, theme, map) {
  const colorId = state !== undefined ? map.get(state) : undefined;
  return colorId !== undefined ? theme.getColor(colorId) : undefined;
}
function getCommentThreadStateBorderColor(state, theme) {
  return getCommentThreadStateColor(state, theme, commentThreadStateBorderColors);
}
function getCommentThreadStateIconColor(state, theme) {
  return getCommentThreadStateColor(state, theme, commentThreadStateIconColors);
}
exports.commentThreadStateBackgroundColorVar = commentThreadStateBackgroundColorVar;
exports.commentThreadStateColorVar = commentThreadStateColorVar;
exports.commentViewThreadStateColorVar = commentViewThreadStateColorVar;
exports.getCommentThreadStateBorderColor = getCommentThreadStateBorderColor;
exports.getCommentThreadStateIconColor = getCommentThreadStateIconColor;