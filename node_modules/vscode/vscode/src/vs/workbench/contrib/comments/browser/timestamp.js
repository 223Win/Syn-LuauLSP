const {
  append,
  $
} = require('../../../../base/browser/dom.js');
const {
  getDefaultHoverDelegate
} = require('../../../../base/browser/ui/hover/hoverDelegateFactory.js');
const {
  fromNow
} = require('../../../../base/common/date.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  language
} = require('../../../../base/common/platform.js');
const {
  COMMENTS_SECTION
} = require('../common/commentsConfiguration.js');
class TimestampWidget extends Disposable {
  constructor(configurationService, hoverService, container, timeStamp) {
    super();
    this.configurationService = configurationService;
    this._date = append(container, $('span.timestamp'));
    this._date.style.display = 'none';
    this._useRelativeTime = this.useRelativeTimeSetting;
    this.hover = this._register(hoverService.setupUpdatableHover(getDefaultHoverDelegate('mouse'), this._date, ''));
    this.setTimestamp(timeStamp);
  }
  get useRelativeTimeSetting() {
    return this.configurationService.getValue(COMMENTS_SECTION).useRelativeTime;
  }
  async setTimestamp(timestamp) {
    if (timestamp !== this._timestamp || this.useRelativeTimeSetting !== this._useRelativeTime) {
      this.updateDate(timestamp);
    }
    this._timestamp = timestamp;
    this._useRelativeTime = this.useRelativeTimeSetting;
  }
  updateDate(timestamp) {
    if (!timestamp) {
      this._date.textContent = '';
      this._date.style.display = 'none';
    } else if (timestamp !== this._timestamp || this.useRelativeTimeSetting !== this._useRelativeTime) {
      this._date.style.display = '';
      let textContent;
      let tooltip;
      if (this.useRelativeTimeSetting) {
        textContent = this.getRelative(timestamp);
        tooltip = this.getDateString(timestamp);
      } else {
        textContent = this.getDateString(timestamp);
      }
      this._date.textContent = textContent;
      this.hover.update(tooltip ?? '');
    }
  }
  getRelative(date) {
    return fromNow(date, true, true);
  }
  getDateString(date) {
    return date.toLocaleString(language);
  }
}
exports.TimestampWidget = TimestampWidget;