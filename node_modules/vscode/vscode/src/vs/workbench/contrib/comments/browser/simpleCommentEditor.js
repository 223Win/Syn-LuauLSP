const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  EditorExtensionsRegistry
} = require('../../../../editor/browser/editorExtensions.js');
const {
  ICodeEditorService
} = require('../../../../editor/browser/services/codeEditorService.js');
const {
  CodeEditorWidget
} = require('../../../../editor/browser/widget/codeEditor/codeEditorWidget.js');
const {
  RawContextKey
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  MenuPreventer
} = require('../../codeEditor/browser/menuPreventer.js');
const {
  EditorDictation
} = require('../../codeEditor/browser/dictation/editorDictation.js');
const {
  ContextMenuController
} = require('../../../../editor/contrib/contextmenu/browser/contextmenu.js');
const {
  SuggestController
} = require('../../../../editor/contrib/suggest/browser/suggestController.js');
const {
  SnippetController2
} = require('../../../../editor/contrib/snippet/browser/snippetController2.js');
const {
  TabCompletionController
} = require('../../snippets/browser/tabCompletion.js');
const {
  IThemeService
} = require('../../../../platform/theme/common/themeService.service.js');
const {
  INotificationService
} = require('../../../../platform/notification/common/notification.service.js');
const {
  IAccessibilityService
} = require('../../../../platform/accessibility/common/accessibility.service.js');
const {
  CommentContextKeys
} = require('../common/commentContextKeys.js');
const {
  ILanguageConfigurationService
} = require('../../../../editor/common/languages/languageConfigurationRegistry.js');
const {
  ILanguageFeaturesService
} = require('../../../../editor/common/services/languageFeatures.js');
const {
  clamp
} = require('../../../../base/common/numbers.js');
const {
  CopyPasteController
} = require('../../../../editor/contrib/dropOrPasteInto/browser/copyPasteController.js');
const {
  CodeActionController
} = require('../../../../editor/contrib/codeAction/browser/codeActionController.js');
const {
  DropIntoEditorController
} = require('../../../../editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.js');
const {
  InlineCompletionsController
} = require('../../../../editor/contrib/inlineCompletions/browser/inlineCompletionsController.js');
const {
  LinkDetector
} = require('../../../../editor/contrib/links/browser/links.js');
const {
  MessageController
} = require('../../../../editor/contrib/message/browser/messageController.js');
const {
  SelectionClipboardContributionID
} = require('../../codeEditor/browser/selectionClipboard.js');
const {
  MenuId
} = require('../../../../platform/actions/common/actions.js');
const {
  HoverController
} = require('../../../../editor/contrib/hover/browser/hoverController.js');
const ctxCommentEditorFocused = new RawContextKey('commentEditorFocused', false);
const MIN_EDITOR_HEIGHT = 5 * 18;
const MAX_EDITOR_HEIGHT = 25 * 18;
let SimpleCommentEditor = class SimpleCommentEditor extends CodeEditorWidget {
  constructor(domElement, options, scopedContextKeyService, parentThread, instantiationService, codeEditorService, commandService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService) {
    const codeEditorWidgetOptions = {
      contributions: [{
        id: MenuPreventer.ID,
        ctor: MenuPreventer,
        instantiation: 2
      }, {
        id: ContextMenuController.ID,
        ctor: ContextMenuController,
        instantiation: 2
      }, {
        id: SuggestController.ID,
        ctor: SuggestController,
        instantiation: 0
      }, {
        id: SnippetController2.ID,
        ctor: SnippetController2,
        instantiation: 4
      }, {
        id: TabCompletionController.ID,
        ctor: TabCompletionController,
        instantiation: 0
      }, {
        id: EditorDictation.ID,
        ctor: EditorDictation,
        instantiation: 4
      }, ...EditorExtensionsRegistry.getSomeEditorContributions([CopyPasteController.ID, DropIntoEditorController.ID, LinkDetector.ID, MessageController.ID, HoverController.ID, SelectionClipboardContributionID, InlineCompletionsController.ID, CodeActionController.ID])],
      contextMenuId: MenuId.SimpleEditorContext
    };
    super(domElement, options, codeEditorWidgetOptions, instantiationService, codeEditorService, commandService, scopedContextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);
    this._commentEditorFocused = ctxCommentEditorFocused.bindTo(scopedContextKeyService);
    this._commentEditorEmpty = CommentContextKeys.commentIsEmpty.bindTo(scopedContextKeyService);
    this._commentEditorEmpty.set(!this.getModel()?.getValueLength());
    this._parentThread = parentThread;
    this._register(this.onDidFocusEditorWidget(_ => this._commentEditorFocused.set(true)));
    this._register(this.onDidChangeModelContent(e => this._commentEditorEmpty.set(!this.getModel()?.getValueLength())));
    this._register(this.onDidBlurEditorWidget(_ => this._commentEditorFocused.reset()));
  }
  getParentThread() {
    return this._parentThread;
  }
  _getActions() {
    return EditorExtensionsRegistry.getEditorActions();
  }
  static getEditorOptions(configurationService) {
    return {
      wordWrap: 'on',
      glyphMargin: false,
      lineNumbers: 'off',
      folding: false,
      selectOnLineNumbers: false,
      scrollbar: {
        vertical: 'visible',
        verticalScrollbarSize: 14,
        horizontal: 'auto',
        useShadows: true,
        verticalHasArrows: false,
        horizontalHasArrows: false,
        alwaysConsumeMouseWheel: false
      },
      overviewRulerLanes: 2,
      lineDecorationsWidth: 0,
      scrollBeyondLastLine: false,
      renderLineHighlight: 'none',
      fixedOverflowWidgets: true,
      acceptSuggestionOnEnter: 'smart',
      minimap: {
        enabled: false
      },
      dropIntoEditor: {
        enabled: true
      },
      autoClosingBrackets: configurationService.getValue('editor.autoClosingBrackets'),
      quickSuggestions: false,
      accessibilitySupport: configurationService.getValue('editor.accessibilitySupport')
    };
  }
};
SimpleCommentEditor = __decorate([__param(4, IInstantiationService), __param(5, ICodeEditorService), __param(6, ICommandService), __param(7, IThemeService), __param(8, INotificationService), __param(9, IAccessibilityService), __param(10, ILanguageConfigurationService), __param(11, ILanguageFeaturesService)], SimpleCommentEditor);
function calculateEditorHeight(parentEditor, editor, currentHeight) {
  const layoutInfo = editor.getLayoutInfo();
  const lineHeight = editor.getOption(67);
  const contentHeight = editor._getViewModel()?.getLineCount() * lineHeight ?? editor.getContentHeight();
  if (contentHeight > layoutInfo.height || contentHeight < layoutInfo.height && currentHeight > MIN_EDITOR_HEIGHT) {
    const linesToAdd = Math.ceil((contentHeight - layoutInfo.height) / lineHeight);
    const proposedHeight = layoutInfo.height + lineHeight * linesToAdd;
    return clamp(proposedHeight, MIN_EDITOR_HEIGHT, clamp(parentEditor.getLayoutInfo().height - 90, MIN_EDITOR_HEIGHT, MAX_EDITOR_HEIGHT));
  }
  return currentHeight;
}
exports.MAX_EDITOR_HEIGHT = MAX_EDITOR_HEIGHT;
exports.MIN_EDITOR_HEIGHT = MIN_EDITOR_HEIGHT;
exports.SimpleCommentEditor = SimpleCommentEditor;
exports.calculateEditorHeight = calculateEditorHeight;
exports.ctxCommentEditorFocused = ctxCommentEditorFocused;