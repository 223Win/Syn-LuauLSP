const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  HierarchicalKind
} = require('../../../../base/common/hierarchicalKind.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  ILanguageFeaturesService
} = require('../../../../editor/common/services/languageFeatures.js');
const {
  CodeActionKind
} = require('../../../../editor/contrib/codeAction/common/types.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
let CodeActionDocumentationContribution = class CodeActionDocumentationContribution extends Disposable {
  constructor(extensionPoint, contextKeyService, languageFeaturesService) {
    super();
    this.contextKeyService = contextKeyService;
    this.contributions = [];
    this.emptyCodeActionsList = {
      actions: [],
      dispose: () => {}
    };
    this._register(languageFeaturesService.codeActionProvider.register('*', this));
    extensionPoint.setHandler(points => {
      this.contributions = [];
      for (const documentation of points) {
        if (!documentation.value.refactoring) {
          continue;
        }
        for (const contribution of documentation.value.refactoring) {
          const precondition = ContextKeyExpr.deserialize(contribution.when);
          if (!precondition) {
            continue;
          }
          this.contributions.push({
            title: contribution.title,
            when: precondition,
            command: contribution.command
          });
        }
      }
    });
  }
  async provideCodeActions(_model, _range, context, _token) {
    return this.emptyCodeActionsList;
  }
  _getAdditionalMenuItems(context, actions) {
    if (context.only !== CodeActionKind.Refactor.value) {
      if (!actions.some(action => action.kind && CodeActionKind.Refactor.contains(new HierarchicalKind(action.kind)))) {
        return [];
      }
    }
    return this.contributions.filter(contribution => this.contextKeyService.contextMatchesRules(contribution.when)).map(contribution => {
      return {
        id: contribution.command,
        title: contribution.title
      };
    });
  }
};
CodeActionDocumentationContribution = __decorate([__param(1, IContextKeyService), __param(2, ILanguageFeaturesService)], CodeActionDocumentationContribution);
exports.CodeActionDocumentationContribution = CodeActionDocumentationContribution;