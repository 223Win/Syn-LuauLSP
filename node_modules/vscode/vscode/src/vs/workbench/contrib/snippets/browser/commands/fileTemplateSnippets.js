const {
  isFalsyOrEmpty,
  groupBy
} = require('../../../../../base/common/arrays.js');
const {
  compare
} = require('../../../../../base/common/strings.js');
const {
  getCodeEditor
} = require('../../../../../editor/browser/editorBrowser.js');
const {
  ILanguageService
} = require('../../../../../editor/common/languages/language.js');
const {
  SnippetController2
} = require('../../../../../editor/contrib/snippet/browser/snippetController2.js');
const {
  localize2WithPath,
  localizeWithPath
} = require('../../../../../nls.js');
const {
  IQuickInputService
} = require('../../../../../platform/quickinput/common/quickInput.service.js');
const {
  SnippetsAction
} = require('./abstractSnippetsActions.js');
const {
  ISnippetsService
} = require('../snippets.service.js');
const {
  IEditorService
} = require('../../../../services/editor/common/editorService.service.js');
const _moduleId = "vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets";
class ApplyFileSnippetAction extends SnippetsAction {
  static {
    this.Id = 'workbench.action.populateFileFromSnippet';
  }
  constructor() {
    super({
      id: ApplyFileSnippetAction.Id,
      title: localize2WithPath(_moduleId, 0, "Fill File with Snippet"),
      f1: true
    });
  }
  async run(accessor) {
    const snippetService = accessor.get(ISnippetsService);
    const quickInputService = accessor.get(IQuickInputService);
    const editorService = accessor.get(IEditorService);
    const langService = accessor.get(ILanguageService);
    const editor = getCodeEditor(editorService.activeTextEditorControl);
    if (!editor || !editor.hasModel()) {
      return;
    }
    const snippets = await snippetService.getSnippets(undefined, {
      fileTemplateSnippets: true,
      noRecencySort: true,
      includeNoPrefixSnippets: true
    });
    if (snippets.length === 0) {
      return;
    }
    const selection = await this._pick(quickInputService, langService, snippets);
    if (!selection) {
      return;
    }
    if (editor.hasModel()) {
      SnippetController2.get(editor)?.apply([{
        range: editor.getModel().getFullModelRange(),
        template: selection.snippet.body
      }]);
      editor.getModel().setLanguage(langService.createById(selection.langId), ApplyFileSnippetAction.Id);
      editor.focus();
    }
  }
  async _pick(quickInputService, langService, snippets) {
    const all = [];
    for (const snippet of snippets) {
      if (isFalsyOrEmpty(snippet.scopes)) {
        all.push({
          langId: '',
          snippet
        });
      } else {
        for (const langId of snippet.scopes) {
          all.push({
            langId,
            snippet
          });
        }
      }
    }
    const picks = [];
    const groups = groupBy(all, (a, b) => compare(a.langId, b.langId));
    for (const group of groups) {
      let first = true;
      for (const item of group) {
        if (first) {
          picks.push({
            type: 'separator',
            label: langService.getLanguageName(item.langId) ?? item.langId
          });
          first = false;
        }
        picks.push({
          snippet: item,
          label: item.snippet.prefix || item.snippet.name,
          detail: item.snippet.description
        });
      }
    }
    const pick = await quickInputService.pick(picks, {
      placeHolder: localizeWithPath(_moduleId, 1, 'Select a snippet'),
      matchOnDetail: true
    });
    return pick?.snippet;
  }
}
exports.ApplyFileSnippetAction = ApplyFileSnippetAction;