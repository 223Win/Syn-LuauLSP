const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  append,
  $$1
} = require('../../../../base/browser/dom.js');
const {
  Button
} = require('../../../../base/browser/ui/button/button.js');
const {
  MarkdownString
} = require('../../../../base/common/htmlContent.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IChatAgentService
} = require('../common/chatAgents.service.js');
const {
  chatAgentLeader,
  chatSubcommandLeader
} = require('../common/chatParserTypes.js');
const _moduleId = "vs/workbench/contrib/chat/browser/chatFollowups";
const $ = $$1;
let ChatFollowups = class ChatFollowups extends Disposable {
  constructor(container, followups, location, options, clickHandler, contextService, chatAgentService) {
    super();
    this.location = location;
    this.options = options;
    this.clickHandler = clickHandler;
    this.contextService = contextService;
    this.chatAgentService = chatAgentService;
    const followupsContainer = append(container, $('.interactive-session-followups'));
    followups.forEach(followup => this.renderFollowup(followupsContainer, followup));
  }
  renderFollowup(container, followup) {
    if (followup.kind === 'command' && followup.when && !this.contextService.contextMatchesRules(ContextKeyExpr.deserialize(followup.when))) {
      return;
    }
    if (!this.chatAgentService.getDefaultAgent(this.location)) {
      return;
    }
    let tooltipPrefix = '';
    if ('agentId' in followup && followup.agentId && followup.agentId !== this.chatAgentService.getDefaultAgent(this.location)?.id) {
      const agent = this.chatAgentService.getAgent(followup.agentId);
      if (!agent) {
        return;
      }
      tooltipPrefix += `${chatAgentLeader}${agent.name} `;
      if ('subCommand' in followup && followup.subCommand) {
        tooltipPrefix += `${chatSubcommandLeader}${followup.subCommand} `;
      }
    }
    const baseTitle = followup.kind === 'reply' ? followup.title || followup.message : followup.title;
    const tooltip = tooltipPrefix + ('tooltip' in followup && followup.tooltip || baseTitle);
    const button = this._register(new Button(container, {
      ...this.options,
      supportIcons: true,
      title: tooltip
    }));
    if (followup.kind === 'reply') {
      button.element.classList.add('interactive-followup-reply');
    } else if (followup.kind === 'command') {
      button.element.classList.add('interactive-followup-command');
    }
    button.element.ariaLabel = localizeWithPath(_moduleId, 0, "Follow up question: {0}", followup.title);
    let label = '';
    if (followup.kind === 'reply') {
      label = '$(sparkle) ' + baseTitle;
    } else {
      label = baseTitle;
    }
    button.label = new MarkdownString(label, {
      supportThemeIcons: true
    });
    this._register(button.onDidClick(() => this.clickHandler(followup)));
  }
};
ChatFollowups = __decorate([__param(5, IContextKeyService), __param(6, IChatAgentService)], ChatFollowups);
exports.ChatFollowups = ChatFollowups;