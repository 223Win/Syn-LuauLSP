const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  h,
  $,
  append
} = require('../../../../base/browser/dom.js');
const {
  Button
} = require('../../../../base/browser/ui/button/button.js');
const {
  renderIcon
} = require('../../../../base/browser/ui/iconLabel/iconLabels.js');
const {
  CancellationTokenSource
} = require('../../../../base/common/cancellation.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  FileAccess
} = require('../../../../base/common/network.js');
const {
  ThemeIcon
} = require('../../../../base/common/themables.js');
const {
  URI
} = require('../../../../base/common/uri.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  IChatAgentService
} = require('../common/chatAgents.service.js');
const {
  showExtensionsWithIdsCommandId
} = require('../../extensions/browser/extensionsActions.js');
const {
  verifiedPublisherIcon
} = require('../../extensions/browser/extensionsIcons.js');
const {
  IExtensionsWorkbenchService
} = require('../../extensions/common/extensions.service.js');
const _moduleId = "vs/workbench/contrib/chat/browser/chatAgentHover";
let ChatAgentHover = class ChatAgentHover extends Disposable {
  constructor(chatAgentService, extensionService, commandService) {
    super();
    this.chatAgentService = chatAgentService;
    this.extensionService = extensionService;
    this.commandService = commandService;
    const hoverElement = h('.chat-agent-hover@root', [h('.chat-agent-hover-header', [h('.chat-agent-hover-icon@icon'), h('.chat-agent-hover-details', [h('.chat-agent-hover-name@name'), h('.chat-agent-hover-extension', [h('.chat-agent-hover-extension-name@extensionName'), h('.chat-agent-hover-separator@separator'), h('.chat-agent-hover-publisher@publisher')])])]), h('span.chat-agent-hover-description@description'), h('span.chat-agent-hover-marketplace-button@button')]);
    this.domNode = hoverElement.root;
    this.icon = hoverElement.icon;
    this.name = hoverElement.name;
    this.extensionName = hoverElement.extensionName;
    this.description = hoverElement.description;
    hoverElement.separator.textContent = '|';
    this.verifiedBadge = $('span.extension-verified-publisher', undefined, renderIcon(verifiedPublisherIcon));
    this.verifiedBadge.style.display = 'none';
    this.publisherName = $('span.chat-agent-hover-publisher-name');
    append(hoverElement.publisher, this.verifiedBadge, this.publisherName);
    const label = localizeWithPath(_moduleId, 0, "View in Marketplace") + '.';
    const marketplaceButton = this._register(new Button(hoverElement.button, {
      title: label,
      buttonBackground: undefined,
      buttonBorder: undefined,
      buttonForeground: undefined,
      buttonHoverBackground: undefined,
      buttonSecondaryBackground: undefined,
      buttonSecondaryForeground: undefined,
      buttonSecondaryHoverBackground: undefined,
      buttonSeparator: undefined
    }));
    marketplaceButton.label = label;
    this._register(marketplaceButton.onDidClick(() => {
      if (this.currentAgent) {
        this.commandService.executeCommand(showExtensionsWithIdsCommandId, [this.currentAgent.extensionId.value]);
      }
    }));
  }
  setAgent(id) {
    const agent = this.chatAgentService.getAgent(id);
    this.currentAgent = agent;
    if (agent.metadata.icon instanceof URI) {
      const avatarIcon = $('img.icon');
      avatarIcon.src = FileAccess.uriToBrowserUri(agent.metadata.icon).toString(true);
      this.icon.replaceChildren($('.avatar', undefined, avatarIcon));
    } else if (agent.metadata.themeIcon) {
      const avatarIcon = $(ThemeIcon.asCSSSelector(agent.metadata.themeIcon));
      this.icon.replaceChildren($('.avatar.codicon-avatar', undefined, avatarIcon));
    }
    this.name.textContent = `@${agent.name}`;
    this.extensionName.textContent = agent.extensionDisplayName;
    this.publisherName.textContent = agent.extensionPublisherDisplayName ?? agent.extensionPublisherId;
    const description = agent.description && !agent.description.endsWith('.') ? `${agent.description}. ` : agent.description || '';
    this.description.textContent = description;
    const cancel = this._register(new CancellationTokenSource());
    this.extensionService.getExtensions([{
      id: agent.extensionId.value
    }], cancel.token).then(extensions => {
      cancel.dispose();
      const extension = extensions[0];
      if (extension?.publisherDomain?.verified) {
        this.verifiedBadge.style.display = '';
      }
    });
  }
};
ChatAgentHover = __decorate([__param(0, IChatAgentService), __param(1, IExtensionsWorkbenchService), __param(2, ICommandService)], ChatAgentHover);
exports.ChatAgentHover = ChatAgentHover;