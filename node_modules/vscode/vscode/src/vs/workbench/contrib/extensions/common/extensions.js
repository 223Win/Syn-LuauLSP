const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  areSameExtensions
} = require('../../../../platform/extensionManagement/common/extensionManagementUtil.js');
const {
  RawContextKey
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  MenuId
} = require('../../../../platform/actions/common/actions.js');
const {
  IExtensionsWorkbenchService
} = require('./extensions.service.js');
const VIEWLET_ID = 'workbench.view.extensions';
const AutoUpdateConfigurationKey = 'extensions.autoUpdate';
const AutoCheckUpdatesConfigurationKey = 'extensions.autoCheckUpdates';
const CloseExtensionDetailsOnViewChangeKey = 'extensions.closeExtensionDetailsOnViewChange';
let ExtensionContainers = class ExtensionContainers extends Disposable {
  constructor(containers, extensionsWorkbenchService) {
    super();
    this.containers = containers;
    this._register(extensionsWorkbenchService.onChange(this.update, this));
  }
  set extension(extension) {
    this.containers.forEach(c => c.extension = extension);
  }
  update(extension) {
    for (const container of this.containers) {
      if (extension && container.extension) {
        if (areSameExtensions(container.extension.identifier, extension.identifier)) {
          if (container.extension.server && extension.server && container.extension.server !== extension.server) {
            if (container.updateWhenCounterExtensionChanges) {
              container.update();
            }
          } else {
            container.extension = extension;
          }
        }
      } else {
        container.update();
      }
    }
  }
};
ExtensionContainers = __decorate([__param(1, IExtensionsWorkbenchService)], ExtensionContainers);
const WORKSPACE_RECOMMENDATIONS_VIEW_ID = 'workbench.views.extensions.workspaceRecommendations';
const OUTDATED_EXTENSIONS_VIEW_ID = 'workbench.views.extensions.searchOutdated';
const TOGGLE_IGNORE_EXTENSION_ACTION_ID = 'workbench.extensions.action.toggleIgnoreExtension';
const SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID = 'workbench.extensions.action.installVSIX';
const INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID = 'workbench.extensions.command.installFromVSIX';
const LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID = 'workbench.extensions.action.listWorkspaceUnsupportedExtensions';
const HasOutdatedExtensionsContext = new RawContextKey('hasOutdatedExtensions', false);
const CONTEXT_HAS_GALLERY = new RawContextKey('hasGallery', false);
const THEME_ACTIONS_GROUP = '_theme_';
const INSTALL_ACTIONS_GROUP = '0_install';
const UPDATE_ACTIONS_GROUP = '0_update';
const extensionsSearchActionsMenu = new MenuId('extensionsSearchActionsMenu');
exports.AutoCheckUpdatesConfigurationKey = AutoCheckUpdatesConfigurationKey;
exports.AutoUpdateConfigurationKey = AutoUpdateConfigurationKey;
exports.CONTEXT_HAS_GALLERY = CONTEXT_HAS_GALLERY;
exports.CloseExtensionDetailsOnViewChangeKey = CloseExtensionDetailsOnViewChangeKey;
exports.ExtensionContainers = ExtensionContainers;
exports.HasOutdatedExtensionsContext = HasOutdatedExtensionsContext;
exports.INSTALL_ACTIONS_GROUP = INSTALL_ACTIONS_GROUP;
exports.INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID = INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID;
exports.LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID = LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID;
exports.OUTDATED_EXTENSIONS_VIEW_ID = OUTDATED_EXTENSIONS_VIEW_ID;
exports.SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID = SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID;
exports.THEME_ACTIONS_GROUP = THEME_ACTIONS_GROUP;
exports.TOGGLE_IGNORE_EXTENSION_ACTION_ID = TOGGLE_IGNORE_EXTENSION_ACTION_ID;
exports.UPDATE_ACTIONS_GROUP = UPDATE_ACTIONS_GROUP;
exports.VIEWLET_ID = VIEWLET_ID;
exports.WORKSPACE_RECOMMENDATIONS_VIEW_ID = WORKSPACE_RECOMMENDATIONS_VIEW_ID;
exports.extensionsSearchActionsMenu = extensionsSearchActionsMenu;