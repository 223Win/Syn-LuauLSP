const {
  Schemas
} = require('../../../../base/common/network.js');
const {
  URI
} = require('../../../../base/common/uri.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  EditorInput
} = require('../../../common/editor/editorInput.js');
const {
  areSameExtensions
} = require('../../../../platform/extensionManagement/common/extensionManagementUtil.js');
const {
  join
} = require('../../../../base/common/path.js');
const {
  Codicon
} = require('../../../../base/common/codicons.js');
const {
  registerIcon
} = require('../../../../platform/theme/common/iconRegistry.js');
const _moduleId = "vs/workbench/contrib/extensions/common/extensionsInput";
const ExtensionEditorIcon = registerIcon('extensions-editor-label-icon', Codicon.extensions, localizeWithPath(_moduleId, 0, 'Icon of the extensions editor label.'));
class ExtensionsInput extends EditorInput {
  static {
    this.ID = 'workbench.extensions.input2';
  }
  get typeId() {
    return ExtensionsInput.ID;
  }
  get capabilities() {
    return 2 | 8;
  }
  get resource() {
    return URI.from({
      scheme: Schemas.extension,
      path: join(this._extension.identifier.id, 'extension')
    });
  }
  constructor(_extension) {
    super();
    this._extension = _extension;
  }
  get extension() {
    return this._extension;
  }
  getName() {
    return localizeWithPath(_moduleId, 1, "Extension: {0}", this._extension.displayName);
  }
  getIcon() {
    return ExtensionEditorIcon;
  }
  matches(other) {
    if (super.matches(other)) {
      return true;
    }
    return other instanceof ExtensionsInput && areSameExtensions(this._extension.identifier, other._extension.identifier);
  }
}
exports.ExtensionsInput = ExtensionsInput;