const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  clearNode,
  reset,
  addDisposableListener
} = require('../../../../base/browser/dom.js');
const {
  CancellationTokenSource
} = require('../../../../base/common/cancellation.js');
const {
  DisposableStore
} = require('../../../../base/common/lifecycle.js');
const {
  registerEditorContribution,
  EditorAction2
} = require('../../../../editor/browser/editorExtensions.js');
const {
  EditorContextKeys
} = require('../../../../editor/common/editorContextKeys.js');
const {
  asCommandLink
} = require('../../../../editor/contrib/inlayHints/browser/inlayHints.js');
const {
  InlayHintsController
} = require('../../../../editor/contrib/inlayHints/browser/inlayHintsController.js');
const {
  localizeWithPath,
  localize2WithPath
} = require('../../../../nls.js');
const {
  registerAction2
} = require('../../../../platform/actions/common/actions.js');
const {
  AccessibilitySignal
} = require('../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js');
const {
  IAccessibilitySignalService
} = require('../../../../platform/accessibilitySignal/browser/accessibilitySignalService.service.js');
const {
  RawContextKey
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  Link
} = require('../../../../platform/opener/browser/link.js');
var InlayHintsAccessibility_1;
const _moduleId = "vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty";
let InlayHintsAccessibility = class InlayHintsAccessibility {
  static {
    InlayHintsAccessibility_1 = this;
  }
  static {
    this.IsReading = new RawContextKey('isReadingLineWithInlayHints', false, {
      type: 'boolean',
      description: localizeWithPath(_moduleId, 0, "Whether the current line and its inlay hints are currently focused")
    });
  }
  static {
    this.ID = 'editor.contrib.InlayHintsAccessibility';
  }
  static get(editor) {
    return editor.getContribution(InlayHintsAccessibility_1.ID) ?? undefined;
  }
  constructor(_editor, contextKeyService, _accessibilitySignalService, _instaService) {
    this._editor = _editor;
    this._accessibilitySignalService = _accessibilitySignalService;
    this._instaService = _instaService;
    this._sessionDispoosables = new DisposableStore();
    this._ariaElement = document.createElement('span');
    this._ariaElement.style.position = 'fixed';
    this._ariaElement.className = 'inlayhint-accessibility-element';
    this._ariaElement.tabIndex = 0;
    this._ariaElement.setAttribute('aria-description', localizeWithPath(_moduleId, 1, "Code with Inlay Hint Information"));
    this._ctxIsReading = InlayHintsAccessibility_1.IsReading.bindTo(contextKeyService);
  }
  dispose() {
    this._sessionDispoosables.dispose();
    this._ctxIsReading.reset();
    this._ariaElement.remove();
  }
  _reset() {
    clearNode(this._ariaElement);
    this._sessionDispoosables.clear();
    this._ctxIsReading.reset();
  }
  async _read(line, hints) {
    this._sessionDispoosables.clear();
    if (!this._ariaElement.isConnected) {
      this._editor.getDomNode()?.appendChild(this._ariaElement);
    }
    if (!this._editor.hasModel() || !this._ariaElement.isConnected) {
      this._ctxIsReading.set(false);
      return;
    }
    const cts = new CancellationTokenSource();
    this._sessionDispoosables.add(cts);
    for (const hint of hints) {
      await hint.resolve(cts.token);
    }
    if (cts.token.isCancellationRequested) {
      return;
    }
    const model = this._editor.getModel();
    const newChildren = [];
    let start = 0;
    let tooLongToRead = false;
    for (const item of hints) {
      const part = model.getValueInRange({
        startLineNumber: line,
        startColumn: start + 1,
        endLineNumber: line,
        endColumn: item.hint.position.column
      });
      if (part.length > 0) {
        newChildren.push(part);
        start = item.hint.position.column - 1;
      }
      if (start > 750) {
        newChildren.push('â€¦');
        tooLongToRead = true;
        break;
      }
      const em = document.createElement('em');
      const {
        label
      } = item.hint;
      if (typeof label === 'string') {
        em.innerText = label;
      } else {
        for (const part of label) {
          if (part.command) {
            const link = this._instaService.createInstance(Link, em, {
              href: asCommandLink(part.command),
              label: part.label,
              title: part.command.title
            }, undefined);
            this._sessionDispoosables.add(link);
          } else {
            em.innerText += part.label;
          }
        }
      }
      newChildren.push(em);
    }
    if (!tooLongToRead) {
      newChildren.push(model.getValueInRange({
        startLineNumber: line,
        startColumn: start + 1,
        endLineNumber: line,
        endColumn: Number.MAX_SAFE_INTEGER
      }));
    }
    reset(this._ariaElement, ...newChildren);
    this._ariaElement.focus();
    this._ctxIsReading.set(true);
    this._sessionDispoosables.add(addDisposableListener(this._ariaElement, 'focusout', () => {
      this._reset();
    }));
  }
  startInlayHintsReading() {
    if (!this._editor.hasModel()) {
      return;
    }
    const line = this._editor.getPosition().lineNumber;
    const hints = InlayHintsController.get(this._editor)?.getInlayHintsForLine(line);
    if (!hints || hints.length === 0) {
      this._accessibilitySignalService.playSignal(AccessibilitySignal.noInlayHints);
    } else {
      this._read(line, hints);
    }
  }
  stopInlayHintsReading() {
    this._reset();
    this._editor.focus();
  }
};
InlayHintsAccessibility = InlayHintsAccessibility_1 = __decorate([__param(1, IContextKeyService), __param(2, IAccessibilitySignalService), __param(3, IInstantiationService)], InlayHintsAccessibility);
registerAction2(class StartReadHints extends EditorAction2 {
  constructor() {
    super({
      id: 'inlayHints.startReadingLineWithHint',
      title: localize2WithPath(_moduleId, 2, "Read Line With Inline Hints"),
      precondition: EditorContextKeys.hasInlayHintsProvider,
      f1: true
    });
  }
  runEditorCommand(_accessor, editor) {
    const ctrl = InlayHintsAccessibility.get(editor);
    ctrl?.startInlayHintsReading();
  }
});
registerAction2(class StopReadHints extends EditorAction2 {
  constructor() {
    super({
      id: 'inlayHints.stopReadingLineWithHint',
      title: localize2WithPath(_moduleId, 3, "Stop Inlay Hints Reading"),
      precondition: InlayHintsAccessibility.IsReading,
      f1: true,
      keybinding: {
        weight: 100,
        primary: 9
      }
    });
  }
  runEditorCommand(_accessor, editor) {
    const ctrl = InlayHintsAccessibility.get(editor);
    ctrl?.stopInlayHintsReading();
  }
});
registerEditorContribution(InlayHintsAccessibility.ID, InlayHintsAccessibility, 4);
exports.InlayHintsAccessibility = InlayHintsAccessibility;