const {
  localize2WithPath,
  localizeWithPath
} = require('../../../../nls.js');
const {
  Action2,
  MenuId,
  registerAction2
} = require('../../../../platform/actions/common/actions.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  Categories
} = require('../../../../platform/action/common/actionCommonCategories.js');
const _moduleId = "vs/workbench/contrib/codeEditor/browser/toggleMinimap";
class ToggleMinimapAction extends Action2 {
  static {
    this.ID = 'editor.action.toggleMinimap';
  }
  constructor() {
    super({
      id: ToggleMinimapAction.ID,
      title: {
        ...localize2WithPath(_moduleId, 0, "Toggle Minimap"),
        mnemonicTitle: localizeWithPath(_moduleId, 1, "&&Minimap")
      },
      category: Categories.View,
      f1: true,
      toggled: ContextKeyExpr.equals('config.editor.minimap.enabled', true),
      menu: {
        id: MenuId.MenubarAppearanceMenu,
        group: '4_editor',
        order: 1
      }
    });
  }
  async run(accessor) {
    const configurationService = accessor.get(IConfigurationService);
    const newValue = !configurationService.getValue('editor.minimap.enabled');
    return configurationService.updateValue('editor.minimap.enabled', newValue);
  }
}
registerAction2(ToggleMinimapAction);
exports.ToggleMinimapAction = ToggleMinimapAction;