const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  basename
} = require('../../../../base/common/path.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  registerEditorContribution
} = require('../../../../editor/browser/editorExtensions.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {} = require('../../../../platform/notification/common/notification.js');
const {
  INotificationService
} = require('../../../../platform/notification/common/notification.service.js');
const Severity$1 = require('../../../../base/common/severity.js');
const _moduleId = "vs/workbench/contrib/codeEditor/browser/largeFileOptimizations";
let LargeFileOptimizationsWarner = class LargeFileOptimizationsWarner extends Disposable {
  static {
    this.ID = 'editor.contrib.largeFileOptimizationsWarner';
  }
  constructor(_editor, _notificationService, _configurationService) {
    super();
    this._editor = _editor;
    this._notificationService = _notificationService;
    this._configurationService = _configurationService;
    this._register(this._editor.onDidChangeModel(e => this._update()));
    this._update();
  }
  _update() {
    const model = this._editor.getModel();
    if (!model) {
      return;
    }
    if (model.isTooLargeForTokenization()) {
      const message = localizeWithPath(_moduleId, 0, "{0}: tokenization, wrapping, folding, codelens, word highlighting and sticky scroll have been turned off for this large file in order to reduce memory usage and avoid freezing or crashing.", basename(model.uri.path));
      this._notificationService.prompt(Severity$1.Info, message, [{
        label: localizeWithPath(_moduleId, 1, "Forcefully Enable Features"),
        run: () => {
          this._configurationService.updateValue(`editor.largeFileOptimizations`, false).then(() => {
            this._notificationService.info(localizeWithPath(_moduleId, 2, "Please reopen file in order for this setting to take effect."));
          }, err => {
            this._notificationService.error(err);
          });
        }
      }], {
        neverShowAgain: {
          id: 'editor.contrib.largeFileOptimizationsWarner'
        }
      });
    }
  }
};
LargeFileOptimizationsWarner = __decorate([__param(1, INotificationService), __param(2, IConfigurationService)], LargeFileOptimizationsWarner);
registerEditorContribution(LargeFileOptimizationsWarner.ID, LargeFileOptimizationsWarner, 1);
exports.LargeFileOptimizationsWarner = LargeFileOptimizationsWarner;