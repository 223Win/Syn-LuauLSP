const {
  __decorate,
  __param
} = require('../../../../../../../../external/tslib/tslib.es6.js');
const {
  Emitter
} = require('../../../../../base/common/event.js');
const {
  localizeWithPath
} = require('../../../../../nls.js');
const {
  IWorkspaceContextService
} = require('../../../../../platform/workspace/common/workspace.service.js');
const {} = require('../../../../../platform/theme/common/colorUtils.js');
const {} = require('../../../../../platform/theme/common/colors/baseColors.js');
const {} = require('../../../../../platform/theme/common/colors/chartsColors.js');
const {} = require('../../../../../platform/theme/common/colors/editorColors.js');
const {} = require('../../../../../platform/theme/common/colors/inputColors.js');
const {
  listInvalidItemForeground,
  listDeemphasizedForeground
} = require('../../../../../platform/theme/common/colors/listColors.js');
const {} = require('../../../../../platform/theme/common/colors/menuColors.js');
const {} = require('../../../../../platform/theme/common/colors/minimapColors.js');
const {} = require('../../../../../platform/theme/common/colors/miscColors.js');
const {} = require('../../../../../platform/theme/common/colors/quickpickColors.js');
const {} = require('../../../../../platform/theme/common/colors/searchColors.js');
const {
  DisposableStore
} = require('../../../../../base/common/lifecycle.js');
const {
  explorerRootErrorEmitter
} = require('./explorerViewer.js');
const {
  IExplorerService
} = require('../files.service.js');
const {
  toErrorMessage
} = require('../../../../../base/common/errorMessage.js');
const _moduleId = "vs/workbench/contrib/files/browser/views/explorerDecorationsProvider";
function provideDecorations(fileStat) {
  if (fileStat.isRoot && fileStat.error) {
    return {
      tooltip: localizeWithPath(_moduleId, 0, "Unable to resolve workspace folder ({0})", toErrorMessage(fileStat.error)),
      letter: '!',
      color: listInvalidItemForeground
    };
  }
  if (fileStat.isSymbolicLink) {
    return {
      tooltip: localizeWithPath(_moduleId, 1, "Symbolic Link"),
      letter: '\u2937'
    };
  }
  if (fileStat.isUnknown) {
    return {
      tooltip: localizeWithPath(_moduleId, 2, "Unknown File Type"),
      letter: '?'
    };
  }
  if (fileStat.isExcluded) {
    return {
      color: listDeemphasizedForeground
    };
  }
  return undefined;
}
let ExplorerDecorationsProvider = class ExplorerDecorationsProvider {
  constructor(explorerService, contextService) {
    this.explorerService = explorerService;
    this.label = localizeWithPath(_moduleId, 3, "Explorer");
    this._onDidChange = new Emitter();
    this.toDispose = new DisposableStore();
    this.toDispose.add(this._onDidChange);
    this.toDispose.add(contextService.onDidChangeWorkspaceFolders(e => {
      this._onDidChange.fire(e.changed.concat(e.added).map(wf => wf.uri));
    }));
    this.toDispose.add(explorerRootErrorEmitter.event(resource => {
      this._onDidChange.fire([resource]);
    }));
  }
  get onDidChange() {
    return this._onDidChange.event;
  }
  async provideDecorations(resource) {
    const fileStat = this.explorerService.findClosest(resource);
    if (!fileStat) {
      throw new Error('ExplorerItem not found');
    }
    return provideDecorations(fileStat);
  }
  dispose() {
    this.toDispose.dispose();
  }
};
ExplorerDecorationsProvider = __decorate([__param(0, IExplorerService), __param(1, IWorkspaceContextService)], ExplorerDecorationsProvider);
exports.ExplorerDecorationsProvider = ExplorerDecorationsProvider;
exports.provideDecorations = provideDecorations;