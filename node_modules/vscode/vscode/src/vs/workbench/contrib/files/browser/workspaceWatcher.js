const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  Disposable,
  dispose,
  DisposableStore
} = require('../../../../base/common/lifecycle.js');
const {
  URI
} = require('../../../../base/common/uri.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {
  IFileService
} = require('../../../../platform/files/common/files.service.js');
const {
  IWorkspaceContextService
} = require('../../../../platform/workspace/common/workspace.service.js');
const {
  ResourceMap
} = require('../../../../base/common/map.js');
const {
  NeverShowAgainScope,
  NotificationPriority
} = require('../../../../platform/notification/common/notification.js');
const {
  INotificationService
} = require('../../../../platform/notification/common/notification.service.js');
const {
  IOpenerService
} = require('../../../../platform/opener/common/opener.service.js');
const {
  isAbsolute
} = require('../../../../base/common/path.js');
const {
  IUriIdentityService
} = require('../../../../platform/uriIdentity/common/uriIdentity.service.js');
const {
  IHostService
} = require('../../../services/host/browser/host.service.js');
const {
  ITelemetryService
} = require('../../../../platform/telemetry/common/telemetry.service.js');
const Severity$1 = require('../../../../base/common/severity.js');
const _moduleId = "vs/workbench/contrib/files/browser/workspaceWatcher";
let WorkspaceWatcher = class WorkspaceWatcher extends Disposable {
  static {
    this.ID = 'workbench.contrib.workspaceWatcher';
  }
  constructor(fileService, configurationService, contextService, notificationService, openerService, uriIdentityService, hostService, telemetryService) {
    super();
    this.fileService = fileService;
    this.configurationService = configurationService;
    this.contextService = contextService;
    this.notificationService = notificationService;
    this.openerService = openerService;
    this.uriIdentityService = uriIdentityService;
    this.hostService = hostService;
    this.telemetryService = telemetryService;
    this.watchedWorkspaces = new ResourceMap(resource => this.uriIdentityService.extUri.getComparisonKey(resource));
    this.registerListeners();
    this.refresh();
  }
  registerListeners() {
    this._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));
    this._register(this.contextService.onDidChangeWorkbenchState(() => this.onDidChangeWorkbenchState()));
    this._register(this.configurationService.onDidChangeConfiguration(e => this.onDidChangeConfiguration(e)));
    this._register(this.fileService.onDidWatchError(error => this.onDidWatchError(error)));
  }
  onDidChangeWorkspaceFolders(e) {
    for (const removed of e.removed) {
      this.unwatchWorkspace(removed);
    }
    for (const added of e.added) {
      this.watchWorkspace(added);
    }
  }
  onDidChangeWorkbenchState() {
    this.refresh();
  }
  onDidChangeConfiguration(e) {
    if (e.affectsConfiguration('files.watcherExclude') || e.affectsConfiguration('files.watcherInclude')) {
      this.refresh();
    }
  }
  onDidWatchError(error) {
    const msg = error.toString();
    let reason = undefined;
    if (msg.indexOf('ENOSPC') >= 0) {
      reason = 'ENOSPC';
      this.notificationService.prompt(Severity$1.Warning, localizeWithPath(_moduleId, 0, "Unable to watch for file changes. Please follow the instructions link to resolve this issue."), [{
        label: localizeWithPath(_moduleId, 1, "Instructions"),
        run: () => this.openerService.open(URI.parse('https://go.microsoft.com/fwlink/?linkid=867693'))
      }], {
        sticky: true,
        neverShowAgain: {
          id: 'ignoreEnospcError',
          isSecondary: true,
          scope: NeverShowAgainScope.WORKSPACE
        }
      });
    } else if (msg.indexOf('EUNKNOWN') >= 0) {
      reason = 'EUNKNOWN';
      this.notificationService.prompt(Severity$1.Warning, localizeWithPath(_moduleId, 2, "File changes watcher stopped unexpectedly. A reload of the window may enable the watcher again unless the workspace cannot be watched for file changes."), [{
        label: localizeWithPath(_moduleId, 3, "Reload"),
        run: () => this.hostService.reload()
      }], {
        sticky: true,
        priority: NotificationPriority.SILENT
      });
    } else if (msg.indexOf('ETERM') >= 0) {
      reason = 'ETERM';
    }
    if (reason) {
      this.telemetryService.publicLog2('fileWatcherError', {
        reason
      });
    }
  }
  watchWorkspace(workspace) {
    const excludes = [];
    const config = this.configurationService.getValue({
      resource: workspace.uri
    });
    if (config.files?.watcherExclude) {
      for (const key in config.files.watcherExclude) {
        if (key && config.files.watcherExclude[key] === true) {
          excludes.push(key);
        }
      }
    }
    const pathsToWatch = new ResourceMap(uri => this.uriIdentityService.extUri.getComparisonKey(uri));
    pathsToWatch.set(workspace.uri, workspace.uri);
    if (config.files?.watcherInclude) {
      for (const includePath of config.files.watcherInclude) {
        if (!includePath) {
          continue;
        }
        if (isAbsolute(includePath)) {
          const candidate = URI.file(includePath).with({
            scheme: workspace.uri.scheme
          });
          if (this.uriIdentityService.extUri.isEqualOrParent(candidate, workspace.uri)) {
            pathsToWatch.set(candidate, candidate);
          }
        } else {
          const candidate = workspace.toResource(includePath);
          pathsToWatch.set(candidate, candidate);
        }
      }
    }
    const disposables = new DisposableStore();
    for (const [, pathToWatch] of pathsToWatch) {
      disposables.add(this.fileService.watch(pathToWatch, {
        recursive: true,
        excludes
      }));
    }
    this.watchedWorkspaces.set(workspace.uri, disposables);
  }
  unwatchWorkspace(workspace) {
    if (this.watchedWorkspaces.has(workspace.uri)) {
      dispose(this.watchedWorkspaces.get(workspace.uri));
      this.watchedWorkspaces.delete(workspace.uri);
    }
  }
  refresh() {
    this.unwatchWorkspaces();
    for (const folder of this.contextService.getWorkspace().folders) {
      this.watchWorkspace(folder);
    }
  }
  unwatchWorkspaces() {
    for (const [, disposable] of this.watchedWorkspaces) {
      disposable.dispose();
    }
    this.watchedWorkspaces.clear();
  }
  dispose() {
    super.dispose();
    this.unwatchWorkspaces();
  }
};
WorkspaceWatcher = __decorate([__param(0, IFileService), __param(1, IConfigurationService), __param(2, IWorkspaceContextService), __param(3, INotificationService), __param(4, IOpenerService), __param(5, IUriIdentityService), __param(6, IHostService), __param(7, ITelemetryService)], WorkspaceWatcher);
exports.WorkspaceWatcher = WorkspaceWatcher;