const {
  URI
} = require('../../../../base/common/uri.js');
const {
  OpenEditor
} = require('../common/files.js');
const {
  EditorResourceAccessor,
  SideBySideEditor
} = require('../../../common/editor.js');
const {
  List
} = require('../../../../base/browser/ui/list/listWidget.js');
const {
  ExplorerItem
} = require('../common/explorerModel.js');
const {
  coalesce
} = require('../../../../base/common/arrays.js');
const {
  AsyncDataTree
} = require('../../../../base/browser/ui/tree/asyncDataTree.js');
const {
  isActiveElement
} = require('../../../../base/browser/dom.js');
function getFocus(listService) {
  const list = listService.lastFocusedList;
  const element = list?.getHTMLElement();
  if (element && isActiveElement(element)) {
    let focus;
    if (list instanceof List) {
      const focused = list.getFocusedElements();
      if (focused.length) {
        focus = focused[0];
      }
    } else if (list instanceof AsyncDataTree) {
      const focused = list.getFocus();
      if (focused.length) {
        focus = focused[0];
      }
    }
    return focus;
  }
  return undefined;
}
function getResourceForCommand(resource, listService, editorService) {
  if (URI.isUri(resource)) {
    return resource;
  }
  const focus = getFocus(listService);
  if (focus instanceof ExplorerItem) {
    return focus.resource;
  } else if (focus instanceof OpenEditor) {
    return focus.getResource();
  }
  return EditorResourceAccessor.getOriginalUri(editorService.activeEditor, {
    supportSideBySide: SideBySideEditor.PRIMARY
  });
}
function getMultiSelectedResources(resource, listService, editorService, explorerService) {
  const list = listService.lastFocusedList;
  const element = list?.getHTMLElement();
  if (element && isActiveElement(element)) {
    if (list instanceof AsyncDataTree && list.getFocus().every(item => item instanceof ExplorerItem)) {
      const context = explorerService.getContext(true, true);
      if (context.length) {
        return context.map(c => c.resource);
      }
    }
    if (list instanceof List) {
      const selection = coalesce(list.getSelectedElements().filter(s => s instanceof OpenEditor).map(oe => oe.getResource()));
      const focusedElements = list.getFocusedElements();
      const focus = focusedElements.length ? focusedElements[0] : undefined;
      let mainUriStr = undefined;
      if (URI.isUri(resource)) {
        mainUriStr = resource.toString();
      } else if (focus instanceof OpenEditor) {
        const focusedResource = focus.getResource();
        mainUriStr = focusedResource ? focusedResource.toString() : undefined;
      }
      if (selection.some(s => s.toString() === mainUriStr)) {
        return selection;
      }
    }
  }
  const result = getResourceForCommand(resource, listService, editorService);
  return !!result ? [result] : [];
}
function getOpenEditorsViewMultiSelection(listService, editorGroupService) {
  const list = listService.lastFocusedList;
  const element = list?.getHTMLElement();
  if (element && isActiveElement(element)) {
    if (list instanceof List) {
      const selection = coalesce(list.getSelectedElements().filter(s => s instanceof OpenEditor));
      const focusedElements = list.getFocusedElements();
      const focus = focusedElements.length ? focusedElements[0] : undefined;
      let mainEditor = undefined;
      if (focus instanceof OpenEditor) {
        mainEditor = focus;
      }
      if (selection.some(s => s === mainEditor)) {
        return selection;
      }
      return mainEditor ? [mainEditor] : undefined;
    }
  }
  return undefined;
}
exports.getMultiSelectedResources = getMultiSelectedResources;
exports.getOpenEditorsViewMultiSelection = getOpenEditorsViewMultiSelection;
exports.getResourceForCommand = getResourceForCommand;