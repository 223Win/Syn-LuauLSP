const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  Schemas
} = require('../../../../base/common/network.js');
const {
  sep
} = require('../../../../base/common/path.js');
const {
  isWindows
} = require('../../../../base/common/platform.js');
const {
  ModesRegistry
} = require('../../../../editor/common/languages/modesRegistry.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  SyncDescriptor
} = require('../../../../platform/instantiation/common/descriptors.js');
const {
  ILabelService
} = require('../../../../platform/label/common/label.service.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const {
  EditorPaneDescriptor
} = require('../../../browser/editor.js');
const {
  registerWorkbenchContribution2
} = require('../../../common/contributions.js');
const {
  EditorExtensions
} = require('../../../common/editor.js');
const {
  BinaryFileEditor
} = require('./editors/binaryFileEditor.js');
const {
  FileEditorInputSerializer,
  FileEditorWorkingCopyEditorHandler
} = require('./editors/fileEditorHandler.js');
const {
  FileEditorInput
} = require('./editors/fileEditorInput.js');
const {
  TextFileEditor
} = require('./editors/textFileEditor.js');
const {
  TextFileEditorTracker
} = require('./editors/textFileEditorTracker.js');
const {
  TextFileSaveErrorHandler
} = require('./editors/textFileSaveErrorHandler.js');
const {
  WorkspaceWatcher
} = require('./workspaceWatcher.js');
const {
  DirtyFilesIndicator
} = require('../common/dirtyFilesIndicator.js');
const {
  FILE_EDITOR_INPUT_ID,
  BINARY_TEXT_FILE_MODE
} = require('../common/files.js');
const {} = require('./files.contribution._fileEditorFactory.js');
const _moduleId = "vs/workbench/contrib/files/browser/files.contribution";
let FileUriLabelContribution = class FileUriLabelContribution {
  static {
    this.ID = 'workbench.contrib.fileUriLabel';
  }
  constructor(labelService) {
    labelService.registerFormatter({
      scheme: Schemas.file,
      formatting: {
        label: '${authority}${path}',
        separator: sep,
        tildify: !isWindows,
        normalizeDriveLetter: isWindows,
        authorityPrefix: sep + sep,
        workspaceSuffix: ''
      }
    });
  }
};
FileUriLabelContribution = __decorate([__param(0, ILabelService)], FileUriLabelContribution);
Registry.as(EditorExtensions.EditorPane).registerEditorPane(EditorPaneDescriptor.create(TextFileEditor, TextFileEditor.ID, localizeWithPath(_moduleId, 102, "Text File Editor")), [new SyncDescriptor(FileEditorInput)]);
Registry.as(EditorExtensions.EditorPane).registerEditorPane(EditorPaneDescriptor.create(BinaryFileEditor, BinaryFileEditor.ID, localizeWithPath(_moduleId, 103, "Binary File Editor")), [new SyncDescriptor(FileEditorInput)]);
Registry.as(EditorExtensions.EditorFactory).registerEditorSerializer(FILE_EDITOR_INPUT_ID, FileEditorInputSerializer);
registerWorkbenchContribution2(FileEditorWorkingCopyEditorHandler.ID, FileEditorWorkingCopyEditorHandler, 2);
registerWorkbenchContribution2(TextFileEditorTracker.ID, TextFileEditorTracker, 1);
registerWorkbenchContribution2(TextFileSaveErrorHandler.ID, TextFileSaveErrorHandler, 1);
registerWorkbenchContribution2(FileUriLabelContribution.ID, FileUriLabelContribution, 1);
registerWorkbenchContribution2(WorkspaceWatcher.ID, WorkspaceWatcher, 3);
registerWorkbenchContribution2(DirtyFilesIndicator.ID, DirtyFilesIndicator, 1);
ModesRegistry.registerLanguage({
  id: BINARY_TEXT_FILE_MODE,
  aliases: ['Binary'],
  mimetypes: ['text/x-code-binary']
});