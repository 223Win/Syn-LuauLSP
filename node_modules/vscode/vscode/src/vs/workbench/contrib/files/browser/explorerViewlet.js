const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {} = require('./media/explorerviewlet.css.js');
const {
  localize2WithPath,
  localizeWithPath
} = require('../../../../nls.js');
const {
  mark
} = require('../../../../base/common/performance.js');
const {
  VIEW_ID,
  VIEWLET_ID,
  ExplorerViewletVisibleContext
} = require('../common/files.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {
  ExplorerView
} = require('./views/explorerView.js');
const {
  EmptyView
} = require('./views/emptyView.js');
const {
  OpenEditorsView
} = require('./views/openEditorsView.js');
const {
  IStorageService
} = require('../../../../platform/storage/common/storage.service.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  IExtensionService
} = require('../../../services/extensions/common/extensions.service.js');
const {
  IWorkspaceContextService
} = require('../../../../platform/workspace/common/workspace.service.js');
const {
  ITelemetryService
} = require('../../../../platform/telemetry/common/telemetry.service.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IThemeService
} = require('../../../../platform/theme/common/themeService.service.js');
const {
  Extensions,
  ViewContentGroups
} = require('../../../common/views.js');
const {
  IViewDescriptorService
} = require('../../../common/views.service.js');
const {
  IContextMenuService
} = require('../../../../platform/contextview/browser/contextView.service.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  IWorkbenchLayoutService
} = require('../../../services/layout/browser/layoutService.service.js');
const {
  ViewPaneContainer
} = require('../../../browser/parts/views/viewPaneContainer.js');
const {
  KeyChord
} = require('../../../../base/common/keyCodes.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const {
  IProgressService
} = require('../../../../platform/progress/common/progress.service.js');
const {
  SyncDescriptor
} = require('../../../../platform/instantiation/common/descriptors.js');
const {
  WorkbenchStateContext,
  OpenFolderWorkspaceSupportContext,
  RemoteNameContext
} = require('../../../common/contextkeys.js');
const {
  IsWebContext
} = require('../../../../platform/contextkey/common/contextkeys.js');
const {
  AddRootFolderAction,
  OpenFileFolderAction,
  OpenFolderAction,
  OpenFolderViaWorkspaceAction
} = require('../../../browser/actions/workspaceActions.js');
const {
  OpenRecentAction
} = require('../../../browser/actions/windowActions.js');
const {
  isMacintosh,
  isWeb
} = require('../../../../base/common/platform.js');
const {
  Codicon
} = require('../../../../base/common/codicons.js');
const {
  registerIcon
} = require('../../../../platform/theme/common/iconRegistry.js');
const {
  isMouseEvent
} = require('../../../../base/browser/dom.js');
const _moduleId = "vs/workbench/contrib/files/browser/explorerViewlet";
const explorerViewIcon = registerIcon('explorer-view-icon', Codicon.files, localizeWithPath(_moduleId, 0, 'View icon of the explorer view.'));
const openEditorsViewIcon = registerIcon('open-editors-view-icon', Codicon.book, localizeWithPath(_moduleId, 1, 'View icon of the open editors view.'));
let ExplorerViewletViewsContribution = class ExplorerViewletViewsContribution extends Disposable {
  static {
    this.ID = 'workbench.contrib.explorerViewletViews';
  }
  constructor(workspaceContextService, progressService) {
    super();
    this.workspaceContextService = workspaceContextService;
    progressService.withProgress({
      location: 1
    }, () => workspaceContextService.getCompleteWorkspace()).finally(() => {
      this.registerViews();
      this._register(workspaceContextService.onDidChangeWorkbenchState(() => this.registerViews()));
      this._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.registerViews()));
    });
  }
  registerViews() {
    mark('code/willRegisterExplorerViews');
    const viewDescriptors = viewsRegistry.getViews(VIEW_CONTAINER);
    const viewDescriptorsToRegister = [];
    const viewDescriptorsToDeregister = [];
    const openEditorsViewDescriptor = this.createOpenEditorsViewDescriptor();
    if (!viewDescriptors.some(v => v.id === openEditorsViewDescriptor.id)) {
      viewDescriptorsToRegister.push(openEditorsViewDescriptor);
    }
    const explorerViewDescriptor = this.createExplorerViewDescriptor();
    const registeredExplorerViewDescriptor = viewDescriptors.find(v => v.id === explorerViewDescriptor.id);
    const emptyViewDescriptor = this.createEmptyViewDescriptor();
    const registeredEmptyViewDescriptor = viewDescriptors.find(v => v.id === emptyViewDescriptor.id);
    if (this.workspaceContextService.getWorkbenchState() === 1 || this.workspaceContextService.getWorkspace().folders.length === 0) {
      if (registeredExplorerViewDescriptor) {
        viewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);
      }
      if (!registeredEmptyViewDescriptor) {
        viewDescriptorsToRegister.push(emptyViewDescriptor);
      }
    } else {
      if (registeredEmptyViewDescriptor) {
        viewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);
      }
      if (!registeredExplorerViewDescriptor) {
        viewDescriptorsToRegister.push(explorerViewDescriptor);
      }
    }
    if (viewDescriptorsToDeregister.length) {
      viewsRegistry.deregisterViews(viewDescriptorsToDeregister, VIEW_CONTAINER);
    }
    if (viewDescriptorsToRegister.length) {
      viewsRegistry.registerViews(viewDescriptorsToRegister, VIEW_CONTAINER);
    }
    mark('code/didRegisterExplorerViews');
  }
  createOpenEditorsViewDescriptor() {
    return {
      id: OpenEditorsView.ID,
      name: OpenEditorsView.NAME,
      ctorDescriptor: new SyncDescriptor(OpenEditorsView),
      containerIcon: openEditorsViewIcon,
      order: 0,
      canToggleVisibility: true,
      canMoveView: true,
      collapsed: false,
      hideByDefault: true,
      focusCommand: {
        id: 'workbench.files.action.focusOpenEditorsView',
        keybindings: {
          primary: KeyChord(2048 | 41, 35)
        }
      }
    };
  }
  createEmptyViewDescriptor() {
    return {
      id: EmptyView.ID,
      name: EmptyView.NAME,
      containerIcon: explorerViewIcon,
      ctorDescriptor: new SyncDescriptor(EmptyView),
      order: 1,
      canToggleVisibility: true,
      focusCommand: {
        id: 'workbench.explorer.fileView.focus'
      }
    };
  }
  createExplorerViewDescriptor() {
    return {
      id: VIEW_ID,
      name: localize2WithPath(_moduleId, 2, "Folders"),
      containerIcon: explorerViewIcon,
      ctorDescriptor: new SyncDescriptor(ExplorerView),
      order: 1,
      canMoveView: true,
      canToggleVisibility: false,
      focusCommand: {
        id: 'workbench.explorer.fileView.focus'
      }
    };
  }
};
ExplorerViewletViewsContribution = __decorate([__param(0, IWorkspaceContextService), __param(1, IProgressService)], ExplorerViewletViewsContribution);
let ExplorerViewPaneContainer = class ExplorerViewPaneContainer extends ViewPaneContainer {
  constructor(layoutService, telemetryService, contextService, storageService, configurationService, instantiationService, contextKeyService, themeService, contextMenuService, extensionService, viewDescriptorService) {
    super(VIEWLET_ID, {
      mergeViewWithContainerWhenSingleView: true
    }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);
    this.viewletVisibleContextKey = ExplorerViewletVisibleContext.bindTo(contextKeyService);
    this._register(this.contextService.onDidChangeWorkspaceName(e => this.updateTitleArea()));
  }
  create(parent) {
    super.create(parent);
    parent.classList.add('explorer-viewlet');
  }
  createView(viewDescriptor, options) {
    if (viewDescriptor.id === VIEW_ID) {
      return this.instantiationService.createInstance(ExplorerView, {
        ...options,
        delegate: {
          willOpenElement: e => {
            if (!isMouseEvent(e)) {
              return;
            }
            const openEditorsView = this.getOpenEditorsView();
            if (openEditorsView) {
              let delay = 0;
              const config = this.configurationService.getValue();
              if (!!config.workbench?.editor?.enablePreview) {
                delay = 250;
              }
              openEditorsView.setStructuralRefreshDelay(delay);
            }
          },
          didOpenElement: e => {
            if (!isMouseEvent(e)) {
              return;
            }
            const openEditorsView = this.getOpenEditorsView();
            openEditorsView?.setStructuralRefreshDelay(0);
          }
        }
      });
    }
    return super.createView(viewDescriptor, options);
  }
  getExplorerView() {
    return this.getView(VIEW_ID);
  }
  getOpenEditorsView() {
    return this.getView(OpenEditorsView.ID);
  }
  setVisible(visible) {
    this.viewletVisibleContextKey.set(visible);
    super.setVisible(visible);
  }
  focus() {
    const explorerView = this.getView(VIEW_ID);
    if (explorerView && this.panes.every(p => !p.isExpanded())) {
      explorerView.setExpanded(true);
    }
    if (explorerView?.isExpanded()) {
      explorerView.focus();
    } else {
      super.focus();
    }
  }
};
ExplorerViewPaneContainer = __decorate([__param(0, IWorkbenchLayoutService), __param(1, ITelemetryService), __param(2, IWorkspaceContextService), __param(3, IStorageService), __param(4, IConfigurationService), __param(5, IInstantiationService), __param(6, IContextKeyService), __param(7, IThemeService), __param(8, IContextMenuService), __param(9, IExtensionService), __param(10, IViewDescriptorService)], ExplorerViewPaneContainer);
const viewContainerRegistry = Registry.as(Extensions.ViewContainersRegistry);
const VIEW_CONTAINER = viewContainerRegistry.registerViewContainer({
  id: VIEWLET_ID,
  title: localize2WithPath(_moduleId, 3, "Explorer"),
  ctorDescriptor: new SyncDescriptor(ExplorerViewPaneContainer),
  storageId: 'workbench.explorer.views.state',
  icon: explorerViewIcon,
  alwaysUseContainerInfo: true,
  hideIfEmpty: true,
  order: 0,
  openCommandActionDescriptor: {
    id: VIEWLET_ID,
    title: localize2WithPath(_moduleId, 3, "Explorer"),
    mnemonicTitle: localizeWithPath(_moduleId, 4, "&&Explorer"),
    keybindings: {
      primary: 2048 | 1024 | 35
    },
    order: 0
  }
}, 0, {
  isDefault: true
});
const openFolder = localizeWithPath(_moduleId, 5, "Open Folder");
const addAFolder = localizeWithPath(_moduleId, 6, "add a folder");
const openRecent = localizeWithPath(_moduleId, 7, "Open Recent");
const addRootFolderButton = `[${openFolder}](command:${AddRootFolderAction.ID})`;
const addAFolderButton = `[${addAFolder}](command:${AddRootFolderAction.ID})`;
const openFolderButton = `[${openFolder}](command:${isMacintosh && !isWeb ? OpenFileFolderAction.ID : OpenFolderAction.ID})`;
const openFolderViaWorkspaceButton = `[${openFolder}](command:${OpenFolderViaWorkspaceAction.ID})`;
const openRecentButton = `[${openRecent}](command:${OpenRecentAction.ID})`;
const viewsRegistry = Registry.as(Extensions.ViewsRegistry);
viewsRegistry.registerViewWelcomeContent(EmptyView.ID, {
  content: localizeWithPath(_moduleId, 8, "You have not yet added a folder to the workspace.\n{0}", addRootFolderButton),
  when: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('workspace'), OpenFolderWorkspaceSupportContext),
  group: ViewContentGroups.Open,
  order: 1
});
viewsRegistry.registerViewWelcomeContent(EmptyView.ID, {
  content: localizeWithPath(_moduleId, 9, "You have not yet opened a folder.\n{0}\n{1}", openFolderViaWorkspaceButton, openRecentButton),
  when: ContextKeyExpr.and(WorkbenchStateContext.isEqualTo('workspace'), OpenFolderWorkspaceSupportContext.toNegated()),
  group: ViewContentGroups.Open,
  order: 1
});
viewsRegistry.registerViewWelcomeContent(EmptyView.ID, {
  content: localizeWithPath(_moduleId, 10, "Connected to remote.\n{0}", openFolderButton),
  when: ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.notEqualsTo(''), IsWebContext.toNegated()),
  group: ViewContentGroups.Open,
  order: 1
});
viewsRegistry.registerViewWelcomeContent(EmptyView.ID, {
  content: localizeWithPath(_moduleId, 11, "You have not yet opened a folder.\n{0}\nOpening a folder will close all currently open editors. To keep them open, {1} instead.", openFolderButton, addAFolderButton),
  when: ContextKeyExpr.and(ContextKeyExpr.has('editorIsOpen'), ContextKeyExpr.or(ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')), ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext))),
  group: ViewContentGroups.Open,
  order: 1
});
viewsRegistry.registerViewWelcomeContent(EmptyView.ID, {
  content: localizeWithPath(_moduleId, 12, "You have not yet opened a folder.\n{0}", openFolderButton),
  when: ContextKeyExpr.and(ContextKeyExpr.has('editorIsOpen')?.negate(), ContextKeyExpr.or(ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')), ContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext))),
  group: ViewContentGroups.Open,
  order: 1
});
exports.ExplorerViewPaneContainer = ExplorerViewPaneContainer;
exports.ExplorerViewletViewsContribution = ExplorerViewletViewsContribution;
exports.VIEW_CONTAINER = VIEW_CONTAINER;