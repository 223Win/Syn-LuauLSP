const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  VIEWLET_ID
} = require('./files.js');
const {
  Disposable,
  MutableDisposable
} = require('../../../../base/common/lifecycle.js');
const {
  NumberBadge
} = require('../../../services/activity/common/activity.js');
const {
  IActivityService
} = require('../../../services/activity/common/activity.service.js');
const {
  IWorkingCopyService
} = require('../../../services/workingCopy/common/workingCopyService.service.js');
const {
  IFilesConfigurationService
} = require('../../../services/filesConfiguration/common/filesConfigurationService.service.js');
const _moduleId = "vs/workbench/contrib/files/common/dirtyFilesIndicator";
let DirtyFilesIndicator = class DirtyFilesIndicator extends Disposable {
  static {
    this.ID = 'workbench.contrib.dirtyFilesIndicator';
  }
  constructor(activityService, workingCopyService, filesConfigurationService) {
    super();
    this.activityService = activityService;
    this.workingCopyService = workingCopyService;
    this.filesConfigurationService = filesConfigurationService;
    this.badgeHandle = this._register(new MutableDisposable());
    this.lastKnownDirtyCount = 0;
    this.updateActivityBadge();
    this.registerListeners();
  }
  registerListeners() {
    this._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onWorkingCopyDidChangeDirty(workingCopy)));
  }
  onWorkingCopyDidChangeDirty(workingCopy) {
    const gotDirty = workingCopy.isDirty();
    if (gotDirty && !(workingCopy.capabilities & 2) && this.filesConfigurationService.hasShortAutoSaveDelay(workingCopy.resource)) {
      return;
    }
    if (gotDirty || this.lastKnownDirtyCount > 0) {
      this.updateActivityBadge();
    }
  }
  updateActivityBadge() {
    const dirtyCount = this.lastKnownDirtyCount = this.workingCopyService.dirtyCount;
    if (dirtyCount > 0) {
      this.badgeHandle.value = this.activityService.showViewContainerActivity(VIEWLET_ID, {
        badge: new NumberBadge(dirtyCount, num => num === 1 ? localizeWithPath(_moduleId, 0, "1 unsaved file") : localizeWithPath(_moduleId, 1, "{0} unsaved files", dirtyCount))
      });
    } else {
      this.badgeHandle.clear();
    }
  }
};
DirtyFilesIndicator = __decorate([__param(0, IActivityService), __param(1, IWorkingCopyService), __param(2, IFilesConfigurationService)], DirtyFilesIndicator);
exports.DirtyFilesIndicator = DirtyFilesIndicator;