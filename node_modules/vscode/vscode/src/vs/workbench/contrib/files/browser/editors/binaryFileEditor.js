const {
  __decorate,
  __param
} = require('../../../../../../../../external/tslib/tslib.es6.js');
const {
  localizeWithPath
} = require('../../../../../nls.js');
const {
  BaseBinaryResourceEditor
} = require('../../../../browser/parts/editor/binaryEditor.js');
const {
  ITelemetryService
} = require('../../../../../platform/telemetry/common/telemetry.service.js');
const {
  IThemeService
} = require('../../../../../platform/theme/common/themeService.service.js');
const {
  FileEditorInput
} = require('./fileEditorInput.js');
const {
  BINARY_FILE_EDITOR_ID,
  BINARY_TEXT_FILE_MODE
} = require('../../common/files.js');
const {
  IStorageService
} = require('../../../../../platform/storage/common/storage.service.js');
const {
  EditorResolution
} = require('../../../../../platform/editor/common/editor.js');
const {
  IEditorResolverService
} = require('../../../../services/editor/common/editorResolverService.service.js');
const {
  isEditorInputWithOptions
} = require('../../../../common/editor.js');
const {
  DiffEditorInput
} = require('../../../../common/editor/diffEditorInput.js');
var BinaryFileEditor_1;
const _moduleId = "vs/workbench/contrib/files/browser/editors/binaryFileEditor";
let BinaryFileEditor = class BinaryFileEditor extends BaseBinaryResourceEditor {
  static {
    BinaryFileEditor_1 = this;
  }
  static {
    this.ID = BINARY_FILE_EDITOR_ID;
  }
  constructor(group, telemetryService, themeService, editorResolverService, storageService) {
    super(BinaryFileEditor_1.ID, group, {
      openInternal: (input, options) => this.openInternal(input, options)
    }, telemetryService, themeService, storageService);
    this.editorResolverService = editorResolverService;
  }
  async openInternal(input, options) {
    if (input instanceof FileEditorInput && this.group.activeEditor) {
      const activeEditor = this.group.activeEditor;
      const untypedActiveEditor = activeEditor?.toUntyped();
      if (!untypedActiveEditor) {
        return;
      }
      let resolvedEditor = await this.editorResolverService.resolveEditor({
        ...untypedActiveEditor,
        options: {
          ...options,
          override: EditorResolution.PICK
        }
      }, this.group);
      if (resolvedEditor === 2) {
        resolvedEditor = undefined;
      } else if (resolvedEditor === 1) {
        return;
      }
      if (isEditorInputWithOptions(resolvedEditor)) {
        for (const editor of resolvedEditor.editor instanceof DiffEditorInput ? [resolvedEditor.editor.original, resolvedEditor.editor.modified] : [resolvedEditor.editor]) {
          if (editor instanceof FileEditorInput) {
            editor.setForceOpenAsText();
            editor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE);
          }
        }
      }
      await this.group.replaceEditors([{
        editor: activeEditor,
        replacement: resolvedEditor?.editor ?? input,
        options: {
          ...(resolvedEditor?.options ?? options)
        }
      }]);
    }
  }
  getTitle() {
    return this.input ? this.input.getName() : localizeWithPath(_moduleId, 0, "Binary File Viewer");
  }
};
BinaryFileEditor = BinaryFileEditor_1 = __decorate([__param(1, ITelemetryService), __param(2, IThemeService), __param(3, IEditorResolverService), __param(4, IStorageService)], BinaryFileEditor);
exports.BinaryFileEditor = BinaryFileEditor;