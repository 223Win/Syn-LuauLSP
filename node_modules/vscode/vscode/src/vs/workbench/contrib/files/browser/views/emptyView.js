const {
  __decorate,
  __param
} = require('../../../../../../../../external/tslib/tslib.es6.js');
const {
  localize2WithPath
} = require('../../../../../nls.js');
const {
  IInstantiationService
} = require('../../../../../platform/instantiation/common/instantiation.js');
const {
  IThemeService
} = require('../../../../../platform/theme/common/themeService.service.js');
const {
  IKeybindingService
} = require('../../../../../platform/keybinding/common/keybinding.service.js');
const {
  IContextMenuService
} = require('../../../../../platform/contextview/browser/contextView.service.js');
const {
  isTemporaryWorkspace
} = require('../../../../../platform/workspace/common/workspace.js');
const {
  IWorkspaceContextService
} = require('../../../../../platform/workspace/common/workspace.service.js');
const {
  IConfigurationService
} = require('../../../../../platform/configuration/common/configuration.service.js');
const {
  ViewPane
} = require('../../../../browser/parts/views/viewPane.js');
const {
  ResourcesDropHandler
} = require('../../../../browser/dnd.js');
const {} = require('../../../../../platform/theme/common/colorUtils.js');
const {} = require('../../../../../platform/theme/common/colors/baseColors.js');
const {} = require('../../../../../platform/theme/common/colors/chartsColors.js');
const {} = require('../../../../../platform/theme/common/colors/editorColors.js');
const {} = require('../../../../../platform/theme/common/colors/inputColors.js');
const {
  listDropOverBackground
} = require('../../../../../platform/theme/common/colors/listColors.js');
const {} = require('../../../../../platform/theme/common/colors/menuColors.js');
const {} = require('../../../../../platform/theme/common/colors/minimapColors.js');
const {} = require('../../../../../platform/theme/common/colors/miscColors.js');
const {} = require('../../../../../platform/theme/common/colors/quickpickColors.js');
const {} = require('../../../../../platform/theme/common/colors/searchColors.js');
const {
  ILabelService
} = require('../../../../../platform/label/common/label.service.js');
const {
  IContextKeyService
} = require('../../../../../platform/contextkey/common/contextkey.service.js');
const {
  IViewDescriptorService
} = require('../../../../common/views.service.js');
const {
  IOpenerService
} = require('../../../../../platform/opener/common/opener.service.js');
const {
  ITelemetryService
} = require('../../../../../platform/telemetry/common/telemetry.service.js');
const {
  isWeb
} = require('../../../../../base/common/platform.js');
const {
  DragAndDropObserver,
  getWindow
} = require('../../../../../base/browser/dom.js');
const {
  IHoverService
} = require('../../../../../platform/hover/browser/hover.service.js');
var EmptyView_1;
const _moduleId = "vs/workbench/contrib/files/browser/views/emptyView";
let EmptyView = class EmptyView extends ViewPane {
  static {
    EmptyView_1 = this;
  }
  static {
    this.ID = 'workbench.explorer.emptyView';
  }
  static {
    this.NAME = localize2WithPath(_moduleId, 0, "No Folder Opened");
  }
  constructor(options, themeService, viewDescriptorService, instantiationService, keybindingService, contextMenuService, contextService, configurationService, labelService, contextKeyService, openerService, telemetryService, hoverService) {
    super(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService, hoverService);
    this.contextService = contextService;
    this.labelService = labelService;
    this._disposed = false;
    this._register(this.contextService.onDidChangeWorkbenchState(() => this.refreshTitle()));
    this._register(this.labelService.onDidChangeFormatters(() => this.refreshTitle()));
  }
  shouldShowWelcome() {
    return true;
  }
  renderBody(container) {
    super.renderBody(container);
    this._register(new DragAndDropObserver(container, {
      onDrop: e => {
        container.style.backgroundColor = '';
        const dropHandler = this.instantiationService.createInstance(ResourcesDropHandler, {
          allowWorkspaceOpen: !isWeb || isTemporaryWorkspace(this.contextService.getWorkspace())
        });
        dropHandler.handleDrop(e, getWindow(container));
      },
      onDragEnter: () => {
        const color = this.themeService.getColorTheme().getColor(listDropOverBackground);
        container.style.backgroundColor = color ? color.toString() : '';
      },
      onDragEnd: () => {
        container.style.backgroundColor = '';
      },
      onDragLeave: () => {
        container.style.backgroundColor = '';
      },
      onDragOver: e => {
        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = 'copy';
        }
      }
    }));
    this.refreshTitle();
  }
  refreshTitle() {
    if (this._disposed) {
      return;
    }
    if (this.contextService.getWorkbenchState() === 3) {
      this.updateTitle(EmptyView_1.NAME.value);
    } else {
      this.updateTitle(this.title);
    }
  }
  dispose() {
    this._disposed = true;
    super.dispose();
  }
};
EmptyView = EmptyView_1 = __decorate([__param(1, IThemeService), __param(2, IViewDescriptorService), __param(3, IInstantiationService), __param(4, IKeybindingService), __param(5, IContextMenuService), __param(6, IWorkspaceContextService), __param(7, IConfigurationService), __param(8, ILabelService), __param(9, IContextKeyService), __param(10, IOpenerService), __param(11, ITelemetryService), __param(12, IHoverService)], EmptyView);
exports.EmptyView = EmptyView;