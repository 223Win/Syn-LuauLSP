const {
  getActiveElement
} = require('../../../../base/browser/dom.js');
const {
  UndoCommand,
  RedoCommand,
  SelectAllCommand
} = require('../../../../editor/browser/editorExtensions.js');
const {
  CutAction,
  CopyAction,
  PasteAction
} = require('../../../../editor/contrib/clipboard/browser/clipboard.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  MenuRegistry,
  MenuId
} = require('../../../../platform/actions/common/actions.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  IWebviewService
} = require('./webview.service.js');
const {
  WebviewInput
} = require('../../webviewPanel/browser/webviewEditorInput.js');
const {
  IEditorService
} = require('../../../services/editor/common/editorService.service.js');
const _moduleId = "vs/workbench/contrib/webview/browser/webview.contribution";
const PRIORITY = 100;
function overrideCommandForWebview(command, f) {
  command?.addImplementation(PRIORITY, 'webview', accessor => {
    const webviewService = accessor.get(IWebviewService);
    const webview = webviewService.activeWebview;
    if (webview?.isFocused) {
      f(webview);
      return true;
    }
    if (getActiveElement()?.classList.contains('action-menu-item')) {
      const editorService = accessor.get(IEditorService);
      if (editorService.activeEditor instanceof WebviewInput) {
        f(editorService.activeEditor.webview);
        return true;
      }
    }
    return false;
  });
}
overrideCommandForWebview(UndoCommand, webview => webview.undo());
overrideCommandForWebview(RedoCommand, webview => webview.redo());
overrideCommandForWebview(SelectAllCommand, webview => webview.selectAll());
overrideCommandForWebview(CopyAction, webview => webview.copy());
overrideCommandForWebview(PasteAction, webview => webview.paste());
overrideCommandForWebview(CutAction, webview => webview.cut());
const PreventDefaultContextMenuItemsContextKeyName = 'preventDefaultContextMenuItems';
if (CutAction) {
  MenuRegistry.appendMenuItem(MenuId.WebviewContext, {
    command: {
      id: CutAction.id,
      title: localizeWithPath(_moduleId, 0, "Cut")
    },
    group: '5_cutcopypaste',
    order: 1,
    when: ContextKeyExpr.not(PreventDefaultContextMenuItemsContextKeyName)
  });
}
if (CopyAction) {
  MenuRegistry.appendMenuItem(MenuId.WebviewContext, {
    command: {
      id: CopyAction.id,
      title: localizeWithPath(_moduleId, 1, "Copy")
    },
    group: '5_cutcopypaste',
    order: 2,
    when: ContextKeyExpr.not(PreventDefaultContextMenuItemsContextKeyName)
  });
}
if (PasteAction) {
  MenuRegistry.appendMenuItem(MenuId.WebviewContext, {
    command: {
      id: PasteAction.id,
      title: localizeWithPath(_moduleId, 2, "Paste")
    },
    group: '5_cutcopypaste',
    order: 3,
    when: ContextKeyExpr.not(PreventDefaultContextMenuItemsContextKeyName)
  });
}
exports.PreventDefaultContextMenuItemsContextKeyName = PreventDefaultContextMenuItemsContextKeyName;