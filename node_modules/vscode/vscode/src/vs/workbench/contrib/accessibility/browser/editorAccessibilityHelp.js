const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  ICodeEditorService
} = require('../../../../editor/browser/services/codeEditorService.js');
const {
  EditorContextKeys
} = require('../../../../editor/common/editorContextKeys.js');
const {
  AccessibilityHelpNLS
} = require('../../../../editor/common/standaloneStrings.js');
const {
  ToggleTabFocusModeAction
} = require('../../../../editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  IKeybindingService
} = require('../../../../platform/keybinding/common/keybinding.service.js');
const {
  descriptionForCommand
} = require('./accessibleViewContributions.js');
const {
  IAccessibleViewService
} = require('./accessibleView.service.js');
const {
  AccessibilityHelpAction
} = require('./accessibleViewActions.js');
const {
  CONTEXT_CHAT_ENABLED
} = require('../../chat/common/chatContextKeys.js');
const {
  CommentAccessibilityHelpNLS
} = require('../../comments/browser/commentsAccessibility.js');
const {
  CommentContextKeys
} = require('../../comments/common/commentContextKeys.js');
const {
  NEW_UNTITLED_FILE_COMMAND_ID
} = require('../../files/browser/fileConstants.js');
class EditorAccessibilityHelpContribution extends Disposable {
  constructor() {
    super();
    this._register(AccessibilityHelpAction.addImplementation(95, 'editor', async accessor => {
      const codeEditorService = accessor.get(ICodeEditorService);
      const accessibleViewService = accessor.get(IAccessibleViewService);
      const instantiationService = accessor.get(IInstantiationService);
      const commandService = accessor.get(ICommandService);
      let codeEditor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();
      if (!codeEditor) {
        await commandService.executeCommand(NEW_UNTITLED_FILE_COMMAND_ID);
        codeEditor = codeEditorService.getActiveCodeEditor();
      }
      accessibleViewService.show(instantiationService.createInstance(EditorAccessibilityHelpProvider, codeEditor));
    }, EditorContextKeys.focus));
  }
}
let EditorAccessibilityHelpProvider = class EditorAccessibilityHelpProvider {
  onClose() {
    this._editor.focus();
  }
  constructor(_editor, _keybindingService, _contextKeyService) {
    this._editor = _editor;
    this._keybindingService = _keybindingService;
    this._contextKeyService = _contextKeyService;
    this.id = "editor";
    this.options = {
      type: "help",
      readMoreUrl: 'https://go.microsoft.com/fwlink/?linkid=851010'
    };
    this.verbositySettingKey = "accessibility.verbosity.editor";
  }
  provideContent() {
    const options = this._editor.getOptions();
    const content = [];
    if (options.get(61)) {
      if (options.get(91)) {
        content.push(AccessibilityHelpNLS.readonlyDiffEditor);
      } else {
        content.push(AccessibilityHelpNLS.editableDiffEditor);
      }
    } else {
      if (options.get(91)) {
        content.push(AccessibilityHelpNLS.readonlyEditor);
      } else {
        content.push(AccessibilityHelpNLS.editableEditor);
      }
    }
    content.push(AccessibilityHelpNLS.listSignalSounds);
    content.push(AccessibilityHelpNLS.listAlerts);
    const chatCommandInfo = getChatCommandInfo(this._keybindingService, this._contextKeyService);
    if (chatCommandInfo) {
      content.push(chatCommandInfo);
    }
    const commentCommandInfo = getCommentCommandInfo(this._keybindingService, this._contextKeyService, this._editor);
    if (commentCommandInfo) {
      content.push(commentCommandInfo);
    }
    if (options.get(115).enabled) {
      content.push(descriptionForCommand('editor.action.focusStickyScroll', AccessibilityHelpNLS.stickScrollKb, AccessibilityHelpNLS.stickScrollNoKb, this._keybindingService));
    }
    if (options.get(144)) {
      content.push(descriptionForCommand(ToggleTabFocusModeAction.ID, AccessibilityHelpNLS.tabFocusModeOnMsg, AccessibilityHelpNLS.tabFocusModeOnMsgNoKb, this._keybindingService));
    } else {
      content.push(descriptionForCommand(ToggleTabFocusModeAction.ID, AccessibilityHelpNLS.tabFocusModeOffMsg, AccessibilityHelpNLS.tabFocusModeOffMsgNoKb, this._keybindingService));
    }
    return content.join('\n\n');
  }
};
EditorAccessibilityHelpProvider = __decorate([__param(1, IKeybindingService), __param(2, IContextKeyService)], EditorAccessibilityHelpProvider);
function getCommentCommandInfo(keybindingService, contextKeyService, editor) {
  const editorContext = contextKeyService.getContext(editor.getDomNode());
  if (editorContext.getValue(CommentContextKeys.activeEditorHasCommentingRange.key)) {
    const commentCommandInfo = [];
    commentCommandInfo.push(CommentAccessibilityHelpNLS.intro);
    commentCommandInfo.push(descriptionForCommand("workbench.action.addComment", CommentAccessibilityHelpNLS.addComment, CommentAccessibilityHelpNLS.addCommentNoKb, keybindingService));
    commentCommandInfo.push(descriptionForCommand("editor.action.nextCommentThreadAction", CommentAccessibilityHelpNLS.nextCommentThreadKb, CommentAccessibilityHelpNLS.nextCommentThreadNoKb, keybindingService));
    commentCommandInfo.push(descriptionForCommand("editor.action.previousCommentThreadAction", CommentAccessibilityHelpNLS.previousCommentThreadKb, CommentAccessibilityHelpNLS.previousCommentThreadNoKb, keybindingService));
    commentCommandInfo.push(descriptionForCommand("editor.action.nextCommentingRange", CommentAccessibilityHelpNLS.nextRange, CommentAccessibilityHelpNLS.nextRangeNoKb, keybindingService));
    commentCommandInfo.push(descriptionForCommand("editor.action.previousCommentingRange", CommentAccessibilityHelpNLS.previousRange, CommentAccessibilityHelpNLS.previousRangeNoKb, keybindingService));
    return commentCommandInfo.join('\n');
  }
  return;
}
function getChatCommandInfo(keybindingService, contextKeyService) {
  if (CONTEXT_CHAT_ENABLED.getValue(contextKeyService)) {
    const commentCommandInfo = [];
    commentCommandInfo.push(descriptionForCommand('workbench.action.quickchat.toggle', AccessibilityHelpNLS.quickChat, AccessibilityHelpNLS.quickChatNoKb, keybindingService));
    commentCommandInfo.push(descriptionForCommand('inlineChat.start', AccessibilityHelpNLS.startInlineChat, AccessibilityHelpNLS.startInlineChatNoKb, keybindingService));
    return commentCommandInfo.join('\n');
  }
  return;
}
exports.EditorAccessibilityHelpContribution = EditorAccessibilityHelpContribution;
exports.getChatCommandInfo = getChatCommandInfo;
exports.getCommentCommandInfo = getCommentCommandInfo;