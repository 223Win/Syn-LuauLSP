const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  FoldingController
} = require('../../../../editor/contrib/folding/browser/folding.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const {
  Extensions$1
} = require('../../../common/contributions.js');
const {
  Extensions
} = require('../../../../platform/configuration/common/configurationRegistry.js');
const {
  editorConfigurationBaseNode
} = require('../../../../editor/common/config/editorConfigurationSchema.js');
const {
  IExtensionService
} = require('../../../services/extensions/common/extensions.service.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
var DefaultFoldingRangeProvider_1;
const _moduleId = "vs/workbench/contrib/folding/browser/folding.contribution";
let DefaultFoldingRangeProvider = class DefaultFoldingRangeProvider extends Disposable {
  static {
    DefaultFoldingRangeProvider_1 = this;
  }
  static {
    this.configName = 'editor.defaultFoldingRangeProvider';
  }
  static {
    this.extensionIds = [];
  }
  static {
    this.extensionItemLabels = [];
  }
  static {
    this.extensionDescriptions = [];
  }
  constructor(_extensionService, _configurationService) {
    super();
    this._extensionService = _extensionService;
    this._configurationService = _configurationService;
    this._store.add(this._extensionService.onDidChangeExtensions(this._updateConfigValues, this));
    this._store.add(FoldingController.setFoldingRangeProviderSelector(this._selectFoldingRangeProvider.bind(this)));
    this._updateConfigValues();
  }
  async _updateConfigValues() {
    await this._extensionService.whenInstalledExtensionsRegistered();
    DefaultFoldingRangeProvider_1.extensionIds.length = 0;
    DefaultFoldingRangeProvider_1.extensionItemLabels.length = 0;
    DefaultFoldingRangeProvider_1.extensionDescriptions.length = 0;
    DefaultFoldingRangeProvider_1.extensionIds.push(null);
    DefaultFoldingRangeProvider_1.extensionItemLabels.push(localizeWithPath(_moduleId, 0, 'All'));
    DefaultFoldingRangeProvider_1.extensionDescriptions.push(localizeWithPath(_moduleId, 1, "All active folding range providers"));
    const languageExtensions = [];
    const otherExtensions = [];
    for (const extension of this._extensionService.extensions) {
      if (extension.main || extension.browser) {
        if (extension.categories?.find(cat => cat === 'Programming Languages')) {
          languageExtensions.push(extension);
        } else {
          otherExtensions.push(extension);
        }
      }
    }
    const sorter = (a, b) => a.name.localeCompare(b.name);
    for (const extension of languageExtensions.sort(sorter)) {
      DefaultFoldingRangeProvider_1.extensionIds.push(extension.identifier.value);
      DefaultFoldingRangeProvider_1.extensionItemLabels.push(extension.displayName ?? '');
      DefaultFoldingRangeProvider_1.extensionDescriptions.push(extension.description ?? '');
    }
    for (const extension of otherExtensions.sort(sorter)) {
      DefaultFoldingRangeProvider_1.extensionIds.push(extension.identifier.value);
      DefaultFoldingRangeProvider_1.extensionItemLabels.push(extension.displayName ?? '');
      DefaultFoldingRangeProvider_1.extensionDescriptions.push(extension.description ?? '');
    }
  }
  _selectFoldingRangeProvider(providers, document) {
    const value = this._configurationService.getValue(DefaultFoldingRangeProvider_1.configName, {
      overrideIdentifier: document.getLanguageId()
    });
    if (value) {
      return providers.filter(p => p.id === value);
    }
    return undefined;
  }
};
DefaultFoldingRangeProvider = DefaultFoldingRangeProvider_1 = __decorate([__param(0, IExtensionService), __param(1, IConfigurationService)], DefaultFoldingRangeProvider);
Registry.as(Extensions.Configuration).registerConfiguration({
  ...editorConfigurationBaseNode,
  properties: {
    [DefaultFoldingRangeProvider.configName]: {
      description: localizeWithPath(_moduleId, 2, "Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider."),
      type: ['string', 'null'],
      default: null,
      enum: DefaultFoldingRangeProvider.extensionIds,
      enumItemLabels: DefaultFoldingRangeProvider.extensionItemLabels,
      markdownEnumDescriptions: DefaultFoldingRangeProvider.extensionDescriptions
    }
  }
});
Registry.as(Extensions$1.Workbench).registerWorkbenchContribution(DefaultFoldingRangeProvider, 3);