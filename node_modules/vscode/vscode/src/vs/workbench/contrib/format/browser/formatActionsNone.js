const {
  registerEditorAction,
  EditorAction
} = require('../../../../editor/browser/editorExtensions.js');
const {
  EditorContextKeys
} = require('../../../../editor/common/editorContextKeys.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  INotificationService
} = require('../../../../platform/notification/common/notification.service.js');
const {
  VIEWLET_ID
} = require('../../extensions/common/extensions.js');
const {
  IDialogService
} = require('../../../../platform/dialogs/common/dialogs.service.js');
const {
  IPaneCompositePartService
} = require('../../../services/panecomposite/browser/panecomposite.service.js');
const {
  ILanguageFeaturesService
} = require('../../../../editor/common/services/languageFeatures.js');
const _moduleId = "vs/workbench/contrib/format/browser/formatActionsNone";
async function showExtensionQuery(paneCompositeService, query) {
  const viewlet = await paneCompositeService.openPaneComposite(VIEWLET_ID, 0, true);
  if (viewlet) {
    (viewlet?.getViewPaneContainer()).search(query);
  }
}
registerEditorAction(class FormatDocumentMultipleAction extends EditorAction {
  constructor() {
    super({
      id: 'editor.action.formatDocument.none',
      label: localizeWithPath(_moduleId, 0, "Format Document"),
      alias: 'Format Document',
      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider.toNegated()),
      kbOpts: {
        kbExpr: EditorContextKeys.editorTextFocus,
        primary: 1024 | 512 | 36,
        linux: {
          primary: 2048 | 1024 | 39
        },
        weight: 100
      }
    });
  }
  async run(accessor, editor) {
    if (!editor.hasModel()) {
      return;
    }
    const commandService = accessor.get(ICommandService);
    const paneCompositeService = accessor.get(IPaneCompositePartService);
    const notificationService = accessor.get(INotificationService);
    const dialogService = accessor.get(IDialogService);
    const languageFeaturesService = accessor.get(ILanguageFeaturesService);
    const model = editor.getModel();
    const formatterCount = languageFeaturesService.documentFormattingEditProvider.all(model).length;
    if (formatterCount > 1) {
      return commandService.executeCommand('editor.action.formatDocument.multiple');
    } else if (formatterCount === 1) {
      return commandService.executeCommand('editor.action.formatDocument');
    } else if (model.isTooLargeForSyncing()) {
      notificationService.warn(localizeWithPath(_moduleId, 1, "This file cannot be formatted because it is too large"));
    } else {
      const langName = model.getLanguageId();
      const message = localizeWithPath(_moduleId, 2, "There is no formatter for '{0}' files installed.", langName);
      const {
        confirmed
      } = await dialogService.confirm({
        message,
        primaryButton: localizeWithPath(_moduleId, 3, "&&Install Formatter...")
      });
      if (confirmed) {
        showExtensionQuery(paneCompositeService, `category:formatters ${langName}`);
      }
    }
  }
});