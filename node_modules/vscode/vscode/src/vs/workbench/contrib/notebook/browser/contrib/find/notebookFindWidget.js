const {
  __decorate,
  __param
} = require('../../../../../../../../../external/tslib/tslib.es6.js');
const {
  append,
  addDisposableListener,
  getWindow,
  EventType
} = require('../../../../../../base/browser/dom.js');
const {
  alert
} = require('../../../../../../base/browser/ui/aria/aria.js');
const {
  Lazy
} = require('../../../../../../base/common/lazy.js');
const {
  Disposable
} = require('../../../../../../base/common/lifecycle.js');
const {
  format
} = require('../../../../../../base/common/strings.js');
const {
  MATCHES_LIMIT
} = require('../../../../../../editor/contrib/find/browser/findModel.js');
const {
  FindReplaceState
} = require('../../../../../../editor/contrib/find/browser/findState.js');
const {
  NLS_NO_RESULTS,
  NLS_MATCHES_LOCATION
} = require('../../../../../../editor/contrib/find/browser/findWidget.js');
const {
  localizeWithPath
} = require('../../../../../../nls.js');
const {
  IConfigurationService
} = require('../../../../../../platform/configuration/common/configuration.service.js');
const {
  IContextKeyService
} = require('../../../../../../platform/contextkey/common/contextkey.service.js');
const {
  IContextViewService,
  IContextMenuService
} = require('../../../../../../platform/contextview/browser/contextView.service.js');
const {
  IHoverService
} = require('../../../../../../platform/hover/browser/hover.service.js');
const {
  IInstantiationService
} = require('../../../../../../platform/instantiation/common/instantiation.js');
const {
  FindModel
} = require('./findModel.js');
const {
  SimpleFindReplaceWidget
} = require('./notebookFindReplaceWidget.js');
const {
  CellEditState
} = require('../../notebookBrowser.js');
const {
  KEYBINDING_CONTEXT_NOTEBOOK_FIND_WIDGET_FOCUSED
} = require('../../../common/notebookContextKeys.js');
const _moduleId = "vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget";
const FIND_HIDE_TRANSITION = 'find-hide-transition';
const FIND_SHOW_TRANSITION = 'find-show-transition';
let MAX_MATCHES_COUNT_WIDTH = 69;
const PROGRESS_BAR_DELAY = 200;
let NotebookFindContrib = class NotebookFindContrib extends Disposable {
  static {
    this.id = 'workbench.notebook.find';
  }
  constructor(notebookEditor, instantiationService) {
    super();
    this.notebookEditor = notebookEditor;
    this.instantiationService = instantiationService;
    this.widget = new Lazy(() => this._register(this.instantiationService.createInstance(NotebookFindWidget, this.notebookEditor)));
  }
  show(initialInput, options) {
    return this.widget.value.show(initialInput, options);
  }
  hide() {
    this.widget.rawValue?.hide();
  }
  replace(searchString) {
    return this.widget.value.replace(searchString);
  }
};
NotebookFindContrib = __decorate([__param(1, IInstantiationService)], NotebookFindContrib);
let NotebookFindWidget = class NotebookFindWidget extends SimpleFindReplaceWidget {
  constructor(_notebookEditor, contextViewService, contextKeyService, configurationService, contextMenuService, hoverService, instantiationService) {
    super(contextViewService, contextKeyService, configurationService, contextMenuService, instantiationService, hoverService, new FindReplaceState(), _notebookEditor);
    this._showTimeout = null;
    this._hideTimeout = null;
    this._findModel = new FindModel(this._notebookEditor, this._state, this._configurationService);
    append(this._notebookEditor.getDomNode(), this.getDomNode());
    this._findWidgetFocused = KEYBINDING_CONTEXT_NOTEBOOK_FIND_WIDGET_FOCUSED.bindTo(contextKeyService);
    this._register(this._findInput.onKeyDown(e => this._onFindInputKeyDown(e)));
    this._register(this._replaceInput.onKeyDown(e => this._onReplaceInputKeyDown(e)));
    this._register(this._state.onFindReplaceStateChange(e => {
      this.onInputChanged();
      if (e.isSearching) {
        if (this._state.isSearching) {
          this._progressBar.infinite().show(PROGRESS_BAR_DELAY);
        } else {
          this._progressBar.stop().hide();
        }
      }
      if (this._findModel.currentMatch >= 0) {
        const currentMatch = this._findModel.getCurrentMatch();
        this._replaceBtn.setEnabled(currentMatch.isModelMatch);
      }
      const matches = this._findModel.findMatches;
      this._replaceAllBtn.setEnabled(matches.length > 0 && matches.find(match => match.webviewMatches.length > 0) === undefined);
      if (e.filters) {
        this._findInput.updateFilterState(this._state.filters?.isModified() ?? false);
      }
    }));
    this._register(addDisposableListener(this.getDomNode(), EventType.FOCUS, e => {
      this._previousFocusElement = e.relatedTarget instanceof HTMLElement ? e.relatedTarget : undefined;
    }, true));
  }
  _onFindInputKeyDown(e) {
    if (e.equals(3)) {
      this.find(false);
      e.preventDefault();
      return;
    } else if (e.equals(1024 | 3)) {
      this.find(true);
      e.preventDefault();
      return;
    }
  }
  _onReplaceInputKeyDown(e) {
    if (e.equals(3)) {
      this.replaceOne();
      e.preventDefault();
      return;
    }
  }
  onInputChanged() {
    this._state.change({
      searchString: this.inputValue
    }, false);
    const findMatches = this._findModel.findMatches;
    if (findMatches && findMatches.length) {
      return true;
    }
    return false;
  }
  findIndex(index) {
    this._findModel.find({
      index
    });
  }
  find(previous) {
    this._findModel.find({
      previous
    });
  }
  replaceOne() {
    if (!this._notebookEditor.hasModel()) {
      return;
    }
    if (!this._findModel.findMatches.length) {
      return;
    }
    this._findModel.ensureFindMatches();
    if (this._findModel.currentMatch < 0) {
      this._findModel.find({
        previous: false
      });
    }
    const currentMatch = this._findModel.getCurrentMatch();
    const cell = currentMatch.cell;
    if (currentMatch.isModelMatch) {
      const match = currentMatch.match;
      this._progressBar.infinite().show(PROGRESS_BAR_DELAY);
      const replacePattern = this.replacePattern;
      const replaceString = replacePattern.buildReplaceString(match.matches, this._state.preserveCase);
      const viewModel = this._notebookEditor.getViewModel();
      viewModel.replaceOne(cell, match.range, replaceString).then(() => {
        this._progressBar.stop();
      });
    } else {
      console.error('Replace does not work for output match');
    }
  }
  replaceAll() {
    if (!this._notebookEditor.hasModel()) {
      return;
    }
    this._progressBar.infinite().show(PROGRESS_BAR_DELAY);
    const replacePattern = this.replacePattern;
    const cellFindMatches = this._findModel.findMatches;
    const replaceStrings = [];
    cellFindMatches.forEach(cellFindMatch => {
      cellFindMatch.contentMatches.forEach(match => {
        const matches = match.matches;
        replaceStrings.push(replacePattern.buildReplaceString(matches, this._state.preserveCase));
      });
    });
    const viewModel = this._notebookEditor.getViewModel();
    viewModel.replaceAll(this._findModel.findMatches, replaceStrings).then(() => {
      this._progressBar.stop();
    });
  }
  findFirst() {}
  onFocusTrackerFocus() {
    this._findWidgetFocused.set(true);
  }
  onFocusTrackerBlur() {
    this._previousFocusElement = undefined;
    this._findWidgetFocused.reset();
  }
  onReplaceInputFocusTrackerFocus() {}
  onReplaceInputFocusTrackerBlur() {}
  onFindInputFocusTrackerFocus() {}
  onFindInputFocusTrackerBlur() {}
  async show(initialInput, options) {
    const searchStringUpdate = this._state.searchString !== initialInput;
    super.show(initialInput, options);
    this._state.change({
      searchString: initialInput ?? this._state.searchString,
      isRevealed: true
    }, false);
    if (typeof options?.matchIndex === 'number') {
      if (!this._findModel.findMatches.length) {
        await this._findModel.research();
      }
      this.findIndex(options.matchIndex);
    } else {
      this._findInput.select();
    }
    if (!searchStringUpdate && options?.searchStringSeededFrom) {
      this._findModel.refreshCurrentMatch(options.searchStringSeededFrom);
    }
    if (this._showTimeout === null) {
      if (this._hideTimeout !== null) {
        getWindow(this.getDomNode()).clearTimeout(this._hideTimeout);
        this._hideTimeout = null;
        this._notebookEditor.removeClassName(FIND_HIDE_TRANSITION);
      }
      this._notebookEditor.addClassName(FIND_SHOW_TRANSITION);
      this._showTimeout = getWindow(this.getDomNode()).setTimeout(() => {
        this._notebookEditor.removeClassName(FIND_SHOW_TRANSITION);
        this._showTimeout = null;
      }, 200);
    }
  }
  replace(initialFindInput, initialReplaceInput) {
    super.showWithReplace(initialFindInput, initialReplaceInput);
    this._state.change({
      searchString: initialFindInput ?? '',
      replaceString: initialReplaceInput ?? '',
      isRevealed: true
    }, false);
    this._replaceInput.select();
    if (this._showTimeout === null) {
      if (this._hideTimeout !== null) {
        getWindow(this.getDomNode()).clearTimeout(this._hideTimeout);
        this._hideTimeout = null;
        this._notebookEditor.removeClassName(FIND_HIDE_TRANSITION);
      }
      this._notebookEditor.addClassName(FIND_SHOW_TRANSITION);
      this._showTimeout = getWindow(this.getDomNode()).setTimeout(() => {
        this._notebookEditor.removeClassName(FIND_SHOW_TRANSITION);
        this._showTimeout = null;
      }, 200);
    }
  }
  hide() {
    super.hide();
    this._state.change({
      isRevealed: false
    }, false);
    this._findModel.clear();
    this._notebookEditor.findStop();
    this._progressBar.stop();
    if (this._hideTimeout === null) {
      if (this._showTimeout !== null) {
        getWindow(this.getDomNode()).clearTimeout(this._showTimeout);
        this._showTimeout = null;
        this._notebookEditor.removeClassName(FIND_SHOW_TRANSITION);
      }
      this._notebookEditor.addClassName(FIND_HIDE_TRANSITION);
      this._hideTimeout = getWindow(this.getDomNode()).setTimeout(() => {
        this._notebookEditor.removeClassName(FIND_HIDE_TRANSITION);
      }, 200);
    }
    if (this._previousFocusElement && this._previousFocusElement.offsetParent) {
      this._previousFocusElement.focus();
      this._previousFocusElement = undefined;
    }
    if (this._notebookEditor.hasModel()) {
      for (let i = 0; i < this._notebookEditor.getLength(); i++) {
        const cell = this._notebookEditor.cellAt(i);
        if (cell.getEditState() === CellEditState.Editing && cell.editStateSource === 'find') {
          cell.updateEditState(CellEditState.Preview, 'closeFind');
        }
      }
    }
  }
  _updateMatchesCount() {
    if (!this._findModel || !this._findModel.findMatches) {
      return;
    }
    this._matchesCount.style.width = MAX_MATCHES_COUNT_WIDTH + 'px';
    this._matchesCount.title = '';
    if (this._matchesCount.firstChild) {
      this._matchesCount.removeChild(this._matchesCount.firstChild);
    }
    let label;
    if (this._state.matchesCount > 0) {
      let matchesCount = String(this._state.matchesCount);
      if (this._state.matchesCount >= MATCHES_LIMIT) {
        matchesCount += '+';
      }
      const matchesPosition = this._findModel.currentMatch < 0 ? '?' : String(this._findModel.currentMatch + 1);
      label = format(NLS_MATCHES_LOCATION, matchesPosition, matchesCount);
    } else {
      label = NLS_NO_RESULTS;
    }
    this._matchesCount.appendChild(document.createTextNode(label));
    alert(this._getAriaLabel(label, this._state.currentMatch, this._state.searchString));
    MAX_MATCHES_COUNT_WIDTH = Math.max(MAX_MATCHES_COUNT_WIDTH, this._matchesCount.clientWidth);
  }
  _getAriaLabel(label, currentMatch, searchString) {
    if (label === NLS_NO_RESULTS) {
      return searchString === '' ? localizeWithPath(_moduleId, 0, "{0} found", label) : localizeWithPath(_moduleId, 1, "{0} found for '{1}'", label, searchString);
    }
    return localizeWithPath(_moduleId, 2, "{0} found for '{1}'", label, searchString);
  }
  dispose() {
    this._notebookEditor?.removeClassName(FIND_SHOW_TRANSITION);
    this._notebookEditor?.removeClassName(FIND_HIDE_TRANSITION);
    this._findModel.dispose();
    super.dispose();
  }
};
NotebookFindWidget = __decorate([__param(1, IContextViewService), __param(2, IContextKeyService), __param(3, IConfigurationService), __param(4, IContextMenuService), __param(5, IHoverService), __param(6, IInstantiationService)], NotebookFindWidget);
exports.NotebookFindContrib = NotebookFindContrib;