const {
  localizeWithPath
} = require('../../../../../nls.js');
const {
  registerAction2,
  Action2,
  MenuId
} = require('../../../../../platform/actions/common/actions.js');
const {
  IClipboardService
} = require('../../../../../platform/clipboard/common/clipboardService.service.js');
const {
  NOTEBOOK_ACTIONS_CATEGORY
} = require('./coreActions.js');
const {
  NOTEBOOK_CELL_HAS_OUTPUTS
} = require('../../common/notebookContextKeys.js');
const {
  copyIcon
} = require('../notebookIcons.js');
const {
  ILogService
} = require('../../../../../platform/log/common/log.service.js');
const {
  copyCellOutput
} = require('../contrib/clipboard/cellOutputClipboard.js');
const {
  IEditorService
} = require('../../../../services/editor/common/editorService.service.js');
const {
  getNotebookEditorFromEditorPane
} = require('../notebookBrowser.js');
const {
  CellKind
} = require('../../common/notebookCommon.js');
const _moduleId = "vs/workbench/contrib/notebook/browser/controller/cellOutputActions";
const COPY_OUTPUT_COMMAND_ID = 'notebook.cellOutput.copy';
registerAction2(class CopyCellOutputAction extends Action2 {
  constructor() {
    super({
      id: COPY_OUTPUT_COMMAND_ID,
      title: localizeWithPath(_moduleId, 0, "Copy Cell Output"),
      menu: {
        id: MenuId.NotebookOutputToolbar,
        when: NOTEBOOK_CELL_HAS_OUTPUTS
      },
      category: NOTEBOOK_ACTIONS_CATEGORY,
      icon: copyIcon
    });
  }
  getNoteboookEditor(editorService, outputContext) {
    if (outputContext && 'notebookEditor' in outputContext) {
      return outputContext.notebookEditor;
    }
    return getNotebookEditorFromEditorPane(editorService.activeEditorPane);
  }
  async run(accessor, outputContext) {
    const notebookEditor = this.getNoteboookEditor(accessor.get(IEditorService), outputContext);
    if (!notebookEditor) {
      return;
    }
    let outputViewModel;
    if (outputContext && 'outputId' in outputContext && typeof outputContext.outputId === 'string') {
      outputViewModel = getOutputViewModelFromId(outputContext.outputId, notebookEditor);
    } else if (outputContext && 'outputViewModel' in outputContext) {
      outputViewModel = outputContext.outputViewModel;
    }
    if (!outputViewModel) {
      const activeCell = notebookEditor.getActiveCell();
      if (!activeCell) {
        return;
      }
      if (activeCell.focusedOutputId !== undefined) {
        outputViewModel = activeCell.outputsViewModels.find(output => {
          return output.model.outputId === activeCell.focusedOutputId;
        });
      } else {
        outputViewModel = activeCell.outputsViewModels.find(output => output.pickedMimeType?.isTrusted);
      }
    }
    if (!outputViewModel) {
      return;
    }
    const mimeType = outputViewModel.pickedMimeType?.mimeType;
    if (mimeType?.startsWith('image/')) {
      const focusOptions = {
        skipReveal: true,
        outputId: outputViewModel.model.outputId,
        altOutputId: outputViewModel.model.alternativeOutputId
      };
      await notebookEditor.focusNotebookCell(outputViewModel.cellViewModel, 'output', focusOptions);
      notebookEditor.copyOutputImage(outputViewModel);
    } else {
      const clipboardService = accessor.get(IClipboardService);
      const logService = accessor.get(ILogService);
      copyCellOutput(mimeType, outputViewModel, clipboardService, logService);
    }
  }
});
function getOutputViewModelFromId(outputId, notebookEditor) {
  const notebookViewModel = notebookEditor.getViewModel();
  if (notebookViewModel) {
    const codeCells = notebookViewModel.viewCells.filter(cell => cell.cellKind === CellKind.Code);
    for (const cell of codeCells) {
      const output = cell.outputsViewModels.find(output => output.model.outputId === outputId);
      if (output) {
        return output;
      }
    }
  }
  return undefined;
}
exports.COPY_OUTPUT_COMMAND_ID = COPY_OUTPUT_COMMAND_ID;