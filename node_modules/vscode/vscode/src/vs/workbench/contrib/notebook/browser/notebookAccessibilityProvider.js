const {
  Emitter,
  Event
} = require('../../../../base/common/event.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {} = require('../../../../base/common/arrays.js');
const {} = require('../../../../base/common/observableInternal/derived.js');
const {} = require('../../../../base/common/observableInternal/autorun.js');
const {
  observableFromEvent
} = require('../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../base/common/cancellation.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  CellKind,
  NotebookCellExecutionState
} = require('../common/notebookCommon.js');
const {
  NotebookExecutionType
} = require('../common/notebookExecutionStateService.js');
const _moduleId = "vs/workbench/contrib/notebook/browser/notebookAccessibilityProvider";
class NotebookAccessibilityProvider extends Disposable {
  constructor(notebookExecutionStateService, viewModel, keybindingService, configurationService) {
    super();
    this.notebookExecutionStateService = notebookExecutionStateService;
    this.viewModel = viewModel;
    this.keybindingService = keybindingService;
    this.configurationService = configurationService;
    this._onDidAriaLabelChange = new Emitter();
    this.onDidAriaLabelChange = this._onDidAriaLabelChange.event;
    this._register(Event.debounce(this.notebookExecutionStateService.onDidChangeExecution, (last, e) => this.mergeEvents(last, e), 100)(cellHandles => {
      const viewModel = this.viewModel();
      if (viewModel) {
        for (const handle of cellHandles) {
          const cellModel = viewModel.getCellByHandle(handle);
          if (cellModel) {
            this._onDidAriaLabelChange.fire(cellModel);
          }
        }
      }
    }, this));
  }
  getAriaLabel(element) {
    const event = Event.filter(this.onDidAriaLabelChange, e => e === element);
    return observableFromEvent(event, () => {
      const viewModel = this.viewModel();
      if (!viewModel) {
        return '';
      }
      const index = viewModel.getCellIndex(element);
      if (index >= 0) {
        return this.getLabel(index, element);
      }
      return '';
    });
  }
  getLabel(index, element) {
    const executionState = this.notebookExecutionStateService.getCellExecution(element.uri)?.state;
    const executionLabel = executionState === NotebookCellExecutionState.Executing ? ', executing' : executionState === NotebookCellExecutionState.Pending ? ', pending' : '';
    return `Cell ${index}, ${element.cellKind === CellKind.Markup ? 'markdown' : 'code'} cell${executionLabel}`;
  }
  getWidgetAriaLabel() {
    const keybinding = this.keybindingService.lookupKeybinding("editor.action.accessibilityHelp")?.getLabel();
    if (this.configurationService.getValue("accessibility.verbosity.notebook")) {
      return keybinding ? localizeWithPath(_moduleId, 0, "Notebook\nUse {0} for accessibility help", keybinding) : localizeWithPath(_moduleId, 1, "Notebook\nRun the Open Accessibility Help command for more information", keybinding);
    }
    return localizeWithPath(_moduleId, 2, "Notebook");
  }
  mergeEvents(last, e) {
    const viewModel = this.viewModel();
    const result = last || [];
    if (viewModel && e.type === NotebookExecutionType.cell && e.affectsNotebook(viewModel.uri)) {
      if (result.indexOf(e.cellHandle) < 0) {
        result.push(e.cellHandle);
      }
    }
    return result;
  }
}
exports.NotebookAccessibilityProvider = NotebookAccessibilityProvider;