const {
  __decorate,
  __param
} = require('../../../../../../../../external/tslib/tslib.es6.js');
const {
  $,
  clearNode
} = require('../../../../../base/browser/dom.js');
const {
  Disposable,
  MutableDisposable,
  DisposableStore
} = require('../../../../../base/common/lifecycle.js');
const {
  MenuWorkbenchToolBar
} = require('../../../../../platform/actions/browser/toolbar.js');
const {
  MenuItemAction
} = require('../../../../../platform/actions/common/actions.js');
const {
  IMenuService
} = require('../../../../../platform/actions/common/actions.service.js');
const {
  IContextMenuService
} = require('../../../../../platform/contextview/browser/contextView.service.js');
const {
  IInstantiationService
} = require('../../../../../platform/instantiation/common/instantiation.js');
const {
  CodiconActionViewItem
} = require('../view/cellParts/cellActionView.js');
let ListTopCellToolbar = class ListTopCellToolbar extends Disposable {
  constructor(notebookEditor, notebookOptions, instantiationService, contextMenuService, menuService) {
    super();
    this.notebookEditor = notebookEditor;
    this.notebookOptions = notebookOptions;
    this.instantiationService = instantiationService;
    this.contextMenuService = contextMenuService;
    this.menuService = menuService;
    this.viewZone = this._register(new MutableDisposable());
    this._modelDisposables = this._register(new DisposableStore());
    this.topCellToolbarContainer = $('div');
    this.topCellToolbar = $('.cell-list-top-cell-toolbar-container');
    this.topCellToolbarContainer.appendChild(this.topCellToolbar);
    this._register(this.notebookEditor.onDidAttachViewModel(() => {
      this.updateTopToolbar();
    }));
    this._register(this.notebookOptions.onDidChangeOptions(e => {
      if (e.insertToolbarAlignment || e.insertToolbarPosition || e.cellToolbarLocation) {
        this.updateTopToolbar();
      }
    }));
  }
  updateTopToolbar() {
    const layoutInfo = this.notebookOptions.getLayoutConfiguration();
    this.viewZone.value = new DisposableStore();
    if (layoutInfo.insertToolbarPosition === 'hidden' || layoutInfo.insertToolbarPosition === 'notebookToolbar') {
      const height = this.notebookOptions.computeTopInsertToolbarHeight(this.notebookEditor.textModel?.viewType);
      if (height !== 0) {
        this.notebookEditor.changeViewZones(accessor => {
          const id = accessor.addZone({
            afterModelPosition: 0,
            heightInPx: height,
            domNode: $('div')
          });
          accessor.layoutZone(id);
          this.viewZone.value?.add({
            dispose: () => {
              if (!this.notebookEditor.isDisposed) {
                this.notebookEditor.changeViewZones(accessor => {
                  accessor.removeZone(id);
                });
              }
            }
          });
        });
      }
      return;
    }
    this.notebookEditor.changeViewZones(accessor => {
      const height = this.notebookOptions.computeTopInsertToolbarHeight(this.notebookEditor.textModel?.viewType);
      const id = accessor.addZone({
        afterModelPosition: 0,
        heightInPx: height,
        domNode: this.topCellToolbarContainer
      });
      accessor.layoutZone(id);
      this.viewZone.value?.add({
        dispose: () => {
          if (!this.notebookEditor.isDisposed) {
            this.notebookEditor.changeViewZones(accessor => {
              accessor.removeZone(id);
            });
          }
        }
      });
      clearNode(this.topCellToolbar);
      const toolbar = this.instantiationService.createInstance(MenuWorkbenchToolBar, this.topCellToolbar, this.notebookEditor.creationOptions.menuIds.cellTopInsertToolbar, {
        actionViewItemProvider: (action, options) => {
          if (action instanceof MenuItemAction) {
            const item = this.instantiationService.createInstance(CodiconActionViewItem, action, {
              hoverDelegate: options.hoverDelegate
            });
            return item;
          }
          return undefined;
        },
        menuOptions: {
          shouldForwardArgs: true
        },
        toolbarOptions: {
          primaryGroup: g => /^inline/.test(g)
        },
        hiddenItemStrategy: 0
      });
      toolbar.context = {
        notebookEditor: this.notebookEditor
      };
      this.viewZone.value?.add(toolbar);
      this.viewZone.value?.add(this.notebookEditor.onDidChangeModel(() => {
        this._modelDisposables.clear();
        if (this.notebookEditor.hasModel()) {
          this._modelDisposables.add(this.notebookEditor.onDidChangeViewCells(() => {
            this.updateClass();
          }));
          this.updateClass();
        }
      }));
      this.updateClass();
    });
  }
  updateClass() {
    if (this.notebookEditor.hasModel() && this.notebookEditor.getLength() === 0) {
      this.topCellToolbar.classList.add('emptyNotebook');
    } else {
      this.topCellToolbar.classList.remove('emptyNotebook');
    }
  }
};
ListTopCellToolbar = __decorate([__param(2, IInstantiationService), __param(3, IContextMenuService), __param(4, IMenuService)], ListTopCellToolbar);
exports.ListTopCellToolbar = ListTopCellToolbar;