const {
  __decorate,
  __param
} = require('../../../../../../../../../external/tslib/tslib.es6.js');
const {
  append,
  hide,
  addDisposableListener,
  EventType,
  $$1
} = require('../../../../../../base/browser/dom.js');
const {
  Codicon
} = require('../../../../../../base/common/codicons.js');
const {
  ThemeIcon
} = require('../../../../../../base/common/themables.js');
const {
  localizeWithPath
} = require('../../../../../../nls.js');
const {
  IKeybindingService
} = require('../../../../../../platform/keybinding/common/keybinding.service.js');
const {
  EXPAND_CELL_OUTPUT_COMMAND_ID
} = require('../../notebookBrowser.js');
const {
  CellContentPart
} = require('../cellPart.js');
const _moduleId = "vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput";
const $ = $$1;
let CollapsedCellOutput = class CollapsedCellOutput extends CellContentPart {
  constructor(notebookEditor, cellOutputCollapseContainer, keybindingService) {
    super();
    this.notebookEditor = notebookEditor;
    const placeholder = append(cellOutputCollapseContainer, $('span.expandOutputPlaceholder'));
    placeholder.textContent = localizeWithPath(_moduleId, 0, "Outputs are collapsed");
    const expandIcon = append(cellOutputCollapseContainer, $('span.expandOutputIcon'));
    expandIcon.classList.add(...ThemeIcon.asClassNameArray(Codicon.more));
    const keybinding = keybindingService.lookupKeybinding(EXPAND_CELL_OUTPUT_COMMAND_ID);
    if (keybinding) {
      placeholder.title = localizeWithPath(_moduleId, 1, "Double-click to expand cell output ({0})", keybinding.getLabel());
      cellOutputCollapseContainer.title = localizeWithPath(_moduleId, 2, "Expand Cell Output (${0})", keybinding.getLabel());
    }
    hide(cellOutputCollapseContainer);
    this._register(addDisposableListener(expandIcon, EventType.CLICK, () => this.expand()));
    this._register(addDisposableListener(cellOutputCollapseContainer, EventType.DBLCLICK, () => this.expand()));
  }
  expand() {
    if (!this.currentCell) {
      return;
    }
    if (!this.currentCell) {
      return;
    }
    const textModel = this.notebookEditor.textModel;
    const index = textModel.cells.indexOf(this.currentCell.model);
    if (index < 0) {
      return;
    }
    this.currentCell.isOutputCollapsed = !this.currentCell.isOutputCollapsed;
  }
};
CollapsedCellOutput = __decorate([__param(2, IKeybindingService)], CollapsedCellOutput);
exports.CollapsedCellOutput = CollapsedCellOutput;