const {
  __decorate,
  __param
} = require('../../../../../../../../../external/tslib/tslib.es6.js');
const {
  hide,
  show
} = require('../../../../../../base/browser/dom.js');
const {
  disposableTimeout
} = require('../../../../../../base/common/async.js');
const {
  DisposableStore
} = require('../../../../../../base/common/lifecycle.js');
const {
  CellContentPart
} = require('../cellPart.js');
const {
  INotebookExecutionStateService
} = require('../../../common/notebookExecutionStateService.service.js');
const UPDATE_EXECUTION_ORDER_GRACE_PERIOD = 200;
let CellExecutionPart = class CellExecutionPart extends CellContentPart {
  constructor(_notebookEditor, _executionOrderLabel, _notebookExecutionStateService) {
    super();
    this._notebookEditor = _notebookEditor;
    this._executionOrderLabel = _executionOrderLabel;
    this._notebookExecutionStateService = _notebookExecutionStateService;
    this.kernelDisposables = this._register(new DisposableStore());
    this._register(this._notebookEditor.onDidChangeActiveKernel(() => {
      if (this.currentCell) {
        this.kernelDisposables.clear();
        if (this._notebookEditor.activeKernel) {
          this.kernelDisposables.add(this._notebookEditor.activeKernel.onDidChange(() => {
            if (this.currentCell) {
              this.updateExecutionOrder(this.currentCell.internalMetadata);
            }
          }));
        }
        this.updateExecutionOrder(this.currentCell.internalMetadata);
      }
    }));
  }
  didRenderCell(element) {
    this.updateExecutionOrder(element.internalMetadata, true);
  }
  updateExecutionOrder(internalMetadata, forceClear = false) {
    if (this._notebookEditor.activeKernel?.implementsExecutionOrder || !this._notebookEditor.activeKernel && typeof internalMetadata.executionOrder === 'number') {
      if (typeof internalMetadata.executionOrder !== 'number' && !forceClear && !!this._notebookExecutionStateService.getCellExecution(this.currentCell.uri)) {
        const renderingCell = this.currentCell;
        disposableTimeout(() => {
          if (this.currentCell === renderingCell) {
            this.updateExecutionOrder(this.currentCell.internalMetadata, true);
          }
        }, UPDATE_EXECUTION_ORDER_GRACE_PERIOD, this.cellDisposables);
        return;
      }
      const executionOrderLabel = typeof internalMetadata.executionOrder === 'number' ? `[${internalMetadata.executionOrder}]` : '[ ]';
      this._executionOrderLabel.innerText = executionOrderLabel;
    } else {
      this._executionOrderLabel.innerText = '';
    }
  }
  updateState(element, e) {
    if (e.internalMetadataChanged) {
      this.updateExecutionOrder(element.internalMetadata);
    }
  }
  updateInternalLayoutNow(element) {
    if (element.isInputCollapsed) {
      hide(this._executionOrderLabel);
    } else {
      show(this._executionOrderLabel);
      const top = element.layoutInfo.editorHeight - 22 + element.layoutInfo.statusBarHeight;
      this._executionOrderLabel.style.top = `${top}px`;
    }
  }
};
CellExecutionPart = __decorate([__param(2, INotebookExecutionStateService)], CellExecutionPart);
exports.CellExecutionPart = CellExecutionPart;