const {
  __decorate,
  __param
} = require('../../../../../../../../../external/tslib/tslib.es6.js');
const {
  ToolBar
} = require('../../../../../../base/browser/ui/toolbar/toolbar.js');
const {
  Action
} = require('../../../../../../base/common/actions.js');
const {
  DisposableStore
} = require('../../../../../../base/common/lifecycle.js');
const {
  EditorContextKeys
} = require('../../../../../../editor/common/editorContextKeys.js');
const {
  localizeWithPath
} = require('../../../../../../nls.js');
const {
  DropdownWithPrimaryActionViewItem
} = require('../../../../../../platform/actions/browser/dropdownWithPrimaryActionViewItem.js');
const {
  createAndFillInActionBarActions
} = require('../../../../../../platform/actions/browser/menuEntryActionViewItem.js');
const {
  MenuItemAction
} = require('../../../../../../platform/actions/common/actions.js');
const {
  IMenuService
} = require('../../../../../../platform/actions/common/actions.service.js');
const {
  InputFocusedContext
} = require('../../../../../../platform/contextkey/common/contextkeys.js');
const {
  IContextMenuService
} = require('../../../../../../platform/contextview/browser/contextView.service.js');
const {
  IInstantiationService
} = require('../../../../../../platform/instantiation/common/instantiation.js');
const {
  IKeybindingService
} = require('../../../../../../platform/keybinding/common/keybinding.service.js');
const {
  CellContentPart
} = require('../cellPart.js');
const {
  registerCellToolbarStickyScroll
} = require('./cellToolbarStickyScroll.js');
const {
  NOTEBOOK_CELL_EXECUTION_STATE,
  NOTEBOOK_CELL_LIST_FOCUSED,
  NOTEBOOK_EDITOR_FOCUSED,
  NOTEBOOK_CELL_TYPE
} = require('../../../common/notebookContextKeys.js');
const _moduleId = "vs/workbench/contrib/notebook/browser/view/cellParts/codeCellRunToolbar";
let RunToolbar = class RunToolbar extends CellContentPart {
  constructor(notebookEditor, contextKeyService, cellContainer, runButtonContainer, menuService, keybindingService, contextMenuService, instantiationService) {
    super();
    this.notebookEditor = notebookEditor;
    this.contextKeyService = contextKeyService;
    this.cellContainer = cellContainer;
    this.runButtonContainer = runButtonContainer;
    this.keybindingService = keybindingService;
    this.contextMenuService = contextMenuService;
    this.instantiationService = instantiationService;
    this.primaryMenu = this._register(menuService.createMenu(this.notebookEditor.creationOptions.menuIds.cellExecutePrimary, contextKeyService));
    this.secondaryMenu = this._register(menuService.createMenu(this.notebookEditor.creationOptions.menuIds.cellExecuteToolbar, contextKeyService));
    this.createRunCellToolbar(runButtonContainer, cellContainer, contextKeyService);
    const updateActions = () => {
      const actions = this.getCellToolbarActions(this.primaryMenu);
      const primary = actions.primary[0];
      this.toolbar.setActions(primary ? [primary] : []);
    };
    updateActions();
    this._register(this.primaryMenu.onDidChange(updateActions));
    this._register(this.secondaryMenu.onDidChange(updateActions));
    this._register(this.notebookEditor.notebookOptions.onDidChangeOptions(updateActions));
  }
  didRenderCell(element) {
    this.cellDisposables.add(registerCellToolbarStickyScroll(this.notebookEditor, element, this.runButtonContainer));
    this.toolbar.context = {
      ui: true,
      cell: element,
      notebookEditor: this.notebookEditor,
      $mid: 13
    };
  }
  getCellToolbarActions(menu) {
    const primary = [];
    const secondary = [];
    const result = {
      primary,
      secondary
    };
    createAndFillInActionBarActions(menu, {
      shouldForwardArgs: true
    }, result, g => /^inline/.test(g));
    return result;
  }
  createRunCellToolbar(container, cellContainer, contextKeyService) {
    const actionViewItemDisposables = this._register(new DisposableStore());
    const dropdownAction = this._register(new Action('notebook.moreRunActions', localizeWithPath(_moduleId, 0, "More..."), 'codicon-chevron-down', true));
    const keybindingProvider = action => this.keybindingService.lookupKeybinding(action.id, executionContextKeyService);
    const executionContextKeyService = this._register(getCodeCellExecutionContextKeyService(contextKeyService));
    this.toolbar = this._register(new ToolBar(container, this.contextMenuService, {
      getKeyBinding: keybindingProvider,
      actionViewItemProvider: (_action, _options) => {
        actionViewItemDisposables.clear();
        const primary = this.getCellToolbarActions(this.primaryMenu).primary[0];
        if (!(primary instanceof MenuItemAction)) {
          return undefined;
        }
        const secondary = this.getCellToolbarActions(this.secondaryMenu).secondary;
        if (!secondary.length) {
          return undefined;
        }
        const item = this.instantiationService.createInstance(DropdownWithPrimaryActionViewItem, primary, dropdownAction, secondary, 'notebook-cell-run-toolbar', this.contextMenuService, {
          ..._options,
          getKeyBinding: keybindingProvider
        });
        actionViewItemDisposables.add(item.onDidChangeDropdownVisibility(visible => {
          cellContainer.classList.toggle('cell-run-toolbar-dropdown-active', visible);
        }));
        return item;
      },
      renderDropdownAsChildElement: true
    }));
  }
};
RunToolbar = __decorate([__param(4, IMenuService), __param(5, IKeybindingService), __param(6, IContextMenuService), __param(7, IInstantiationService)], RunToolbar);
function getCodeCellExecutionContextKeyService(contextKeyService) {
  const executionContextKeyService = contextKeyService.createScoped(document.createElement('div'));
  InputFocusedContext.bindTo(executionContextKeyService).set(true);
  EditorContextKeys.editorTextFocus.bindTo(executionContextKeyService).set(true);
  EditorContextKeys.focus.bindTo(executionContextKeyService).set(true);
  EditorContextKeys.textInputFocus.bindTo(executionContextKeyService).set(true);
  NOTEBOOK_CELL_EXECUTION_STATE.bindTo(executionContextKeyService).set('idle');
  NOTEBOOK_CELL_LIST_FOCUSED.bindTo(executionContextKeyService).set(true);
  NOTEBOOK_EDITOR_FOCUSED.bindTo(executionContextKeyService).set(true);
  NOTEBOOK_CELL_TYPE.bindTo(executionContextKeyService).set('code');
  return executionContextKeyService;
}
exports.RunToolbar = RunToolbar;
exports.getCodeCellExecutionContextKeyService = getCodeCellExecutionContextKeyService;