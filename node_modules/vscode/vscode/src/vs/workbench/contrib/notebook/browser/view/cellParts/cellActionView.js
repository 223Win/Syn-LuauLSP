const {
  __decorate,
  __param
} = require('../../../../../../../../../external/tslib/tslib.es6.js');
const {
  reset,
  EventType,
  addDisposableListener,
  EventHelper
} = require('../../../../../../base/browser/dom.js');
const {
  isUndefinedOrNull
} = require('../../../../../../base/common/types.js');
const {
  EventType$1
} = require('../../../../../../base/browser/touch.js');
const {
  getDefaultHoverDelegate
} = require('../../../../../../base/browser/ui/hover/hoverDelegateFactory.js');
const {
  renderLabelWithIcons
} = require('../../../../../../base/browser/ui/iconLabel/iconLabels.js');
const {
  ThemeIcon
} = require('../../../../../../base/common/themables.js');
const {
  MenuEntryActionViewItem,
  SubmenuEntryActionViewItem
} = require('../../../../../../platform/actions/browser/menuEntryActionViewItem.js');
const {
  MenuItemAction
} = require('../../../../../../platform/actions/common/actions.js');
const {
  IContextMenuService
} = require('../../../../../../platform/contextview/browser/contextView.service.js');
const {
  IKeybindingService
} = require('../../../../../../platform/keybinding/common/keybinding.service.js');
const {
  IThemeService
} = require('../../../../../../platform/theme/common/themeService.service.js');
const {
  IHoverService
} = require('../../../../../../platform/hover/browser/hover.service.js');
class CodiconActionViewItem extends MenuEntryActionViewItem {
  updateLabel() {
    if (this.options.label && this.label) {
      reset(this.label, ...renderLabelWithIcons(this._commandAction.label ?? ''));
    }
  }
}
class ActionViewWithLabel extends MenuEntryActionViewItem {
  render(container) {
    super.render(container);
    container.classList.add('notebook-action-view-item');
    this._actionLabel = document.createElement('a');
    container.appendChild(this._actionLabel);
    this.updateLabel();
  }
  updateLabel() {
    if (this._actionLabel) {
      this._actionLabel.classList.add('notebook-label');
      this._actionLabel.innerText = this._action.label;
    }
  }
}
let UnifiedSubmenuActionView = class UnifiedSubmenuActionView extends SubmenuEntryActionViewItem {
  constructor(action, options, renderLabel, subActionProvider, subActionViewItemProvider, _keybindingService, _contextMenuService, _themeService, _hoverService) {
    super(action, {
      ...options,
      hoverDelegate: options?.hoverDelegate ?? getDefaultHoverDelegate('element')
    }, _keybindingService, _contextMenuService, _themeService);
    this.renderLabel = renderLabel;
    this.subActionProvider = subActionProvider;
    this.subActionViewItemProvider = subActionViewItemProvider;
    this._hoverService = _hoverService;
  }
  render(container) {
    super.render(container);
    container.classList.add('notebook-action-view-item');
    container.classList.add('notebook-action-view-item-unified');
    this._actionLabel = document.createElement('a');
    container.appendChild(this._actionLabel);
    this._hover = this._register(this._hoverService.setupUpdatableHover(this.options.hoverDelegate ?? getDefaultHoverDelegate('element'), this._actionLabel, ''));
    this.updateLabel();
    for (const event of [EventType.CLICK, EventType.MOUSE_DOWN, EventType$1.Tap]) {
      this._register(addDisposableListener(container, event, e => this.onClick(e, true)));
    }
  }
  onClick(event, preserveFocus = false) {
    EventHelper.stop(event, true);
    const context = isUndefinedOrNull(this._context) ? this.options?.useEventAsContext ? event : {
      preserveFocus
    } : this._context;
    this.actionRunner.run(this._primaryAction ?? this._action, context);
  }
  updateLabel() {
    const actions = this.subActionProvider.getActions();
    if (this._actionLabel) {
      const primaryAction = actions[0];
      this._primaryAction = primaryAction;
      if (primaryAction && primaryAction instanceof MenuItemAction) {
        const element = this.element;
        if (element && primaryAction.item.icon && ThemeIcon.isThemeIcon(primaryAction.item.icon)) {
          const iconClasses = ThemeIcon.asClassNameArray(primaryAction.item.icon);
          element.classList.forEach(cl => {
            if (cl.startsWith('codicon-')) {
              element.classList.remove(cl);
            }
          });
          element.classList.add(...iconClasses);
        }
        if (this.renderLabel) {
          this._actionLabel.classList.add('notebook-label');
          this._actionLabel.innerText = this._action.label;
          this._hover?.update(primaryAction.tooltip.length ? primaryAction.tooltip : primaryAction.label);
        }
      } else {
        if (this.renderLabel) {
          this._actionLabel.classList.add('notebook-label');
          this._actionLabel.innerText = this._action.label;
          this._hover?.update(this._action.tooltip.length ? this._action.tooltip : this._action.label);
        }
      }
    }
  }
};
UnifiedSubmenuActionView = __decorate([__param(5, IKeybindingService), __param(6, IContextMenuService), __param(7, IThemeService), __param(8, IHoverService)], UnifiedSubmenuActionView);
exports.ActionViewWithLabel = ActionViewWithLabel;
exports.CodiconActionViewItem = CodiconActionViewItem;
exports.UnifiedSubmenuActionView = UnifiedSubmenuActionView;