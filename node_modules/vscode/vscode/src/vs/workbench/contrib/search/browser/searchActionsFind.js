const {
  dirname
} = require('../../../../base/common/resources.js');
const {
  localize2WithPath,
  localizeWithPath
} = require('../../../../nls.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {
  IListService
} = require('../../../../platform/list/browser/listService.service.js');
const {
  IViewsService
} = require('../../../services/views/common/viewsService.service.js');
const {
  SearchContext
} = require('../common/constants.js');
const {
  OpenEditorCommandId
} = require('../../searchEditor/browser/constants.js');
const {
  FileMatch,
  Match
} = require('./searchModel.js');
const {
  IEditorService
} = require('../../../services/editor/common/editorService.service.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  registerAction2,
  Action2,
  MenuId
} = require('../../../../platform/actions/common/actions.js');
const {
  resolveResourcesForSearchIncludes
} = require('../../../services/search/common/queryBuilder.js');
const {
  getMultiSelectedResources
} = require('../../files/browser/files.js');
const {
  IExplorerService
} = require('../../files/browser/files.service.js');
const {
  IFileService
} = require('../../../../platform/files/common/files.service.js');
const {
  IWorkspaceContextService
} = require('../../../../platform/workspace/common/workspace.service.js');
const {
  VIEWLET_ID,
  FilesExplorerFocusCondition,
  ExplorerFolderContext,
  ExplorerRootContext
} = require('../../files/common/files.js');
const {
  IPaneCompositePartService
} = require('../../../services/panecomposite/browser/panecomposite.service.js');
const {
  onUnexpectedError
} = require('../../../../base/common/errors.js');
const {
  category,
  getSearchView,
  openSearchView,
  getElementsToOperateOn
} = require('./searchActionsBase.js');
const {
  IConfigurationResolverService
} = require('../../../services/configurationResolver/common/configurationResolver.service.js');
const {
  IHistoryService
} = require('../../../services/history/common/history.service.js');
const {
  Schemas
} = require('../../../../base/common/network.js');
const _moduleId = "vs/workbench/contrib/search/browser/searchActionsFind";
registerAction2(class RestrictSearchToFolderAction extends Action2 {
  constructor() {
    super({
      id: "search.action.restrictSearchToFolder",
      title: localize2WithPath(_moduleId, 0, "Restrict Search to Folder"),
      category,
      keybinding: {
        weight: 200,
        when: ContextKeyExpr.and(SearchContext.SearchViewVisibleKey, SearchContext.ResourceFolderFocusKey),
        primary: 1024 | 512 | 36
      },
      menu: [{
        id: MenuId.SearchContext,
        group: 'search',
        order: 3,
        when: ContextKeyExpr.and(SearchContext.ResourceFolderFocusKey)
      }]
    });
  }
  async run(accessor, folderMatch) {
    await searchWithFolderCommand(accessor, false, true, undefined, folderMatch);
  }
});
registerAction2(class ExpandSelectedTreeCommandAction extends Action2 {
  constructor() {
    super({
      id: "search.action.expandRecursively",
      title: localizeWithPath(_moduleId, 1, "Expand Recursively"),
      category,
      menu: [{
        id: MenuId.SearchContext,
        when: ContextKeyExpr.and(ContextKeyExpr.or(SearchContext.FileFocusKey, SearchContext.FolderFocusKey), SearchContext.HasSearchResults),
        group: 'search',
        order: 4
      }]
    });
  }
  async run(accessor) {
    await expandSelectSubtree(accessor);
  }
});
registerAction2(class ExcludeFolderFromSearchAction extends Action2 {
  constructor() {
    super({
      id: "search.action.excludeFromSearch",
      title: localize2WithPath(_moduleId, 2, "Exclude Folder from Search"),
      category,
      menu: [{
        id: MenuId.SearchContext,
        group: 'search',
        order: 4,
        when: ContextKeyExpr.and(SearchContext.ResourceFolderFocusKey)
      }]
    });
  }
  async run(accessor, folderMatch) {
    await searchWithFolderCommand(accessor, false, false, undefined, folderMatch);
  }
});
registerAction2(class RevealInSideBarForSearchResultsAction extends Action2 {
  constructor() {
    super({
      id: "search.action.revealInSideBar",
      title: localize2WithPath(_moduleId, 3, "Reveal in Explorer View"),
      category,
      menu: [{
        id: MenuId.SearchContext,
        when: ContextKeyExpr.and(SearchContext.FileFocusKey, SearchContext.HasSearchResults),
        group: 'search_3',
        order: 1
      }]
    });
  }
  async run(accessor, args) {
    const paneCompositeService = accessor.get(IPaneCompositePartService);
    const explorerService = accessor.get(IExplorerService);
    const contextService = accessor.get(IWorkspaceContextService);
    const searchView = getSearchView(accessor.get(IViewsService));
    if (!searchView) {
      return;
    }
    let fileMatch;
    if (!(args instanceof FileMatch)) {
      args = searchView.getControl().getFocus()[0];
    }
    if (args instanceof FileMatch) {
      fileMatch = args;
    } else {
      return;
    }
    paneCompositeService.openPaneComposite(VIEWLET_ID, 0, false).then(viewlet => {
      if (!viewlet) {
        return;
      }
      const explorerViewContainer = viewlet.getViewPaneContainer();
      const uri = fileMatch.resource;
      if (uri && contextService.isInsideWorkspace(uri)) {
        const explorerView = explorerViewContainer.getExplorerView();
        explorerView.setExpanded(true);
        explorerService.select(uri, true).then(() => explorerView.focus(), onUnexpectedError);
      }
    });
  }
});
registerAction2(class FindInFilesAction extends Action2 {
  constructor() {
    super({
      id: "workbench.action.findInFiles",
      title: {
        ...localize2WithPath(_moduleId, 4, "Find in Files"),
        mnemonicTitle: localizeWithPath(_moduleId, 5, "Find &&in Files")
      },
      metadata: {
        description: localizeWithPath(_moduleId, 6, "Open a workspace search"),
        args: [{
          name: localizeWithPath(_moduleId, 7, "A set of options for the search"),
          schema: {
            type: 'object',
            properties: {
              query: {
                'type': 'string'
              },
              replace: {
                'type': 'string'
              },
              preserveCase: {
                'type': 'boolean'
              },
              triggerSearch: {
                'type': 'boolean'
              },
              filesToInclude: {
                'type': 'string'
              },
              filesToExclude: {
                'type': 'string'
              },
              isRegex: {
                'type': 'boolean'
              },
              isCaseSensitive: {
                'type': 'boolean'
              },
              matchWholeWord: {
                'type': 'boolean'
              },
              useExcludeSettingsAndIgnoreFiles: {
                'type': 'boolean'
              },
              onlyOpenEditors: {
                'type': 'boolean'
              }
            }
          }
        }]
      },
      category,
      keybinding: {
        weight: 200,
        primary: 2048 | 1024 | 36
      },
      menu: [{
        id: MenuId.MenubarEditMenu,
        group: '4_find_global',
        order: 1
      }],
      f1: true
    });
  }
  async run(accessor, args = {}) {
    findInFilesCommand(accessor, args);
  }
});
registerAction2(class FindInFolderAction extends Action2 {
  constructor() {
    super({
      id: "filesExplorer.findInFolder",
      title: localize2WithPath(_moduleId, 8, "Find in Folder..."),
      category,
      keybinding: {
        weight: 200,
        when: ContextKeyExpr.and(FilesExplorerFocusCondition, ExplorerFolderContext),
        primary: 1024 | 512 | 36
      },
      menu: [{
        id: MenuId.ExplorerContext,
        group: '4_search',
        order: 10,
        when: ContextKeyExpr.and(ExplorerFolderContext)
      }]
    });
  }
  async run(accessor, resource) {
    await searchWithFolderCommand(accessor, true, true, resource);
  }
});
registerAction2(class FindInWorkspaceAction extends Action2 {
  constructor() {
    super({
      id: "filesExplorer.findInWorkspace",
      title: localize2WithPath(_moduleId, 9, "Find in Workspace..."),
      category,
      menu: [{
        id: MenuId.ExplorerContext,
        group: '4_search',
        order: 10,
        when: ContextKeyExpr.and(ExplorerRootContext, ExplorerFolderContext.toNegated())
      }]
    });
  }
  async run(accessor) {
    const searchConfig = accessor.get(IConfigurationService).getValue().search;
    const mode = searchConfig.mode;
    if (mode === 'view') {
      const searchView = await openSearchView(accessor.get(IViewsService), true);
      searchView?.searchInFolders();
    } else {
      return accessor.get(ICommandService).executeCommand(OpenEditorCommandId, {
        location: mode === 'newEditor' ? 'new' : 'reuse',
        filesToInclude: ''
      });
    }
  }
});
function expandSelectSubtree(accessor) {
  const viewsService = accessor.get(IViewsService);
  const searchView = getSearchView(viewsService);
  if (searchView) {
    const viewer = searchView.getControl();
    const selected = viewer.getFocus()[0];
    viewer.expand(selected, true);
  }
}
async function searchWithFolderCommand(accessor, isFromExplorer, isIncludes, resource, folderMatch) {
  const listService = accessor.get(IListService);
  const fileService = accessor.get(IFileService);
  const viewsService = accessor.get(IViewsService);
  const contextService = accessor.get(IWorkspaceContextService);
  const commandService = accessor.get(ICommandService);
  const searchConfig = accessor.get(IConfigurationService).getValue().search;
  const mode = searchConfig.mode;
  let resources;
  if (isFromExplorer) {
    resources = getMultiSelectedResources(resource, listService, accessor.get(IEditorService), accessor.get(IExplorerService));
  } else {
    const searchView = getSearchView(accessor.get(IViewsService));
    if (!searchView) {
      return;
    }
    resources = getMultiSelectedSearchResources(searchView.getControl(), folderMatch, searchConfig);
  }
  const resolvedResources = fileService.resolveAll(resources.map(resource => ({
    resource
  }))).then(results => {
    const folders = [];
    results.forEach(result => {
      if (result.success && result.stat) {
        folders.push(result.stat.isDirectory ? result.stat.resource : dirname(result.stat.resource));
      }
    });
    return resolveResourcesForSearchIncludes(folders, contextService);
  });
  if (mode === 'view') {
    const searchView = await openSearchView(viewsService, true);
    if (resources && resources.length && searchView) {
      if (isIncludes) {
        searchView.searchInFolders(await resolvedResources);
      } else {
        searchView.searchOutsideOfFolders(await resolvedResources);
      }
    }
    return undefined;
  } else {
    if (isIncludes) {
      return commandService.executeCommand(OpenEditorCommandId, {
        filesToInclude: (await resolvedResources).join(', '),
        showIncludesExcludes: true,
        location: mode === 'newEditor' ? 'new' : 'reuse'
      });
    } else {
      return commandService.executeCommand(OpenEditorCommandId, {
        filesToExclude: (await resolvedResources).join(', '),
        showIncludesExcludes: true,
        location: mode === 'newEditor' ? 'new' : 'reuse'
      });
    }
  }
}
function getMultiSelectedSearchResources(viewer, currElement, sortConfig) {
  return getElementsToOperateOn(viewer, currElement, sortConfig).map(renderableMatch => renderableMatch instanceof Match ? null : renderableMatch.resource).filter(renderableMatch => renderableMatch !== null);
}
async function findInFilesCommand(accessor, _args = {}) {
  const searchConfig = accessor.get(IConfigurationService).getValue().search;
  const viewsService = accessor.get(IViewsService);
  const commandService = accessor.get(ICommandService);
  const args = {};
  if (Object.keys(_args).length !== 0) {
    const configurationResolverService = accessor.get(IConfigurationResolverService);
    const historyService = accessor.get(IHistoryService);
    const workspaceContextService = accessor.get(IWorkspaceContextService);
    const activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot();
    const filteredActiveWorkspaceRootUri = activeWorkspaceRootUri?.scheme === Schemas.file || activeWorkspaceRootUri?.scheme === Schemas.vscodeRemote ? activeWorkspaceRootUri : undefined;
    const lastActiveWorkspaceRoot = filteredActiveWorkspaceRootUri ? workspaceContextService.getWorkspaceFolder(filteredActiveWorkspaceRootUri) ?? undefined : undefined;
    for (const entry of Object.entries(_args)) {
      const name = entry[0];
      const value = entry[1];
      if (value !== undefined) {
        args[name] = typeof value === 'string' ? await configurationResolverService.resolveAsync(lastActiveWorkspaceRoot, value) : value;
      }
    }
  }
  const mode = searchConfig.mode;
  if (mode === 'view') {
    openSearchView(viewsService, false).then(openedView => {
      if (openedView) {
        const searchAndReplaceWidget = openedView.searchAndReplaceWidget;
        searchAndReplaceWidget.toggleReplace(typeof args.replace === 'string');
        let updatedText = false;
        if (typeof args.query !== 'string') {
          updatedText = openedView.updateTextFromFindWidgetOrSelection({
            allowUnselectedWord: typeof args.replace !== 'string'
          });
        }
        openedView.setSearchParameters(args);
        openedView.searchAndReplaceWidget.focus(undefined, updatedText, updatedText);
      }
    });
  } else {
    const convertArgs = args => ({
      location: mode === 'newEditor' ? 'new' : 'reuse',
      query: args.query,
      filesToInclude: args.filesToInclude,
      filesToExclude: args.filesToExclude,
      matchWholeWord: args.matchWholeWord,
      isCaseSensitive: args.isCaseSensitive,
      isRegexp: args.isRegex,
      useExcludeSettingsAndIgnoreFiles: args.useExcludeSettingsAndIgnoreFiles,
      onlyOpenEditors: args.onlyOpenEditors,
      showIncludesExcludes: !!(args.filesToExclude || args.filesToExclude || !args.useExcludeSettingsAndIgnoreFiles)
    });
    commandService.executeCommand(OpenEditorCommandId, convertArgs(args));
  }
}
exports.findInFilesCommand = findInFilesCommand;