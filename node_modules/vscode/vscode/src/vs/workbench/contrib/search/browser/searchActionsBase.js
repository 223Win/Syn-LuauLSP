const {
  isAncestorOfActiveElement
} = require('../../../../base/browser/dom.js');
const {
  localize2WithPath
} = require('../../../../nls.js');
const {
  searchComparer,
  FileMatch,
  Match,
  FolderMatch
} = require('./searchModel.js');
const {
  VIEW_ID
} = require('../../../services/search/common/search.js');
const _moduleId = "vs/workbench/contrib/search/browser/searchActionsBase";
const category = localize2WithPath(_moduleId, 0, "Search");
function isSearchViewFocused(viewsService) {
  const searchView = getSearchView(viewsService);
  return !!(searchView && isAncestorOfActiveElement(searchView.getContainer()));
}
function appendKeyBindingLabel(label, inputKeyBinding) {
  return doAppendKeyBindingLabel(label, inputKeyBinding);
}
function getSearchView(viewsService) {
  return viewsService.getActiveViewWithId(VIEW_ID);
}
function getElementsToOperateOn(viewer, currElement, sortConfig) {
  let elements = viewer.getSelection().filter(x => x !== null).sort((a, b) => searchComparer(a, b, sortConfig.sortOrder));
  if (currElement && !(elements.length > 1 && elements.includes(currElement))) {
    elements = [currElement];
  }
  return elements;
}
function shouldRefocus(elements, focusElement) {
  if (!focusElement) {
    return false;
  }
  return !focusElement || elements.includes(focusElement) || hasDownstreamMatch(elements, focusElement);
}
function hasDownstreamMatch(elements, focusElement) {
  for (const elem of elements) {
    if (elem instanceof FileMatch && focusElement instanceof Match && elem.matches().includes(focusElement) || elem instanceof FolderMatch && (focusElement instanceof FileMatch && elem.getDownstreamFileMatch(focusElement.resource) || focusElement instanceof Match && elem.getDownstreamFileMatch(focusElement.parent().resource))) {
      return true;
    }
  }
  return false;
}
function openSearchView(viewsService, focus) {
  return viewsService.openView(VIEW_ID, focus).then(view => view ?? undefined);
}
function doAppendKeyBindingLabel(label, keyBinding) {
  return keyBinding ? label + ' (' + keyBinding.getLabel() + ')' : label;
}
exports.appendKeyBindingLabel = appendKeyBindingLabel;
exports.category = category;
exports.getElementsToOperateOn = getElementsToOperateOn;
exports.getSearchView = getSearchView;
exports.isSearchViewFocused = isSearchViewFocused;
exports.openSearchView = openSearchView;
exports.shouldRefocus = shouldRefocus;