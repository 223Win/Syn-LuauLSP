const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  timeout
} = require('../../../../base/common/async.js');
const {
  CancellationToken
} = require('../../../../base/common/cancellation.js');
const {
  Emitter
} = require('../../../../base/common/event.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  IFileService
} = require('../../../../platform/files/common/files.service.js');
let ResourceWorkingCopy = class ResourceWorkingCopy extends Disposable {
  constructor(resource, fileService) {
    super();
    this.resource = resource;
    this.fileService = fileService;
    this._onDidChangeOrphaned = this._register(new Emitter());
    this.onDidChangeOrphaned = this._onDidChangeOrphaned.event;
    this.orphaned = false;
    this._onWillDispose = this._register(new Emitter());
    this.onWillDispose = this._onWillDispose.event;
    this._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));
  }
  isOrphaned() {
    return this.orphaned;
  }
  async onDidFilesChange(e) {
    let fileEventImpactsUs = false;
    let newInOrphanModeGuess;
    if (this.orphaned) {
      const fileWorkingCopyResourceAdded = e.contains(this.resource, 1);
      if (fileWorkingCopyResourceAdded) {
        newInOrphanModeGuess = false;
        fileEventImpactsUs = true;
      }
    } else {
      const fileWorkingCopyResourceDeleted = e.contains(this.resource, 2);
      if (fileWorkingCopyResourceDeleted) {
        newInOrphanModeGuess = true;
        fileEventImpactsUs = true;
      }
    }
    if (fileEventImpactsUs && this.orphaned !== newInOrphanModeGuess) {
      let newInOrphanModeValidated = false;
      if (newInOrphanModeGuess) {
        await timeout(100, CancellationToken.None);
        if (this.isDisposed()) {
          newInOrphanModeValidated = true;
        } else {
          const exists = await this.fileService.exists(this.resource);
          newInOrphanModeValidated = !exists;
        }
      }
      if (this.orphaned !== newInOrphanModeValidated && !this.isDisposed()) {
        this.setOrphaned(newInOrphanModeValidated);
      }
    }
  }
  setOrphaned(orphaned) {
    if (this.orphaned !== orphaned) {
      this.orphaned = orphaned;
      this._onDidChangeOrphaned.fire();
    }
  }
  isDisposed() {
    return this._store.isDisposed;
  }
  dispose() {
    this.orphaned = false;
    this._onWillDispose.fire();
    super.dispose();
  }
  isModified() {
    return this.isDirty();
  }
};
ResourceWorkingCopy = __decorate([__param(1, IFileService)], ResourceWorkingCopy);
exports.ResourceWorkingCopy = ResourceWorkingCopy;