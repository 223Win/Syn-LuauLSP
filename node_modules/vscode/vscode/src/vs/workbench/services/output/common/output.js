const {
  Emitter
} = require('../../../../base/common/event.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const {
  RawContextKey
} = require('../../../../platform/contextkey/common/contextkey.js');
const OUTPUT_MIME = 'text/x-code-output';
const OUTPUT_SCHEME = 'output';
const OUTPUT_MODE_ID = 'Log';
const LOG_MIME = 'text/x-code-log-output';
const LOG_MODE_ID = 'log';
const OUTPUT_VIEW_ID = 'workbench.panel.output';
const CONTEXT_IN_OUTPUT = new RawContextKey('inOutput', false);
const CONTEXT_ACTIVE_FILE_OUTPUT = new RawContextKey('activeLogOutput', false);
const CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE = new RawContextKey('activeLogOutput.levelSettable', false);
const CONTEXT_ACTIVE_OUTPUT_LEVEL = new RawContextKey('activeLogOutput.level', '');
const CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT = new RawContextKey('activeLogOutput.levelIsDefault', false);
const CONTEXT_OUTPUT_SCROLL_LOCK = new RawContextKey(`outputView.scrollLock`, false);
var OutputChannelUpdateMode;
(function (OutputChannelUpdateMode) {
  OutputChannelUpdateMode[OutputChannelUpdateMode["Append"] = 1] = "Append";
  OutputChannelUpdateMode[OutputChannelUpdateMode["Replace"] = 2] = "Replace";
  OutputChannelUpdateMode[OutputChannelUpdateMode["Clear"] = 3] = "Clear";
})(OutputChannelUpdateMode || (OutputChannelUpdateMode = {}));
const Extensions = {
  OutputChannels: 'workbench.contributions.outputChannels'
};
class OutputChannelRegistry {
  constructor() {
    this.channels = new Map();
    this._onDidRegisterChannel = new Emitter();
    this.onDidRegisterChannel = this._onDidRegisterChannel.event;
    this._onDidRemoveChannel = new Emitter();
    this.onDidRemoveChannel = this._onDidRemoveChannel.event;
  }
  registerChannel(descriptor) {
    if (!this.channels.has(descriptor.id)) {
      this.channels.set(descriptor.id, descriptor);
      this._onDidRegisterChannel.fire(descriptor.id);
    }
  }
  getChannels() {
    const result = [];
    this.channels.forEach(value => result.push(value));
    return result;
  }
  getChannel(id) {
    return this.channels.get(id);
  }
  removeChannel(id) {
    this.channels.delete(id);
    this._onDidRemoveChannel.fire(id);
  }
}
Registry.add(Extensions.OutputChannels, new OutputChannelRegistry());
const ACTIVE_OUTPUT_CHANNEL_CONTEXT = new RawContextKey('activeOutputChannel', '');
exports.ACTIVE_OUTPUT_CHANNEL_CONTEXT = ACTIVE_OUTPUT_CHANNEL_CONTEXT;
exports.CONTEXT_ACTIVE_FILE_OUTPUT = CONTEXT_ACTIVE_FILE_OUTPUT;
exports.CONTEXT_ACTIVE_OUTPUT_LEVEL = CONTEXT_ACTIVE_OUTPUT_LEVEL;
exports.CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT = CONTEXT_ACTIVE_OUTPUT_LEVEL_IS_DEFAULT;
exports.CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE = CONTEXT_ACTIVE_OUTPUT_LEVEL_SETTABLE;
exports.CONTEXT_IN_OUTPUT = CONTEXT_IN_OUTPUT;
exports.CONTEXT_OUTPUT_SCROLL_LOCK = CONTEXT_OUTPUT_SCROLL_LOCK;
exports.Extensions = Extensions;
exports.LOG_MIME = LOG_MIME;
exports.LOG_MODE_ID = LOG_MODE_ID;
exports.OUTPUT_MIME = OUTPUT_MIME;
exports.OUTPUT_MODE_ID = OUTPUT_MODE_ID;
exports.OUTPUT_SCHEME = OUTPUT_SCHEME;
exports.OUTPUT_VIEW_ID = OUTPUT_VIEW_ID;
exports.OutputChannelUpdateMode = OutputChannelUpdateMode;