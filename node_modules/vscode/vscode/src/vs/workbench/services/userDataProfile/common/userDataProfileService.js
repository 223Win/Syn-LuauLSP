const {
  Promises
} = require('../../../../base/common/async.js');
const {
  Emitter
} = require('../../../../base/common/event.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  equals
} = require('../../../../base/common/objects.js');
const {
  ThemeIcon
} = require('../../../../base/common/themables.js');
const {
  defaultUserDataProfileIcon
} = require('./userDataProfile.js');
class UserDataProfileService extends Disposable {
  get currentProfile() {
    return this._currentProfile;
  }
  constructor(currentProfile) {
    super();
    this._onDidChangeCurrentProfile = this._register(new Emitter());
    this.onDidChangeCurrentProfile = this._onDidChangeCurrentProfile.event;
    this._currentProfile = currentProfile;
  }
  async updateCurrentProfile(userDataProfile) {
    if (equals(this._currentProfile, userDataProfile)) {
      return;
    }
    const previous = this._currentProfile;
    this._currentProfile = userDataProfile;
    const joiners = [];
    this._onDidChangeCurrentProfile.fire({
      previous,
      profile: userDataProfile,
      join(promise) {
        joiners.push(promise);
      }
    });
    await Promises.settled(joiners);
  }
  getShortName(profile) {
    if (!profile.isDefault && profile.shortName && ThemeIcon.fromId(profile.shortName)) {
      return profile.shortName;
    }
    return `$(${defaultUserDataProfileIcon.id})`;
  }
}
exports.UserDataProfileService = UserDataProfileService;