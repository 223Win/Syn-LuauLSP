const {
  match
} = require('../../../../base/common/glob.js');
const {
  Schemas
} = require('../../../../base/common/network.js');
const {
  posix
} = require('../../../../base/common/path.js');
const {
  basename
} = require('../../../../base/common/resources.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  workbenchConfigurationNodeBase
} = require('../../../common/configuration.js');
const {
  Extensions
} = require('../../../../platform/configuration/common/configurationRegistry.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const _moduleId = "vs/workbench/services/editor/common/editorResolverService";
const editorsAssociationsSettingId = 'workbench.editorAssociations';
const configurationRegistry = Registry.as(Extensions.Configuration);
const editorAssociationsConfigurationNode = {
  ...workbenchConfigurationNodeBase,
  properties: {
    'workbench.editorAssociations': {
      type: 'object',
      markdownDescription: localizeWithPath(_moduleId, 0, "Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\"*.hex\": \"hexEditor.hexedit\"`). These have precedence over the default behavior."),
      additionalProperties: {
        type: 'string'
      }
    }
  }
};
configurationRegistry.registerConfiguration(editorAssociationsConfigurationNode);
var RegisteredEditorPriority;
(function (RegisteredEditorPriority) {
  RegisteredEditorPriority["builtin"] = "builtin";
  RegisteredEditorPriority["option"] = "option";
  RegisteredEditorPriority["exclusive"] = "exclusive";
  RegisteredEditorPriority["default"] = "default";
})(RegisteredEditorPriority || (RegisteredEditorPriority = {}));
function priorityToRank(priority) {
  switch (priority) {
    case RegisteredEditorPriority.exclusive:
      return 5;
    case RegisteredEditorPriority.default:
      return 4;
    case RegisteredEditorPriority.builtin:
      return 3;
    case RegisteredEditorPriority.option:
    default:
      return 1;
  }
}
function globMatchesResource(globPattern, resource) {
  const excludedSchemes = new Set([Schemas.extension, Schemas.webviewPanel, Schemas.vscodeWorkspaceTrust, Schemas.vscodeSettings]);
  if (excludedSchemes.has(resource.scheme)) {
    return false;
  }
  const matchOnPath = typeof globPattern === 'string' && globPattern.indexOf(posix.sep) >= 0;
  const target = matchOnPath ? `${resource.scheme}:${resource.path}` : basename(resource);
  return match(typeof globPattern === 'string' ? globPattern.toLowerCase() : globPattern, target.toLowerCase());
}
exports.RegisteredEditorPriority = RegisteredEditorPriority;
exports.editorsAssociationsSettingId = editorsAssociationsSettingId;
exports.globMatchesResource = globMatchesResource;
exports.priorityToRank = priorityToRank;