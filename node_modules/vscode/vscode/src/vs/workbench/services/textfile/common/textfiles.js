const {
  FileOperationError
} = require('../../../../platform/files/common/files.js');
const {
  VSBuffer
} = require('../../../../base/common/buffer.js');
const {
  isUndefinedOrNull,
  areFunctions
} = require('../../../../base/common/types.js');
class TextFileOperationError extends FileOperationError {
  static isTextFileOperationError(obj) {
    return obj instanceof Error && !isUndefinedOrNull(obj.textFileOperationResult);
  }
  constructor(message, textFileOperationResult, options) {
    super(message, 10);
    this.textFileOperationResult = textFileOperationResult;
    this.options = options;
  }
}
function isTextFileEditorModel(model) {
  const candidate = model;
  return areFunctions(candidate.setEncoding, candidate.getEncoding, candidate.save, candidate.revert, candidate.isDirty, candidate.getLanguageId);
}
function stringToSnapshot(value) {
  let done = false;
  return {
    read() {
      if (!done) {
        done = true;
        return value;
      }
      return null;
    }
  };
}
function toBufferOrReadable(value) {
  if (typeof value === 'undefined') {
    return undefined;
  }
  if (typeof value === 'string') {
    return VSBuffer.fromString(value);
  }
  return {
    read: () => {
      const chunk = value.read();
      if (typeof chunk === 'string') {
        return VSBuffer.fromString(chunk);
      }
      return null;
    }
  };
}
exports.TextFileOperationError = TextFileOperationError;
exports.isTextFileEditorModel = isTextFileEditorModel;
exports.stringToSnapshot = stringToSnapshot;
exports.toBufferOrReadable = toBufferOrReadable;