const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  Codicon
} = require('../../../../base/common/codicons.js');
const {
  Schemas
} = require('../../../../base/common/network.js');
const {
  URI
} = require('../../../../base/common/uri.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  registerIcon
} = require('../../../../platform/theme/common/iconRegistry.js');
const {
  EditorInput
} = require('../../../common/editor/editorInput.js');
const {
  IPreferencesService
} = require('./preferences.service.js');
var SettingsEditor2Input_1;
const _moduleId = "vs/workbench/services/preferences/common/preferencesEditorInput";
const SettingsEditorIcon = registerIcon('settings-editor-label-icon', Codicon.settings, localizeWithPath(_moduleId, 0, 'Icon of the settings editor label.'));
let SettingsEditor2Input = class SettingsEditor2Input extends EditorInput {
  static {
    SettingsEditor2Input_1 = this;
  }
  static {
    this.ID = 'workbench.input.settings2';
  }
  constructor(_preferencesService) {
    super();
    this.resource = URI.from({
      scheme: Schemas.vscodeSettings,
      path: `settingseditor`
    });
    this._settingsModel = _preferencesService.createSettings2EditorModel();
  }
  matches(otherInput) {
    return super.matches(otherInput) || otherInput instanceof SettingsEditor2Input_1;
  }
  get typeId() {
    return SettingsEditor2Input_1.ID;
  }
  getName() {
    return localizeWithPath(_moduleId, 1, "Settings");
  }
  getIcon() {
    return SettingsEditorIcon;
  }
  async resolve() {
    return this._settingsModel;
  }
  dispose() {
    this._settingsModel.dispose();
    super.dispose();
  }
};
SettingsEditor2Input = SettingsEditor2Input_1 = __decorate([__param(0, IPreferencesService)], SettingsEditor2Input);
exports.SettingsEditor2Input = SettingsEditor2Input;