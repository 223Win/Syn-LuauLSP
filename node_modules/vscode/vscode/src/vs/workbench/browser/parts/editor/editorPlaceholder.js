const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {} = require('./media/editorplaceholder.css.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  truncate,
  truncateMiddle
} = require('../../../../base/common/strings.js');
const Severity$1 = require('../../../../base/common/severity.js');
const {
  isEditorOpenError
} = require('../../../common/editor.js');
const {
  EditorPane
} = require('./editorPane.js');
const {
  ITelemetryService
} = require('../../../../platform/telemetry/common/telemetry.service.js');
const {
  DomScrollableElement
} = require('../../../../base/browser/ui/scrollbar/scrollableElement.js');
const {
  IThemeService
} = require('../../../../platform/theme/common/themeService.service.js');
const {
  clearNode,
  $,
  EventHelper,
  size
} = require('../../../../base/browser/dom.js');
const {
  MutableDisposable,
  DisposableStore
} = require('../../../../base/common/lifecycle.js');
const {
  IStorageService
} = require('../../../../platform/storage/common/storage.service.js');
const {
  assertAllDefined
} = require('../../../../base/common/types.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  isSingleFolderWorkspaceIdentifier,
  toWorkspaceIdentifier
} = require('../../../../platform/workspace/common/workspace.js');
const {
  IWorkspaceContextService
} = require('../../../../platform/workspace/common/workspace.service.js');
const {
  EditorOpenSource
} = require('../../../../platform/editor/common/editor.js');
const {
  computeEditorAriaLabel,
  EditorPaneDescriptor
} = require('../../editor.js');
const {
  ButtonBar
} = require('../../../../base/browser/ui/button/button.js');
const {
  defaultButtonStyles
} = require('../../../../platform/theme/browser/defaultStyles.js');
const {
  SimpleIconLabel
} = require('../../../../base/browser/ui/iconLabel/simpleIconLabel.js');
const {
  IFileService
} = require('../../../../platform/files/common/files.service.js');
const {
  toErrorMessage
} = require('../../../../base/common/errorMessage.js');
const {
  IDialogService
} = require('../../../../platform/dialogs/common/dialogs.service.js');
var EditorPlaceholder_1, WorkspaceTrustRequiredPlaceholderEditor_1, ErrorPlaceholderEditor_1;
const _moduleId = "vs/workbench/browser/parts/editor/editorPlaceholder";
let EditorPlaceholder = class EditorPlaceholder extends EditorPane {
  static {
    EditorPlaceholder_1 = this;
  }
  static {
    this.PLACEHOLDER_LABEL_MAX_LENGTH = 1024;
  }
  constructor(id, group, telemetryService, themeService, storageService) {
    super(id, group, telemetryService, themeService, storageService);
    this.inputDisposable = this._register(new MutableDisposable());
  }
  createEditor(parent) {
    this.container = document.createElement('div');
    this.container.className = 'monaco-editor-pane-placeholder';
    this.container.style.outline = 'none';
    this.container.tabIndex = 0;
    this.scrollbar = this._register(new DomScrollableElement(this.container, {
      horizontal: 1,
      vertical: 1
    }));
    parent.appendChild(this.scrollbar.getDomNode());
  }
  async setInput(input, options, context, token) {
    await super.setInput(input, options, context, token);
    if (token.isCancellationRequested) {
      return;
    }
    this.inputDisposable.value = await this.renderInput(input, options);
  }
  async renderInput(input, options) {
    const [container, scrollbar] = assertAllDefined(this.container, this.scrollbar);
    clearNode(container);
    const disposables = new DisposableStore();
    const {
      icon,
      label,
      actions
    } = await this.getContents(input, options, disposables);
    const truncatedLabel = truncate(label, EditorPlaceholder_1.PLACEHOLDER_LABEL_MAX_LENGTH);
    const iconContainer = container.appendChild($('.editor-placeholder-icon-container'));
    const iconWidget = disposables.add(new SimpleIconLabel(iconContainer));
    iconWidget.text = icon;
    const labelContainer = container.appendChild($('.editor-placeholder-label-container'));
    const labelWidget = document.createElement('span');
    labelWidget.textContent = truncatedLabel;
    labelContainer.appendChild(labelWidget);
    container.setAttribute('aria-label', `${computeEditorAriaLabel(input, undefined, this.group, undefined)}, ${truncatedLabel}`);
    if (actions.length) {
      const actionsContainer = container.appendChild($('.editor-placeholder-buttons-container'));
      const buttons = disposables.add(new ButtonBar(actionsContainer));
      for (let i = 0; i < actions.length; i++) {
        const button = disposables.add(buttons.addButton({
          ...defaultButtonStyles,
          secondary: i !== 0
        }));
        button.label = actions[i].label;
        disposables.add(button.onDidClick(e => {
          if (e) {
            EventHelper.stop(e, true);
          }
          actions[i].run();
        }));
      }
    }
    scrollbar.scanDomNode();
    return disposables;
  }
  clearInput() {
    if (this.container) {
      clearNode(this.container);
    }
    this.inputDisposable.clear();
    super.clearInput();
  }
  layout(dimension) {
    const [container, scrollbar] = assertAllDefined(this.container, this.scrollbar);
    size(container, dimension.width, dimension.height);
    scrollbar.scanDomNode();
    container.classList.toggle('max-height-200px', dimension.height <= 200);
  }
  focus() {
    super.focus();
    this.container?.focus();
  }
  dispose() {
    this.container?.remove();
    super.dispose();
  }
};
EditorPlaceholder = EditorPlaceholder_1 = __decorate([__param(2, ITelemetryService), __param(3, IThemeService), __param(4, IStorageService)], EditorPlaceholder);
let WorkspaceTrustRequiredPlaceholderEditor = class WorkspaceTrustRequiredPlaceholderEditor extends EditorPlaceholder {
  static {
    WorkspaceTrustRequiredPlaceholderEditor_1 = this;
  }
  static {
    this.ID = 'workbench.editors.workspaceTrustRequiredEditor';
  }
  static {
    this.LABEL = localizeWithPath(_moduleId, 0, "Workspace Trust Required");
  }
  static {
    this.DESCRIPTOR = EditorPaneDescriptor.create(WorkspaceTrustRequiredPlaceholderEditor_1, WorkspaceTrustRequiredPlaceholderEditor_1.ID, WorkspaceTrustRequiredPlaceholderEditor_1.LABEL);
  }
  constructor(group, telemetryService, themeService, commandService, workspaceService, storageService) {
    super(WorkspaceTrustRequiredPlaceholderEditor_1.ID, group, telemetryService, themeService, storageService);
    this.commandService = commandService;
    this.workspaceService = workspaceService;
  }
  getTitle() {
    return WorkspaceTrustRequiredPlaceholderEditor_1.LABEL;
  }
  async getContents() {
    return {
      icon: '$(workspace-untrusted)',
      label: isSingleFolderWorkspaceIdentifier(toWorkspaceIdentifier(this.workspaceService.getWorkspace())) ? localizeWithPath(_moduleId, 1, "The file is not displayed in the editor because trust has not been granted to the folder.") : localizeWithPath(_moduleId, 2, "The file is not displayed in the editor because trust has not been granted to the workspace."),
      actions: [{
        label: localizeWithPath(_moduleId, 3, "Manage Workspace Trust"),
        run: () => this.commandService.executeCommand('workbench.trust.manage')
      }]
    };
  }
};
WorkspaceTrustRequiredPlaceholderEditor = WorkspaceTrustRequiredPlaceholderEditor_1 = __decorate([__param(1, ITelemetryService), __param(2, IThemeService), __param(3, ICommandService), __param(4, IWorkspaceContextService), __param(5, IStorageService)], WorkspaceTrustRequiredPlaceholderEditor);
let ErrorPlaceholderEditor = class ErrorPlaceholderEditor extends EditorPlaceholder {
  static {
    ErrorPlaceholderEditor_1 = this;
  }
  static {
    this.ID = 'workbench.editors.errorEditor';
  }
  static {
    this.LABEL = localizeWithPath(_moduleId, 4, "Error Editor");
  }
  static {
    this.DESCRIPTOR = EditorPaneDescriptor.create(ErrorPlaceholderEditor_1, ErrorPlaceholderEditor_1.ID, ErrorPlaceholderEditor_1.LABEL);
  }
  constructor(group, telemetryService, themeService, storageService, fileService, dialogService) {
    super(ErrorPlaceholderEditor_1.ID, group, telemetryService, themeService, storageService);
    this.fileService = fileService;
    this.dialogService = dialogService;
  }
  async getContents(input, options, disposables) {
    const resource = input.resource;
    const error = options.error;
    const isFileNotFound = error?.fileOperationResult === 1;
    let label;
    if (isFileNotFound) {
      label = localizeWithPath(_moduleId, 5, "The editor could not be opened because the file was not found.");
    } else if (isEditorOpenError(error) && error.forceMessage) {
      label = error.message;
    } else if (error) {
      label = localizeWithPath(_moduleId, 6, "The editor could not be opened due to an unexpected error: {0}", truncateMiddle(toErrorMessage(error), EditorPlaceholder.PLACEHOLDER_LABEL_MAX_LENGTH / 2));
    } else {
      label = localizeWithPath(_moduleId, 7, "The editor could not be opened due to an unexpected error.");
    }
    let icon = '$(error)';
    if (isEditorOpenError(error)) {
      if (error.forceSeverity === Severity$1.Info) {
        icon = '$(info)';
      } else if (error.forceSeverity === Severity$1.Warning) {
        icon = '$(warning)';
      }
    }
    let actions = undefined;
    if (isEditorOpenError(error) && error.actions.length > 0) {
      actions = error.actions.map(action => {
        return {
          label: action.label,
          run: () => {
            const result = action.run();
            if (result instanceof Promise) {
              result.catch(error => this.dialogService.error(toErrorMessage(error)));
            }
          }
        };
      });
    } else {
      actions = [{
        label: localizeWithPath(_moduleId, 8, "Try Again"),
        run: () => this.group.openEditor(input, {
          ...options,
          source: EditorOpenSource.USER
        })
      }];
    }
    if (isFileNotFound && resource && this.fileService.hasProvider(resource)) {
      disposables.add(this.fileService.onDidFilesChange(e => {
        if (e.contains(resource, 1, 0)) {
          this.group.openEditor(input, options);
        }
      }));
    }
    return {
      icon,
      label,
      actions: actions ?? []
    };
  }
};
ErrorPlaceholderEditor = ErrorPlaceholderEditor_1 = __decorate([__param(1, ITelemetryService), __param(2, IThemeService), __param(3, IStorageService), __param(4, IFileService), __param(5, IDialogService)], ErrorPlaceholderEditor);
exports.EditorPlaceholder = EditorPlaceholder;
exports.ErrorPlaceholderEditor = ErrorPlaceholderEditor;
exports.WorkspaceTrustRequiredPlaceholderEditor = WorkspaceTrustRequiredPlaceholderEditor;