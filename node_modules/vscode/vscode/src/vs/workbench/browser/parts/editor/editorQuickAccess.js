const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {} = require('./media/editorquickaccess.css.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  quickPickItemScorerAccessor
} = require('../../../../platform/quickinput/common/quickInput.js');
const {
  PickerQuickAccessProvider,
  TriggerAction
} = require('../../../../platform/quickinput/browser/pickerQuickAccess.js');
const {
  IEditorGroupsService
} = require('../../../services/editor/common/editorGroupsService.service.js');
const {
  EditorResourceAccessor,
  SideBySideEditor
} = require('../../../common/editor.js');
const {
  IEditorService
} = require('../../../services/editor/common/editorService.service.js');
const {
  IModelService
} = require('../../../../editor/common/services/model.js');
const {
  ILanguageService
} = require('../../../../editor/common/languages/language.js');
const {
  getIconClasses
} = require('../../../../editor/common/services/getIconClasses.js');
const {
  prepareQuery,
  scoreItemFuzzy,
  compareItemsByFuzzyScore
} = require('../../../../base/common/fuzzyScorer.js');
const {
  Codicon
} = require('../../../../base/common/codicons.js');
const {
  ThemeIcon
} = require('../../../../base/common/themables.js');
var ActiveGroupEditorsByMostRecentlyUsedQuickAccess_1, AllEditorsByAppearanceQuickAccess_1, AllEditorsByMostRecentlyUsedQuickAccess_1;
const _moduleId = "vs/workbench/browser/parts/editor/editorQuickAccess";
let BaseEditorQuickAccessProvider = class BaseEditorQuickAccessProvider extends PickerQuickAccessProvider {
  constructor(prefix, editorGroupService, editorService, modelService, languageService) {
    super(prefix, {
      canAcceptInBackground: true,
      noResultsPick: {
        label: localizeWithPath(_moduleId, 0, "No matching editors"),
        groupId: -1
      }
    });
    this.editorGroupService = editorGroupService;
    this.editorService = editorService;
    this.modelService = modelService;
    this.languageService = languageService;
    this.pickState = new class {
      constructor() {
        this.scorerCache = Object.create(null);
        this.isQuickNavigating = undefined;
      }
      reset(isQuickNavigating) {
        if (!isQuickNavigating) {
          this.scorerCache = Object.create(null);
        }
        this.isQuickNavigating = isQuickNavigating;
      }
    }();
  }
  provide(picker, token) {
    this.pickState.reset(!!picker.quickNavigate);
    return super.provide(picker, token);
  }
  _getPicks(filter) {
    const query = prepareQuery(filter);
    const filteredEditorEntries = this.doGetEditorPickItems().filter(entry => {
      if (!query.normalized) {
        return true;
      }
      const itemScore = scoreItemFuzzy(entry, query, true, quickPickItemScorerAccessor, this.pickState.scorerCache);
      if (!itemScore.score) {
        return false;
      }
      entry.highlights = {
        label: itemScore.labelMatch,
        description: itemScore.descriptionMatch
      };
      return true;
    });
    if (query.normalized) {
      const groups = this.editorGroupService.getGroups(2).map(group => group.id);
      filteredEditorEntries.sort((entryA, entryB) => {
        if (entryA.groupId !== entryB.groupId) {
          return groups.indexOf(entryA.groupId) - groups.indexOf(entryB.groupId);
        }
        return compareItemsByFuzzyScore(entryA, entryB, query, true, quickPickItemScorerAccessor, this.pickState.scorerCache);
      });
    }
    const filteredEditorEntriesWithSeparators = [];
    if (this.editorGroupService.count > 1) {
      let lastGroupId = undefined;
      for (const entry of filteredEditorEntries) {
        if (typeof lastGroupId !== 'number' || lastGroupId !== entry.groupId) {
          const group = this.editorGroupService.getGroup(entry.groupId);
          if (group) {
            filteredEditorEntriesWithSeparators.push({
              type: 'separator',
              label: group.label
            });
          }
          lastGroupId = entry.groupId;
        }
        filteredEditorEntriesWithSeparators.push(entry);
      }
    } else {
      filteredEditorEntriesWithSeparators.push(...filteredEditorEntries);
    }
    return filteredEditorEntriesWithSeparators;
  }
  doGetEditorPickItems() {
    const editors = this.doGetEditors();
    const mapGroupIdToGroupAriaLabel = new Map();
    for (const {
      groupId
    } of editors) {
      if (!mapGroupIdToGroupAriaLabel.has(groupId)) {
        const group = this.editorGroupService.getGroup(groupId);
        if (group) {
          mapGroupIdToGroupAriaLabel.set(groupId, group.ariaLabel);
        }
      }
    }
    return this.doGetEditors().map(({
      editor,
      groupId
    }) => {
      const resource = EditorResourceAccessor.getOriginalUri(editor, {
        supportSideBySide: SideBySideEditor.PRIMARY
      });
      const isDirty = editor.isDirty() && !editor.isSaving();
      const description = editor.getDescription();
      const nameAndDescription = description ? `${editor.getName()} ${description}` : editor.getName();
      return {
        groupId,
        resource,
        label: editor.getName(),
        ariaLabel: (() => {
          if (mapGroupIdToGroupAriaLabel.size > 1) {
            return isDirty ? localizeWithPath(_moduleId, 1, "{0}, unsaved changes, {1}", nameAndDescription, mapGroupIdToGroupAriaLabel.get(groupId)) : localizeWithPath(_moduleId, 2, "{0}, {1}", nameAndDescription, mapGroupIdToGroupAriaLabel.get(groupId));
          }
          return isDirty ? localizeWithPath(_moduleId, 3, "{0}, unsaved changes", nameAndDescription) : nameAndDescription;
        })(),
        description,
        iconClasses: getIconClasses(this.modelService, this.languageService, resource, undefined, editor.getIcon()).concat(editor.getLabelExtraClasses()),
        italic: !this.editorGroupService.getGroup(groupId)?.isPinned(editor),
        buttons: (() => {
          return [{
            iconClass: isDirty ? 'dirty-editor ' + ThemeIcon.asClassName(Codicon.closeDirty) : ThemeIcon.asClassName(Codicon.close),
            tooltip: localizeWithPath(_moduleId, 4, "Close Editor"),
            alwaysVisible: isDirty
          }];
        })(),
        trigger: async () => {
          const group = this.editorGroupService.getGroup(groupId);
          if (group) {
            await group.closeEditor(editor, {
              preserveFocus: true
            });
            if (!group.contains(editor)) {
              return TriggerAction.REMOVE_ITEM;
            }
          }
          return TriggerAction.NO_ACTION;
        },
        accept: (keyMods, event) => this.editorGroupService.getGroup(groupId)?.openEditor(editor, {
          preserveFocus: event.inBackground
        })
      };
    });
  }
};
BaseEditorQuickAccessProvider = __decorate([__param(1, IEditorGroupsService), __param(2, IEditorService), __param(3, IModelService), __param(4, ILanguageService)], BaseEditorQuickAccessProvider);
let ActiveGroupEditorsByMostRecentlyUsedQuickAccess = class ActiveGroupEditorsByMostRecentlyUsedQuickAccess extends BaseEditorQuickAccessProvider {
  static {
    ActiveGroupEditorsByMostRecentlyUsedQuickAccess_1 = this;
  }
  static {
    this.PREFIX = 'edt active ';
  }
  constructor(editorGroupService, editorService, modelService, languageService) {
    super(ActiveGroupEditorsByMostRecentlyUsedQuickAccess_1.PREFIX, editorGroupService, editorService, modelService, languageService);
  }
  doGetEditors() {
    const group = this.editorGroupService.activeGroup;
    return group.getEditors(0).map(editor => ({
      editor,
      groupId: group.id
    }));
  }
};
ActiveGroupEditorsByMostRecentlyUsedQuickAccess = ActiveGroupEditorsByMostRecentlyUsedQuickAccess_1 = __decorate([__param(0, IEditorGroupsService), __param(1, IEditorService), __param(2, IModelService), __param(3, ILanguageService)], ActiveGroupEditorsByMostRecentlyUsedQuickAccess);
let AllEditorsByAppearanceQuickAccess = class AllEditorsByAppearanceQuickAccess extends BaseEditorQuickAccessProvider {
  static {
    AllEditorsByAppearanceQuickAccess_1 = this;
  }
  static {
    this.PREFIX = 'edt ';
  }
  constructor(editorGroupService, editorService, modelService, languageService) {
    super(AllEditorsByAppearanceQuickAccess_1.PREFIX, editorGroupService, editorService, modelService, languageService);
  }
  doGetEditors() {
    const entries = [];
    for (const group of this.editorGroupService.getGroups(2)) {
      for (const editor of group.getEditors(1)) {
        entries.push({
          editor,
          groupId: group.id
        });
      }
    }
    return entries;
  }
};
AllEditorsByAppearanceQuickAccess = AllEditorsByAppearanceQuickAccess_1 = __decorate([__param(0, IEditorGroupsService), __param(1, IEditorService), __param(2, IModelService), __param(3, ILanguageService)], AllEditorsByAppearanceQuickAccess);
let AllEditorsByMostRecentlyUsedQuickAccess = class AllEditorsByMostRecentlyUsedQuickAccess extends BaseEditorQuickAccessProvider {
  static {
    AllEditorsByMostRecentlyUsedQuickAccess_1 = this;
  }
  static {
    this.PREFIX = 'edt mru ';
  }
  constructor(editorGroupService, editorService, modelService, languageService) {
    super(AllEditorsByMostRecentlyUsedQuickAccess_1.PREFIX, editorGroupService, editorService, modelService, languageService);
  }
  doGetEditors() {
    const entries = [];
    for (const editor of this.editorService.getEditors(0)) {
      entries.push(editor);
    }
    return entries;
  }
};
AllEditorsByMostRecentlyUsedQuickAccess = AllEditorsByMostRecentlyUsedQuickAccess_1 = __decorate([__param(0, IEditorGroupsService), __param(1, IEditorService), __param(2, IModelService), __param(3, ILanguageService)], AllEditorsByMostRecentlyUsedQuickAccess);
exports.ActiveGroupEditorsByMostRecentlyUsedQuickAccess = ActiveGroupEditorsByMostRecentlyUsedQuickAccess;
exports.AllEditorsByAppearanceQuickAccess = AllEditorsByAppearanceQuickAccess;
exports.AllEditorsByMostRecentlyUsedQuickAccess = AllEditorsByMostRecentlyUsedQuickAccess;
exports.BaseEditorQuickAccessProvider = BaseEditorQuickAccessProvider;