const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  assertIsDefined
} = require('../../../../base/common/types.js');
const {
  applyTextEditorOptions
} = require('../../../common/editor/editorOptions.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  isEqual
} = require('../../../../base/common/resources.js');
const {
  CodeEditorWidget
} = require('../../../../editor/browser/widget/codeEditor/codeEditorWidget.js');
const {} = require('../../../../../../../override/vs/workbench/browser/parts/editor/textEditor.js');
const {
  AbstractTextEditor
} = require('./textEditor.js');
const _moduleId = "vs/workbench/browser/parts/editor/textCodeEditor";
class AbstractTextCodeEditor extends AbstractTextEditor {
  constructor() {
    super(...arguments);
    this.editorControl = undefined;
  }
  get scopedContextKeyService() {
    return this.editorControl?.invokeWithinContext(accessor => accessor.get(IContextKeyService));
  }
  getTitle() {
    if (this.input) {
      return this.input.getName();
    }
    return localizeWithPath(_moduleId, 0, "Text Editor");
  }
  createEditorControl(parent, initialOptions) {
    this.editorControl = this._register(this.instantiationService.createInstance(CodeEditorWidget, parent, initialOptions, this.getCodeEditorWidgetOptions()));
  }
  getCodeEditorWidgetOptions() {
    return Object.create(null);
  }
  updateEditorControlOptions(options) {
    this.editorControl?.updateOptions(options);
  }
  getMainControl() {
    return this.editorControl;
  }
  getControl() {
    return this.editorControl;
  }
  computeEditorViewState(resource) {
    if (!this.editorControl) {
      return undefined;
    }
    const model = this.editorControl.getModel();
    if (!model) {
      return undefined;
    }
    const modelUri = model.uri;
    if (!modelUri) {
      return undefined;
    }
    if (!isEqual(modelUri, resource)) {
      return undefined;
    }
    return this.editorControl.saveViewState() ?? undefined;
  }
  setOptions(options) {
    super.setOptions(options);
    if (options) {
      applyTextEditorOptions(options, assertIsDefined(this.editorControl), 0);
    }
  }
  focus() {
    super.focus();
    this.editorControl?.focus();
  }
  hasFocus() {
    return this.editorControl?.hasTextFocus() || super.hasFocus();
  }
  setEditorVisible(visible) {
    super.setEditorVisible(visible);
    if (visible) {
      this.editorControl?.onVisible();
    } else {
      this.editorControl?.onHide();
    }
  }
  layout(dimension) {
    this.editorControl?.layout(dimension);
  }
}
exports.AbstractTextCodeEditor = AbstractTextCodeEditor;