const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  observableValue
} = require('../../../../base/common/observableInternal/base.js');
const {
  derivedWithStore,
  derived
} = require('../../../../base/common/observableInternal/derived.js');
const {} = require('../../../../base/common/observableInternal/autorun.js');
const {
  recomputeInitiallyAndOnChange
} = require('../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../base/common/cancellation.js');
const {} = require('../../../../base/common/arrays.js');
const {
  readHotReloadableExport
} = require('../diffEditor/utils.js');
const {
  MultiDiffEditorWidgetImpl
} = require('./multiDiffEditorWidgetImpl.js');
const {
  MultiDiffEditorViewModel
} = require('./multiDiffEditorViewModel.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {} = require('./colors.js');
const {
  DiffEditorItemTemplate
} = require('./diffEditorItemTemplate.js');
const {
  Event
} = require('../../../../base/common/event.js');
let MultiDiffEditorWidget = class MultiDiffEditorWidget extends Disposable {
  constructor(_element, _workbenchUIElementFactory, _instantiationService) {
    super();
    this._element = _element;
    this._workbenchUIElementFactory = _workbenchUIElementFactory;
    this._instantiationService = _instantiationService;
    this._dimension = observableValue(this, undefined);
    this._viewModel = observableValue(this, undefined);
    this._widgetImpl = derivedWithStore(this, (reader, store) => {
      readHotReloadableExport(DiffEditorItemTemplate, reader);
      return store.add(this._instantiationService.createInstance(readHotReloadableExport(MultiDiffEditorWidgetImpl, reader), this._element, this._dimension, this._viewModel, this._workbenchUIElementFactory));
    });
    this._activeControl = derived(this, reader => this._widgetImpl.read(reader).activeControl.read(reader));
    this.onDidChangeActiveControl = Event.fromObservableLight(this._activeControl);
    this._register(recomputeInitiallyAndOnChange(this._widgetImpl));
  }
  reveal(resource, options) {
    this._widgetImpl.get().reveal(resource, options);
  }
  createViewModel(model) {
    return new MultiDiffEditorViewModel(model, this._instantiationService);
  }
  setViewModel(viewModel) {
    this._viewModel.set(viewModel, undefined);
  }
  layout(dimension) {
    this._dimension.set(dimension, undefined);
  }
  getActiveControl() {
    return this._activeControl.get();
  }
  getViewState() {
    return this._widgetImpl.get().getViewState();
  }
  setViewState(viewState) {
    this._widgetImpl.get().setViewState(viewState);
  }
  tryGetCodeEditor(resource) {
    return this._widgetImpl.get().tryGetCodeEditor(resource);
  }
};
MultiDiffEditorWidget = __decorate([__param(2, IInstantiationService)], MultiDiffEditorWidget);
exports.MultiDiffEditorWidget = MultiDiffEditorWidget;