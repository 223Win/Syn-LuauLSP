const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  mixin
} = require('../../../../base/common/objects.js');
const {
  ICodeEditorService
} = require('../../services/codeEditorService.js');
const {
  DiffEditorWidget
} = require('./diffEditorWidget.js');
const {
  IAccessibilitySignalService
} = require('../../../../platform/accessibilitySignal/browser/accessibilitySignalService.service.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  IEditorProgressService
} = require('../../../../platform/progress/common/progress.service.js');
let EmbeddedDiffEditorWidget = class EmbeddedDiffEditorWidget extends DiffEditorWidget {
  constructor(domElement, options, codeEditorWidgetOptions, parentEditor, contextKeyService, instantiationService, codeEditorService, accessibilitySignalService, editorProgressService) {
    super(domElement, parentEditor.getRawOptions(), codeEditorWidgetOptions, contextKeyService, instantiationService, codeEditorService, accessibilitySignalService, editorProgressService);
    this._parentEditor = parentEditor;
    this._overwriteOptions = options;
    super.updateOptions(this._overwriteOptions);
    this._register(parentEditor.onDidChangeConfiguration(e => this._onParentConfigurationChanged(e)));
  }
  getParentEditor() {
    return this._parentEditor;
  }
  _onParentConfigurationChanged(e) {
    super.updateOptions(this._parentEditor.getRawOptions());
    super.updateOptions(this._overwriteOptions);
  }
  updateOptions(newOptions) {
    mixin(this._overwriteOptions, newOptions, true);
    super.updateOptions(this._overwriteOptions);
  }
};
EmbeddedDiffEditorWidget = __decorate([__param(4, IContextKeyService), __param(5, IInstantiationService), __param(6, ICodeEditorService), __param(7, IAccessibilitySignalService), __param(8, IEditorProgressService)], EmbeddedDiffEditorWidget);
exports.EmbeddedDiffEditorWidget = EmbeddedDiffEditorWidget;