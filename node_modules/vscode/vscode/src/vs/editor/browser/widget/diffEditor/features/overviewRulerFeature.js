const {
  __decorate,
  __param
} = require('../../../../../../../../external/tslib/tslib.es6.js');
const {
  h,
  addStandardDisposableListener,
  addDisposableListener,
  EventType
} = require('../../../../../base/browser/dom.js');
const {
  createFastDomNode
} = require('../../../../../base/browser/fastDomNode.js');
const {
  ScrollbarState
} = require('../../../../../base/browser/ui/scrollbar/scrollbarState.js');
const {
  Disposable
} = require('../../../../../base/common/lifecycle.js');
const {} = require('../../../../../base/common/arrays.js');
const {
  derived
} = require('../../../../../base/common/observableInternal/derived.js');
const {
  autorunWithStore,
  autorun
} = require('../../../../../base/common/observableInternal/autorun.js');
const {
  observableFromEvent,
  observableSignalFromEvent
} = require('../../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../../base/common/cancellation.js');
const {
  appendRemoveOnDispose
} = require('../utils.js');
const {
  Position
} = require('../../../../common/core/position.js');
const {
  OverviewRulerZone
} = require('../../../../common/viewModel/overviewZoneManager.js');
const {} = require('../../../../../platform/theme/common/colorUtils.js');
const {} = require('../../../../../platform/theme/common/colors/baseColors.js');
const {} = require('../../../../../platform/theme/common/colors/chartsColors.js');
const {
  diffOverviewRulerInserted,
  diffInserted,
  defaultInsertColor,
  diffOverviewRulerRemoved,
  diffRemoved,
  defaultRemoveColor
} = require('../../../../../platform/theme/common/colors/editorColors.js');
const {} = require('../../../../../platform/theme/common/colors/inputColors.js');
const {} = require('../../../../../platform/theme/common/colors/listColors.js');
const {} = require('../../../../../platform/theme/common/colors/menuColors.js');
const {} = require('../../../../../platform/theme/common/colors/minimapColors.js');
const {} = require('../../../../../platform/theme/common/colors/miscColors.js');
const {} = require('../../../../../platform/theme/common/colors/quickpickColors.js');
const {} = require('../../../../../platform/theme/common/colors/searchColors.js');
const {
  IThemeService
} = require('../../../../../platform/theme/common/themeService.service.js');
var OverviewRulerFeature_1;
let OverviewRulerFeature = class OverviewRulerFeature extends Disposable {
  static {
    OverviewRulerFeature_1 = this;
  }
  static {
    this.ONE_OVERVIEW_WIDTH = 15;
  }
  static {
    this.ENTIRE_DIFF_OVERVIEW_WIDTH = OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH * 2;
  }
  constructor(_editors, _rootElement, _diffModel, _rootWidth, _rootHeight, _modifiedEditorLayoutInfo, _themeService) {
    super();
    this._editors = _editors;
    this._rootElement = _rootElement;
    this._diffModel = _diffModel;
    this._rootWidth = _rootWidth;
    this._rootHeight = _rootHeight;
    this._modifiedEditorLayoutInfo = _modifiedEditorLayoutInfo;
    this._themeService = _themeService;
    this.width = OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH;
    const currentColorTheme = observableFromEvent(this._themeService.onDidColorThemeChange, () => this._themeService.getColorTheme());
    const currentColors = derived(reader => {
      const theme = currentColorTheme.read(reader);
      const insertColor = theme.getColor(diffOverviewRulerInserted) || (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);
      const removeColor = theme.getColor(diffOverviewRulerRemoved) || (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);
      return {
        insertColor,
        removeColor
      };
    });
    const viewportDomElement = createFastDomNode(document.createElement('div'));
    viewportDomElement.setClassName('diffViewport');
    viewportDomElement.setPosition('absolute');
    const diffOverviewRoot = h('div.diffOverview', {
      style: {
        position: 'absolute',
        top: '0px',
        width: OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px'
      }
    }).root;
    this._register(appendRemoveOnDispose(diffOverviewRoot, viewportDomElement.domNode));
    this._register(addStandardDisposableListener(diffOverviewRoot, EventType.POINTER_DOWN, e => {
      this._editors.modified.delegateVerticalScrollbarPointerDown(e);
    }));
    this._register(addDisposableListener(diffOverviewRoot, EventType.MOUSE_WHEEL, e => {
      this._editors.modified.delegateScrollFromMouseWheelEvent(e);
    }, {
      passive: false
    }));
    this._register(appendRemoveOnDispose(this._rootElement, diffOverviewRoot));
    this._register(autorunWithStore((reader, store) => {
      const m = this._diffModel.read(reader);
      const originalOverviewRuler = this._editors.original.createOverviewRuler('original diffOverviewRuler');
      if (originalOverviewRuler) {
        store.add(originalOverviewRuler);
        store.add(appendRemoveOnDispose(diffOverviewRoot, originalOverviewRuler.getDomNode()));
      }
      const modifiedOverviewRuler = this._editors.modified.createOverviewRuler('modified diffOverviewRuler');
      if (modifiedOverviewRuler) {
        store.add(modifiedOverviewRuler);
        store.add(appendRemoveOnDispose(diffOverviewRoot, modifiedOverviewRuler.getDomNode()));
      }
      if (!originalOverviewRuler || !modifiedOverviewRuler) {
        return;
      }
      const origViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.original.onDidChangeViewZones);
      const modViewZonesChanged = observableSignalFromEvent('viewZoneChanged', this._editors.modified.onDidChangeViewZones);
      const origHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.original.onDidChangeHiddenAreas);
      const modHiddenRangesChanged = observableSignalFromEvent('hiddenRangesChanged', this._editors.modified.onDidChangeHiddenAreas);
      store.add(autorun(reader => {
        origViewZonesChanged.read(reader);
        modViewZonesChanged.read(reader);
        origHiddenRangesChanged.read(reader);
        modHiddenRangesChanged.read(reader);
        const colors = currentColors.read(reader);
        const diff = m?.diff.read(reader)?.mappings;
        function createZones(ranges, color, editor) {
          const vm = editor._getViewModel();
          if (!vm) {
            return [];
          }
          return ranges.filter(d => d.length > 0).map(r => {
            const start = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.startLineNumber, 1));
            const end = vm.coordinatesConverter.convertModelPositionToViewPosition(new Position(r.endLineNumberExclusive, 1));
            const lineCount = end.lineNumber - start.lineNumber;
            return new OverviewRulerZone(start.lineNumber, end.lineNumber, lineCount, color.toString());
          });
        }
        const originalZones = createZones((diff || []).map(d => d.lineRangeMapping.original), colors.removeColor, this._editors.original);
        const modifiedZones = createZones((diff || []).map(d => d.lineRangeMapping.modified), colors.insertColor, this._editors.modified);
        originalOverviewRuler?.setZones(originalZones);
        modifiedOverviewRuler?.setZones(modifiedZones);
      }));
      store.add(autorun(reader => {
        const height = this._rootHeight.read(reader);
        const width = this._rootWidth.read(reader);
        const layoutInfo = this._modifiedEditorLayoutInfo.read(reader);
        if (layoutInfo) {
          const freeSpace = OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH;
          originalOverviewRuler.setLayout({
            top: 0,
            height: height,
            right: freeSpace + OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH,
            width: OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH
          });
          modifiedOverviewRuler.setLayout({
            top: 0,
            height: height,
            right: 0,
            width: OverviewRulerFeature_1.ONE_OVERVIEW_WIDTH
          });
          const scrollTop = this._editors.modifiedScrollTop.read(reader);
          const scrollHeight = this._editors.modifiedScrollHeight.read(reader);
          const scrollBarOptions = this._editors.modified.getOption(103);
          const state = new ScrollbarState(scrollBarOptions.verticalHasArrows ? scrollBarOptions.arrowSize : 0, scrollBarOptions.verticalScrollbarSize, 0, layoutInfo.height, scrollHeight, scrollTop);
          viewportDomElement.setTop(state.getSliderPosition());
          viewportDomElement.setHeight(state.getSliderSize());
        } else {
          viewportDomElement.setTop(0);
          viewportDomElement.setHeight(0);
        }
        diffOverviewRoot.style.height = height + 'px';
        diffOverviewRoot.style.left = width - OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';
        viewportDomElement.setWidth(OverviewRulerFeature_1.ENTIRE_DIFF_OVERVIEW_WIDTH);
      }));
    }));
  }
};
OverviewRulerFeature = OverviewRulerFeature_1 = __decorate([__param(6, IThemeService)], OverviewRulerFeature);
exports.OverviewRulerFeature = OverviewRulerFeature;