const {
  Sash
} = require('../../../../../base/browser/ui/sash/sash.js');
const {
  Disposable
} = require('../../../../../base/common/lifecycle.js');
const {
  observableValue
} = require('../../../../../base/common/observableInternal/base.js');
const {
  derived
} = require('../../../../../base/common/observableInternal/derived.js');
const {
  autorun
} = require('../../../../../base/common/observableInternal/autorun.js');
const {} = require('../../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../../base/common/cancellation.js');
const {} = require('../../../../../base/common/arrays.js');
class DiffEditorSash extends Disposable {
  constructor(_options, _domNode, _dimensions, _sashes) {
    super();
    this._options = _options;
    this._domNode = _domNode;
    this._dimensions = _dimensions;
    this._sashes = _sashes;
    this._sashRatio = observableValue(this, undefined);
    this.sashLeft = derived(this, reader => {
      const ratio = this._sashRatio.read(reader) ?? this._options.splitViewDefaultRatio.read(reader);
      return this._computeSashLeft(ratio, reader);
    });
    this._sash = this._register(new Sash(this._domNode, {
      getVerticalSashTop: _sash => 0,
      getVerticalSashLeft: _sash => this.sashLeft.get(),
      getVerticalSashHeight: _sash => this._dimensions.height.get()
    }, {
      orientation: 0
    }));
    this._startSashPosition = undefined;
    this._register(this._sash.onDidStart(() => {
      this._startSashPosition = this.sashLeft.get();
    }));
    this._register(this._sash.onDidChange(e => {
      const contentWidth = this._dimensions.width.get();
      const sashPosition = this._computeSashLeft((this._startSashPosition + (e.currentX - e.startX)) / contentWidth, undefined);
      this._sashRatio.set(sashPosition / contentWidth, undefined);
    }));
    this._register(this._sash.onDidEnd(() => this._sash.layout()));
    this._register(this._sash.onDidReset(() => this._sashRatio.set(undefined, undefined)));
    this._register(autorun(reader => {
      const sashes = this._sashes.read(reader);
      if (sashes) {
        this._sash.orthogonalEndSash = sashes.bottom;
      }
    }));
    this._register(autorun(reader => {
      const enabled = this._options.enableSplitViewResizing.read(reader);
      this._sash.state = enabled ? 3 : 0;
      this.sashLeft.read(reader);
      this._dimensions.height.read(reader);
      this._sash.layout();
    }));
  }
  _computeSashLeft(desiredRatio, reader) {
    const contentWidth = this._dimensions.width.read(reader);
    const midPoint = Math.floor(this._options.splitViewDefaultRatio.read(reader) * contentWidth);
    const sashLeft = this._options.enableSplitViewResizing.read(reader) ? Math.floor(desiredRatio * contentWidth) : midPoint;
    const MINIMUM_EDITOR_WIDTH = 100;
    if (contentWidth <= MINIMUM_EDITOR_WIDTH * 2) {
      return midPoint;
    }
    if (sashLeft < MINIMUM_EDITOR_WIDTH) {
      return MINIMUM_EDITOR_WIDTH;
    }
    if (sashLeft > contentWidth - MINIMUM_EDITOR_WIDTH) {
      return contentWidth - MINIMUM_EDITOR_WIDTH;
    }
    return sashLeft;
  }
}
exports.DiffEditorSash = DiffEditorSash;