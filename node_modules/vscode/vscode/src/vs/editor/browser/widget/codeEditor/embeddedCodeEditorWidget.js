const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  mixin
} = require('../../../../base/common/objects.js');
const {
  ICodeEditorService
} = require('../../services/codeEditorService.js');
const {
  CodeEditorWidget
} = require('./codeEditorWidget.js');
const {
  ILanguageConfigurationService
} = require('../../../common/languages/languageConfigurationRegistry.js');
const {
  ILanguageFeaturesService
} = require('../../../common/services/languageFeatures.js');
const {
  IAccessibilityService
} = require('../../../../platform/accessibility/common/accessibility.service.js');
const {
  ICommandService
} = require('../../../../platform/commands/common/commands.service.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  INotificationService
} = require('../../../../platform/notification/common/notification.service.js');
const {
  IThemeService
} = require('../../../../platform/theme/common/themeService.service.js');
let EmbeddedCodeEditorWidget = class EmbeddedCodeEditorWidget extends CodeEditorWidget {
  constructor(domElement, options, codeEditorWidgetOptions, parentEditor, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService) {
    super(domElement, {
      ...parentEditor.getRawOptions(),
      overflowWidgetsDomNode: parentEditor.getOverflowWidgetsDomNode()
    }, codeEditorWidgetOptions, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService, languageConfigurationService, languageFeaturesService);
    this._parentEditor = parentEditor;
    this._overwriteOptions = options;
    super.updateOptions(this._overwriteOptions);
    this._register(parentEditor.onDidChangeConfiguration(e => this._onParentConfigurationChanged(e)));
  }
  getParentEditor() {
    return this._parentEditor;
  }
  _onParentConfigurationChanged(e) {
    super.updateOptions(this._parentEditor.getRawOptions());
    super.updateOptions(this._overwriteOptions);
  }
  updateOptions(newOptions) {
    mixin(this._overwriteOptions, newOptions, true);
    super.updateOptions(this._overwriteOptions);
  }
};
EmbeddedCodeEditorWidget = __decorate([__param(4, IInstantiationService), __param(5, ICodeEditorService), __param(6, ICommandService), __param(7, IContextKeyService), __param(8, IThemeService), __param(9, INotificationService), __param(10, IAccessibilityService), __param(11, ILanguageConfigurationService), __param(12, ILanguageFeaturesService)], EmbeddedCodeEditorWidget);
exports.EmbeddedCodeEditorWidget = EmbeddedCodeEditorWidget;