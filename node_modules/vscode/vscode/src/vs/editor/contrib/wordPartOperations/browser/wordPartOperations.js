const {
  registerEditorCommand
} = require('../../../browser/editorExtensions.js');
const {
  WordPartOperations
} = require('../../../common/cursor/cursorWordOperations.js');
const {
  Range
} = require('../../../common/core/range.js');
const {
  EditorContextKeys
} = require('../../../common/editorContextKeys.js');
const {
  DeleteWordCommand,
  MoveWordCommand
} = require('../../wordOperations/browser/wordOperations.js');
const {
  CommandsRegistry
} = require('../../../../platform/commands/common/commands.js');
class DeleteWordPartLeft extends DeleteWordCommand {
  constructor() {
    super({
      whitespaceHeuristics: true,
      wordNavigationType: 0,
      id: 'deleteWordPartLeft',
      precondition: EditorContextKeys.writable,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256 | 512 | 1
        },
        weight: 100
      }
    });
  }
  _delete(ctx, wordNavigationType) {
    const r = WordPartOperations.deleteWordPartLeft(ctx);
    if (r) {
      return r;
    }
    return new Range(1, 1, 1, 1);
  }
}
class DeleteWordPartRight extends DeleteWordCommand {
  constructor() {
    super({
      whitespaceHeuristics: true,
      wordNavigationType: 2,
      id: 'deleteWordPartRight',
      precondition: EditorContextKeys.writable,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256 | 512 | 20
        },
        weight: 100
      }
    });
  }
  _delete(ctx, wordNavigationType) {
    const r = WordPartOperations.deleteWordPartRight(ctx);
    if (r) {
      return r;
    }
    const lineCount = ctx.model.getLineCount();
    const maxColumn = ctx.model.getLineMaxColumn(lineCount);
    return new Range(lineCount, maxColumn, lineCount, maxColumn);
  }
}
class WordPartLeftCommand extends MoveWordCommand {
  _move(wordSeparators, model, position, wordNavigationType) {
    return WordPartOperations.moveWordPartLeft(wordSeparators, model, position);
  }
}
class CursorWordPartLeft extends WordPartLeftCommand {
  constructor() {
    super({
      inSelectionMode: false,
      wordNavigationType: 0,
      id: 'cursorWordPartLeft',
      precondition: undefined,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256 | 512 | 15
        },
        weight: 100
      }
    });
  }
}
CommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');
class CursorWordPartLeftSelect extends WordPartLeftCommand {
  constructor() {
    super({
      inSelectionMode: true,
      wordNavigationType: 0,
      id: 'cursorWordPartLeftSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256 | 512 | 1024 | 15
        },
        weight: 100
      }
    });
  }
}
CommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');
class WordPartRightCommand extends MoveWordCommand {
  _move(wordSeparators, model, position, wordNavigationType) {
    return WordPartOperations.moveWordPartRight(wordSeparators, model, position);
  }
}
class CursorWordPartRight extends WordPartRightCommand {
  constructor() {
    super({
      inSelectionMode: false,
      wordNavigationType: 2,
      id: 'cursorWordPartRight',
      precondition: undefined,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256 | 512 | 17
        },
        weight: 100
      }
    });
  }
}
class CursorWordPartRightSelect extends WordPartRightCommand {
  constructor() {
    super({
      inSelectionMode: true,
      wordNavigationType: 2,
      id: 'cursorWordPartRightSelect',
      precondition: undefined,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 0,
        mac: {
          primary: 256 | 512 | 1024 | 17
        },
        weight: 100
      }
    });
  }
}
registerEditorCommand(new DeleteWordPartLeft());
registerEditorCommand(new DeleteWordPartRight());
registerEditorCommand(new CursorWordPartLeft());
registerEditorCommand(new CursorWordPartLeftSelect());
registerEditorCommand(new CursorWordPartRight());
registerEditorCommand(new CursorWordPartRightSelect());
exports.CursorWordPartLeft = CursorWordPartLeft;
exports.CursorWordPartLeftSelect = CursorWordPartLeftSelect;
exports.CursorWordPartRight = CursorWordPartRight;
exports.CursorWordPartRightSelect = CursorWordPartRightSelect;
exports.DeleteWordPartLeft = DeleteWordPartLeft;
exports.DeleteWordPartRight = DeleteWordPartRight;
exports.WordPartLeftCommand = WordPartLeftCommand;
exports.WordPartRightCommand = WordPartRightCommand;