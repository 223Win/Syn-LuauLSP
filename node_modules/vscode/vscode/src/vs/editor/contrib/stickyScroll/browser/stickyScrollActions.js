const {
  EditorAction2
} = require('../../../browser/editorExtensions.js');
const {
  localize2WithPath,
  localizeWithPath
} = require('../../../../nls.js');
const {
  Categories
} = require('../../../../platform/action/common/actionCommonCategories.js');
const {
  Action2,
  MenuId
} = require('../../../../platform/actions/common/actions.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {
  ContextKeyExpr
} = require('../../../../platform/contextkey/common/contextkey.js');
const {
  EditorContextKeys
} = require('../../../common/editorContextKeys.js');
const {
  StickyScrollController
} = require('./stickyScrollController.js');
const _moduleId = "vs/editor/contrib/stickyScroll/browser/stickyScrollActions";
class ToggleStickyScroll extends Action2 {
  constructor() {
    super({
      id: 'editor.action.toggleStickyScroll',
      title: {
        ...localize2WithPath(_moduleId, 0, "Toggle Editor Sticky Scroll"),
        mnemonicTitle: localizeWithPath(_moduleId, 1, "&&Toggle Editor Sticky Scroll")
      },
      metadata: {
        description: localize2WithPath(_moduleId, 2, "Toggle/enable the editor sticky scroll which shows the nested scopes at the top of the viewport")
      },
      category: Categories.View,
      toggled: {
        condition: ContextKeyExpr.equals('config.editor.stickyScroll.enabled', true),
        title: localizeWithPath(_moduleId, 3, "Sticky Scroll"),
        mnemonicTitle: localizeWithPath(_moduleId, 4, "&&Sticky Scroll")
      },
      menu: [{
        id: MenuId.CommandPalette
      }, {
        id: MenuId.MenubarAppearanceMenu,
        group: '4_editor',
        order: 3
      }, {
        id: MenuId.StickyScrollContext
      }]
    });
  }
  async run(accessor) {
    const configurationService = accessor.get(IConfigurationService);
    const newValue = !configurationService.getValue('editor.stickyScroll.enabled');
    return configurationService.updateValue('editor.stickyScroll.enabled', newValue);
  }
}
const weight = 100;
class FocusStickyScroll extends EditorAction2 {
  constructor() {
    super({
      id: 'editor.action.focusStickyScroll',
      title: {
        ...localize2WithPath(_moduleId, 5, "Focus on the editor sticky scroll"),
        mnemonicTitle: localizeWithPath(_moduleId, 6, "&&Focus Sticky Scroll")
      },
      precondition: ContextKeyExpr.and(ContextKeyExpr.has('config.editor.stickyScroll.enabled'), EditorContextKeys.stickyScrollVisible),
      menu: [{
        id: MenuId.CommandPalette
      }]
    });
  }
  runEditorCommand(_accessor, editor) {
    StickyScrollController.get(editor)?.focus();
  }
}
class SelectNextStickyScrollLine extends EditorAction2 {
  constructor() {
    super({
      id: 'editor.action.selectNextStickyScrollLine',
      title: localize2WithPath(_moduleId, 7, "Select the next editor sticky scroll line"),
      precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
      keybinding: {
        weight,
        primary: 18
      }
    });
  }
  runEditorCommand(_accessor, editor) {
    StickyScrollController.get(editor)?.focusNext();
  }
}
class SelectPreviousStickyScrollLine extends EditorAction2 {
  constructor() {
    super({
      id: 'editor.action.selectPreviousStickyScrollLine',
      title: localize2WithPath(_moduleId, 8, "Select the previous sticky scroll line"),
      precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
      keybinding: {
        weight,
        primary: 16
      }
    });
  }
  runEditorCommand(_accessor, editor) {
    StickyScrollController.get(editor)?.focusPrevious();
  }
}
class GoToStickyScrollLine extends EditorAction2 {
  constructor() {
    super({
      id: 'editor.action.goToFocusedStickyScrollLine',
      title: localize2WithPath(_moduleId, 9, "Go to the focused sticky scroll line"),
      precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
      keybinding: {
        weight,
        primary: 3
      }
    });
  }
  runEditorCommand(_accessor, editor) {
    StickyScrollController.get(editor)?.goToFocused();
  }
}
class SelectEditor extends EditorAction2 {
  constructor() {
    super({
      id: 'editor.action.selectEditor',
      title: localize2WithPath(_moduleId, 10, "Select Editor"),
      precondition: EditorContextKeys.stickyScrollFocused.isEqualTo(true),
      keybinding: {
        weight,
        primary: 9
      }
    });
  }
  runEditorCommand(_accessor, editor) {
    StickyScrollController.get(editor)?.selectEditor();
  }
}
exports.FocusStickyScroll = FocusStickyScroll;
exports.GoToStickyScrollLine = GoToStickyScrollLine;
exports.SelectEditor = SelectEditor;
exports.SelectNextStickyScrollLine = SelectNextStickyScrollLine;
exports.SelectPreviousStickyScrollLine = SelectPreviousStickyScrollLine;
exports.ToggleStickyScroll = ToggleStickyScroll;