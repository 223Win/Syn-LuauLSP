const {
  registerEditorContribution,
  registerEditorCommand,
  EditorCommand
} = require('../../../browser/editorExtensions.js');
const {
  editorConfigurationBaseNode
} = require('../../../common/config/editorConfigurationSchema.js');
const {
  registerEditorFeature
} = require('../../../common/editorFeatures.js');
const {
  DefaultDropProvidersFeature
} = require('./defaultProviders.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  Extensions
} = require('../../../../platform/configuration/common/configurationRegistry.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const {
  changeDropTypeCommandId,
  dropWidgetVisibleCtx,
  DropIntoEditorController,
  defaultProviderConfig
} = require('./dropIntoEditorController.js');
const _moduleId = "vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution";
registerEditorContribution(DropIntoEditorController.ID, DropIntoEditorController, 2);
registerEditorFeature(DefaultDropProvidersFeature);
registerEditorCommand(new class extends EditorCommand {
  constructor() {
    super({
      id: changeDropTypeCommandId,
      precondition: dropWidgetVisibleCtx,
      kbOpts: {
        weight: 100,
        primary: 2048 | 89
      }
    });
  }
  runEditorCommand(_accessor, editor, _args) {
    DropIntoEditorController.get(editor)?.changeDropType();
  }
}());
registerEditorCommand(new class extends EditorCommand {
  constructor() {
    super({
      id: 'editor.hideDropWidget',
      precondition: dropWidgetVisibleCtx,
      kbOpts: {
        weight: 100,
        primary: 9
      }
    });
  }
  runEditorCommand(_accessor, editor, _args) {
    DropIntoEditorController.get(editor)?.clearWidgets();
  }
}());
Registry.as(Extensions.Configuration).registerConfiguration({
  ...editorConfigurationBaseNode,
  properties: {
    [defaultProviderConfig]: {
      type: 'object',
      scope: 5,
      description: localizeWithPath(_moduleId, 0, "Configures the default drop provider to use for content of a given mime type."),
      default: {},
      additionalProperties: {
        type: 'string'
      }
    }
  }
});