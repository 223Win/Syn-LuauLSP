const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  reverseOrder,
  compareBy,
  numberComparator
} = require('../../../../base/common/arrays.js');
const {
  observableValue
} = require('../../../../base/common/observableInternal/base.js');
const {} = require('../../../../base/common/observableInternal/derived.js');
const {
  autorunWithStore
} = require('../../../../base/common/observableInternal/autorun.js');
const {
  observableSignalFromEvent
} = require('../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../base/common/cancellation.js');
const {
  HideUnchangedRegionsFeature
} = require('../../../browser/widget/diffEditor/features/hideUnchangedRegionsFeature.js');
const {
  DisposableCancellationTokenSource
} = require('../../../browser/widget/diffEditor/utils.js');
const {
  ILanguageFeaturesService
} = require('../../../common/services/languageFeatures.js');
const {
  IOutlineModelService
} = require('../../documentSymbols/browser/outlineModel.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  Event
} = require('../../../../base/common/event.js');
let DiffEditorBreadcrumbsSource = class DiffEditorBreadcrumbsSource extends Disposable {
  constructor(_textModel, _languageFeaturesService, _outlineModelService) {
    super();
    this._textModel = _textModel;
    this._languageFeaturesService = _languageFeaturesService;
    this._outlineModelService = _outlineModelService;
    this._currentModel = observableValue(this, undefined);
    const documentSymbolProviderChanged = observableSignalFromEvent('documentSymbolProvider.onDidChange', this._languageFeaturesService.documentSymbolProvider.onDidChange);
    const textModelChanged = observableSignalFromEvent('_textModel.onDidChangeContent', Event.debounce(e => this._textModel.onDidChangeContent(e), () => undefined, 100));
    this._register(autorunWithStore(async (reader, store) => {
      documentSymbolProviderChanged.read(reader);
      textModelChanged.read(reader);
      const src = store.add(new DisposableCancellationTokenSource());
      const model = await this._outlineModelService.getOrCreate(this._textModel, src.token);
      if (store.isDisposed) {
        return;
      }
      this._currentModel.set(model, undefined);
    }));
  }
  getBreadcrumbItems(startRange, reader) {
    const m = this._currentModel.read(reader);
    if (!m) {
      return [];
    }
    const symbols = m.asListOfDocumentSymbols().filter(s => startRange.contains(s.range.startLineNumber) && !startRange.contains(s.range.endLineNumber));
    symbols.sort(reverseOrder(compareBy(s => s.range.endLineNumber - s.range.startLineNumber, numberComparator)));
    return symbols.map(s => ({
      name: s.name,
      kind: s.kind,
      startLineNumber: s.range.startLineNumber
    }));
  }
};
DiffEditorBreadcrumbsSource = __decorate([__param(1, ILanguageFeaturesService), __param(2, IOutlineModelService)], DiffEditorBreadcrumbsSource);
HideUnchangedRegionsFeature.setBreadcrumbsSourceFactory((textModel, instantiationService) => {
  return instantiationService.createInstance(DiffEditorBreadcrumbsSource, textModel);
});