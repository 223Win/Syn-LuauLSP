const {
  __decorate,
  __param
} = require('../../../../../../../../external/tslib/tslib.es6.js');
const {
  append,
  $
} = require('../../../../../base/browser/dom.js');
const {
  CountBadge
} = require('../../../../../base/browser/ui/countBadge/countBadge.js');
const {
  HighlightedLabel
} = require('../../../../../base/browser/ui/highlightedlabel/highlightedLabel.js');
const {
  IconLabel
} = require('../../../../../base/browser/ui/iconLabel/iconLabel.js');
const {
  createMatches,
  FuzzyScore
} = require('../../../../../base/common/filters.js');
const {
  Disposable
} = require('../../../../../base/common/lifecycle.js');
const {
  dirname,
  basename
} = require('../../../../../base/common/resources.js');
const {
  ITextModelService
} = require('../../../../common/services/resolverService.js');
const {
  localizeWithPath
} = require('../../../../../nls.js');
const {
  IInstantiationService
} = require('../../../../../platform/instantiation/common/instantiation.js');
const {
  IKeybindingService
} = require('../../../../../platform/keybinding/common/keybinding.service.js');
const {
  ILabelService
} = require('../../../../../platform/label/common/label.service.js');
const {
  defaultCountBadgeStyles
} = require('../../../../../platform/theme/browser/defaultStyles.js');
const {
  ReferencesModel,
  FileReferences,
  OneReference
} = require('../referencesModel.js');
var FileReferencesRenderer_1;
const _moduleId = "vs/editor/contrib/gotoSymbol/browser/peek/referencesTree";
let DataSource = class DataSource {
  constructor(_resolverService) {
    this._resolverService = _resolverService;
  }
  hasChildren(element) {
    if (element instanceof ReferencesModel) {
      return true;
    }
    if (element instanceof FileReferences) {
      return true;
    }
    return false;
  }
  getChildren(element) {
    if (element instanceof ReferencesModel) {
      return element.groups;
    }
    if (element instanceof FileReferences) {
      return element.resolve(this._resolverService).then(val => {
        return val.children;
      });
    }
    throw new Error('bad tree');
  }
};
DataSource = __decorate([__param(0, ITextModelService)], DataSource);
class Delegate {
  getHeight() {
    return 23;
  }
  getTemplateId(element) {
    if (element instanceof FileReferences) {
      return FileReferencesRenderer.id;
    } else {
      return OneReferenceRenderer.id;
    }
  }
}
let StringRepresentationProvider = class StringRepresentationProvider {
  constructor(_keybindingService) {
    this._keybindingService = _keybindingService;
  }
  getKeyboardNavigationLabel(element) {
    if (element instanceof OneReference) {
      const parts = element.parent.getPreview(element)?.preview(element.range);
      if (parts) {
        return parts.value;
      }
    }
    return basename(element.uri);
  }
  mightProducePrintableCharacter(event) {
    return this._keybindingService.mightProducePrintableCharacter(event);
  }
};
StringRepresentationProvider = __decorate([__param(0, IKeybindingService)], StringRepresentationProvider);
class IdentityProvider {
  getId(element) {
    return element instanceof OneReference ? element.id : element.uri;
  }
}
let FileReferencesTemplate = class FileReferencesTemplate extends Disposable {
  constructor(container, _labelService) {
    super();
    this._labelService = _labelService;
    const parent = document.createElement('div');
    parent.classList.add('reference-file');
    this.file = this._register(new IconLabel(parent, {
      supportHighlights: true
    }));
    this.badge = new CountBadge(append(parent, $('.count')), {}, defaultCountBadgeStyles);
    container.appendChild(parent);
  }
  set(element, matches) {
    const parent = dirname(element.uri);
    this.file.setLabel(this._labelService.getUriBasenameLabel(element.uri), this._labelService.getUriLabel(parent, {
      relative: true
    }), {
      title: this._labelService.getUriLabel(element.uri),
      matches
    });
    const len = element.children.length;
    this.badge.setCount(len);
    if (len > 1) {
      this.badge.setTitleFormat(localizeWithPath(_moduleId, 0, "{0} references", len));
    } else {
      this.badge.setTitleFormat(localizeWithPath(_moduleId, 1, "{0} reference", len));
    }
  }
};
FileReferencesTemplate = __decorate([__param(1, ILabelService)], FileReferencesTemplate);
let FileReferencesRenderer = class FileReferencesRenderer {
  static {
    FileReferencesRenderer_1 = this;
  }
  static {
    this.id = 'FileReferencesRenderer';
  }
  constructor(_instantiationService) {
    this._instantiationService = _instantiationService;
    this.templateId = FileReferencesRenderer_1.id;
  }
  renderTemplate(container) {
    return this._instantiationService.createInstance(FileReferencesTemplate, container);
  }
  renderElement(node, index, template) {
    template.set(node.element, createMatches(node.filterData));
  }
  disposeTemplate(templateData) {
    templateData.dispose();
  }
};
FileReferencesRenderer = FileReferencesRenderer_1 = __decorate([__param(0, IInstantiationService)], FileReferencesRenderer);
class OneReferenceTemplate extends Disposable {
  constructor(container) {
    super();
    this.label = this._register(new HighlightedLabel(container));
  }
  set(element, score) {
    const preview = element.parent.getPreview(element)?.preview(element.range);
    if (!preview || !preview.value) {
      this.label.set(`${basename(element.uri)}:${element.range.startLineNumber + 1}:${element.range.startColumn + 1}`);
    } else {
      const {
        value,
        highlight
      } = preview;
      if (score && !FuzzyScore.isDefault(score)) {
        this.label.element.classList.toggle('referenceMatch', false);
        this.label.set(value, createMatches(score));
      } else {
        this.label.element.classList.toggle('referenceMatch', true);
        this.label.set(value, [highlight]);
      }
    }
  }
}
class OneReferenceRenderer {
  constructor() {
    this.templateId = OneReferenceRenderer.id;
  }
  static {
    this.id = 'OneReferenceRenderer';
  }
  renderTemplate(container) {
    return new OneReferenceTemplate(container);
  }
  renderElement(node, index, templateData) {
    templateData.set(node.element, node.filterData);
  }
  disposeTemplate(templateData) {
    templateData.dispose();
  }
}
class AccessibilityProvider {
  getWidgetAriaLabel() {
    return localizeWithPath(_moduleId, 2, "References");
  }
  getAriaLabel(element) {
    return element.ariaMessage;
  }
}
exports.AccessibilityProvider = AccessibilityProvider;
exports.DataSource = DataSource;
exports.Delegate = Delegate;
exports.FileReferencesRenderer = FileReferencesRenderer;
exports.IdentityProvider = IdentityProvider;
exports.OneReferenceRenderer = OneReferenceRenderer;
exports.StringRepresentationProvider = StringRepresentationProvider;