const {
  registerEditorContribution,
  registerEditorAction,
  registerEditorCommand
} = require('../../../browser/editorExtensions.js');
const {
  editorConfigurationBaseNode
} = require('../../../common/config/editorConfigurationSchema.js');
const {
  CodeActionCommand,
  QuickFixAction,
  RefactorAction,
  SourceAction,
  OrganizeImportsAction,
  AutoFixAction,
  FixAllAction
} = require('./codeActionCommands.js');
const {
  CodeActionController
} = require('./codeActionController.js');
const {
  LightBulbWidget
} = require('./lightBulbWidget.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  Extensions
} = require('../../../../platform/configuration/common/configurationRegistry.js');
const {
  Registry
} = require('../../../../platform/registry/common/platform.js');
const _moduleId = "vs/editor/contrib/codeAction/browser/codeActionContributions";
registerEditorContribution(CodeActionController.ID, CodeActionController, 3);
registerEditorContribution(LightBulbWidget.ID, LightBulbWidget, 4);
registerEditorAction(QuickFixAction);
registerEditorAction(RefactorAction);
registerEditorAction(SourceAction);
registerEditorAction(OrganizeImportsAction);
registerEditorAction(AutoFixAction);
registerEditorAction(FixAllAction);
registerEditorCommand(new CodeActionCommand());
Registry.as(Extensions.Configuration).registerConfiguration({
  ...editorConfigurationBaseNode,
  properties: {
    'editor.codeActionWidget.showHeaders': {
      type: 'boolean',
      scope: 5,
      description: localizeWithPath(_moduleId, 0, "Enable/disable showing group headers in the Code Action menu."),
      default: true
    }
  }
});
Registry.as(Extensions.Configuration).registerConfiguration({
  ...editorConfigurationBaseNode,
  properties: {
    'editor.codeActionWidget.includeNearbyQuickFixes': {
      type: 'boolean',
      scope: 5,
      description: localizeWithPath(_moduleId, 1, "Enable/disable showing nearest Quick Fix within a line when not currently on a diagnostic."),
      default: true
    }
  }
});