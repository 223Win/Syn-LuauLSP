const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  HierarchicalKind
} = require('../../../../base/common/hierarchicalKind.js');
const {
  Lazy
} = require('../../../../base/common/lazy.js');
const {
  refactorCommandId,
  codeActionCommandId,
  sourceActionCommandId,
  organizeImportsCommandId,
  fixAllCommandId
} = require('./codeAction.js');
const {
  CodeActionCommandArgs,
  CodeActionKind
} = require('../common/types.js');
const {
  IKeybindingService
} = require('../../../../platform/keybinding/common/keybinding.service.js');
var CodeActionKeybindingResolver_1;
let CodeActionKeybindingResolver = class CodeActionKeybindingResolver {
  static {
    CodeActionKeybindingResolver_1 = this;
  }
  static {
    this.codeActionCommands = [refactorCommandId, codeActionCommandId, sourceActionCommandId, organizeImportsCommandId, fixAllCommandId];
  }
  constructor(keybindingService) {
    this.keybindingService = keybindingService;
  }
  getResolver() {
    const allCodeActionBindings = new Lazy(() => this.keybindingService.getKeybindings().filter(item => CodeActionKeybindingResolver_1.codeActionCommands.indexOf(item.command) >= 0).filter(item => item.resolvedKeybinding).map(item => {
      let commandArgs = item.commandArgs;
      if (item.command === organizeImportsCommandId) {
        commandArgs = {
          kind: CodeActionKind.SourceOrganizeImports.value
        };
      } else if (item.command === fixAllCommandId) {
        commandArgs = {
          kind: CodeActionKind.SourceFixAll.value
        };
      }
      return {
        resolvedKeybinding: item.resolvedKeybinding,
        ...CodeActionCommandArgs.fromUser(commandArgs, {
          kind: HierarchicalKind.None,
          apply: "never"
        })
      };
    }));
    return action => {
      if (action.kind) {
        const binding = this.bestKeybindingForCodeAction(action, allCodeActionBindings.value);
        return binding?.resolvedKeybinding;
      }
      return undefined;
    };
  }
  bestKeybindingForCodeAction(action, candidates) {
    if (!action.kind) {
      return undefined;
    }
    const kind = new HierarchicalKind(action.kind);
    return candidates.filter(candidate => candidate.kind.contains(kind)).filter(candidate => {
      if (candidate.preferred) {
        return action.isPreferred;
      }
      return true;
    }).reduceRight((currentBest, candidate) => {
      if (!currentBest) {
        return candidate;
      }
      return currentBest.kind.contains(candidate.kind) ? candidate : currentBest;
    }, undefined);
  }
};
CodeActionKeybindingResolver = CodeActionKeybindingResolver_1 = __decorate([__param(0, IKeybindingService)], CodeActionKeybindingResolver);
exports.CodeActionKeybindingResolver = CodeActionKeybindingResolver;