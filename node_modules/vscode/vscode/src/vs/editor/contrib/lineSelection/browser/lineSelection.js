const {
  registerEditorAction,
  EditorAction
} = require('../../../browser/editorExtensions.js');
const {
  CursorMoveCommands
} = require('../../../common/cursor/cursorMoveCommands.js');
const {
  EditorContextKeys
} = require('../../../common/editorContextKeys.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const _moduleId = "vs/editor/contrib/lineSelection/browser/lineSelection";
class ExpandLineSelectionAction extends EditorAction {
  constructor() {
    super({
      id: 'expandLineSelection',
      label: localizeWithPath(_moduleId, 0, "Expand Line Selection"),
      alias: 'Expand Line Selection',
      precondition: undefined,
      kbOpts: {
        weight: 0,
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 2048 | 42
      }
    });
  }
  run(_accessor, editor, args) {
    args = args || {};
    if (!editor.hasModel()) {
      return;
    }
    const viewModel = editor._getViewModel();
    viewModel.model.pushStackElement();
    viewModel.setCursorStates(args.source, 3, CursorMoveCommands.expandLineSelection(viewModel, viewModel.getCursorStates()));
    viewModel.revealAllCursors(args.source, true);
  }
}
registerEditorAction(ExpandLineSelectionAction);
exports.ExpandLineSelectionAction = ExpandLineSelectionAction;