const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  getShadowRoot,
  getDomNodePagePosition
} = require('../../../../base/browser/dom.js');
const {
  ActionViewItem
} = require('../../../../base/browser/ui/actionbar/actionViewItems.js');
const {
  SubmenuAction,
  Separator
} = require('../../../../base/common/actions.js');
const {
  DisposableStore
} = require('../../../../base/common/lifecycle.js');
const {
  isIOS
} = require('../../../../base/common/platform.js');
const {
  registerEditorContribution,
  registerEditorAction,
  EditorAction
} = require('../../../browser/editorExtensions.js');
const {
  EditorContextKeys
} = require('../../../common/editorContextKeys.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  SubmenuItemAction
} = require('../../../../platform/actions/common/actions.js');
const {
  IMenuService
} = require('../../../../platform/actions/common/actions.service.js');
const {
  IContextKeyService
} = require('../../../../platform/contextkey/common/contextkey.service.js');
const {
  IContextMenuService,
  IContextViewService
} = require('../../../../platform/contextview/browser/contextView.service.js');
const {
  IKeybindingService
} = require('../../../../platform/keybinding/common/keybinding.service.js');
const {
  IConfigurationService
} = require('../../../../platform/configuration/common/configuration.service.js');
const {
  isStandaloneEditorWorkspace
} = require('../../../../platform/workspace/common/workspace.js');
const {
  IWorkspaceContextService
} = require('../../../../platform/workspace/common/workspace.service.js');
var ContextMenuController_1;
const _moduleId = "vs/editor/contrib/contextmenu/browser/contextmenu";
let ContextMenuController = class ContextMenuController {
  static {
    ContextMenuController_1 = this;
  }
  static {
    this.ID = 'editor.contrib.contextmenu';
  }
  static get(editor) {
    return editor.getContribution(ContextMenuController_1.ID);
  }
  constructor(editor, _contextMenuService, _contextViewService, _contextKeyService, _keybindingService, _menuService, _configurationService, _workspaceContextService) {
    this._contextMenuService = _contextMenuService;
    this._contextViewService = _contextViewService;
    this._contextKeyService = _contextKeyService;
    this._keybindingService = _keybindingService;
    this._menuService = _menuService;
    this._configurationService = _configurationService;
    this._workspaceContextService = _workspaceContextService;
    this._toDispose = new DisposableStore();
    this._contextMenuIsBeingShownCount = 0;
    this._editor = editor;
    this._toDispose.add(this._editor.onContextMenu(e => this._onContextMenu(e)));
    this._toDispose.add(this._editor.onMouseWheel(e => {
      if (this._contextMenuIsBeingShownCount > 0) {
        const view = this._contextViewService.getContextViewElement();
        const target = e.srcElement;
        if (!(target.shadowRoot && getShadowRoot(view) === target.shadowRoot)) {
          this._contextViewService.hideContextView();
        }
      }
    }));
    this._toDispose.add(this._editor.onKeyDown(e => {
      if (!this._editor.getOption(24)) {
        return;
      }
      if (e.keyCode === 58) {
        e.preventDefault();
        e.stopPropagation();
        this.showContextMenu();
      }
    }));
  }
  _onContextMenu(e) {
    if (!this._editor.hasModel()) {
      return;
    }
    if (!this._editor.getOption(24)) {
      this._editor.focus();
      if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) {
        this._editor.setPosition(e.target.position);
      }
      return;
    }
    if (e.target.type === 12) {
      return;
    }
    if (e.target.type === 6 && e.target.detail.injectedText) {
      return;
    }
    e.event.preventDefault();
    e.event.stopPropagation();
    if (e.target.type === 11) {
      return this._showScrollbarContextMenu(e.event);
    }
    if (e.target.type !== 6 && e.target.type !== 7 && e.target.type !== 1) {
      return;
    }
    this._editor.focus();
    if (e.target.position) {
      let hasSelectionAtPosition = false;
      for (const selection of this._editor.getSelections()) {
        if (selection.containsPosition(e.target.position)) {
          hasSelectionAtPosition = true;
          break;
        }
      }
      if (!hasSelectionAtPosition) {
        this._editor.setPosition(e.target.position);
      }
    }
    let anchor = null;
    if (e.target.type !== 1) {
      anchor = e.event;
    }
    this.showContextMenu(anchor);
  }
  showContextMenu(anchor) {
    if (!this._editor.getOption(24)) {
      return;
    }
    if (!this._editor.hasModel()) {
      return;
    }
    const menuActions = this._getMenuActions(this._editor.getModel(), this._editor.contextMenuId);
    if (menuActions.length > 0) {
      this._doShowContextMenu(menuActions, anchor);
    }
  }
  _getMenuActions(model, menuId) {
    const result = [];
    const menu = this._menuService.createMenu(menuId, this._contextKeyService);
    const groups = menu.getActions({
      arg: model.uri
    });
    menu.dispose();
    for (const group of groups) {
      const [, actions] = group;
      let addedItems = 0;
      for (const action of actions) {
        if (action instanceof SubmenuItemAction) {
          const subActions = this._getMenuActions(model, action.item.submenu);
          if (subActions.length > 0) {
            result.push(new SubmenuAction(action.id, action.label, subActions));
            addedItems++;
          }
        } else {
          result.push(action);
          addedItems++;
        }
      }
      if (addedItems) {
        result.push(new Separator());
      }
    }
    if (result.length) {
      result.pop();
    }
    return result;
  }
  _doShowContextMenu(actions, event = null) {
    if (!this._editor.hasModel()) {
      return;
    }
    const oldHoverSetting = this._editor.getOption(60);
    this._editor.updateOptions({
      hover: {
        enabled: false
      }
    });
    let anchor = event;
    if (!anchor) {
      this._editor.revealPosition(this._editor.getPosition(), 1);
      this._editor.render();
      const cursorCoords = this._editor.getScrolledVisiblePosition(this._editor.getPosition());
      const editorCoords = getDomNodePagePosition(this._editor.getDomNode());
      const posx = editorCoords.left + cursorCoords.left;
      const posy = editorCoords.top + cursorCoords.top + cursorCoords.height;
      anchor = {
        x: posx,
        y: posy
      };
    }
    const useShadowDOM = this._editor.getOption(127) && !isIOS;
    this._contextMenuIsBeingShownCount++;
    this._contextMenuService.showContextMenu({
      domForShadowRoot: useShadowDOM ? this._editor.getDomNode() : undefined,
      getAnchor: () => anchor,
      getActions: () => actions,
      getActionViewItem: action => {
        const keybinding = this._keybindingFor(action);
        if (keybinding) {
          return new ActionViewItem(action, action, {
            label: true,
            keybinding: keybinding.getLabel(),
            isMenu: true
          });
        }
        const customActionViewItem = action;
        if (typeof customActionViewItem.getActionViewItem === 'function') {
          return customActionViewItem.getActionViewItem();
        }
        return new ActionViewItem(action, action, {
          icon: true,
          label: true,
          isMenu: true
        });
      },
      getKeyBinding: action => {
        return this._keybindingFor(action);
      },
      onHide: wasCancelled => {
        this._contextMenuIsBeingShownCount--;
        this._editor.updateOptions({
          hover: oldHoverSetting
        });
      }
    });
  }
  _showScrollbarContextMenu(anchor) {
    if (!this._editor.hasModel()) {
      return;
    }
    if (isStandaloneEditorWorkspace(this._workspaceContextService.getWorkspace())) {
      return;
    }
    const minimapOptions = this._editor.getOption(73);
    let lastId = 0;
    const createAction = opts => {
      return {
        id: `menu-action-${++lastId}`,
        label: opts.label,
        tooltip: '',
        class: undefined,
        enabled: typeof opts.enabled === 'undefined' ? true : opts.enabled,
        checked: opts.checked,
        run: opts.run
      };
    };
    const createSubmenuAction = (label, actions) => {
      return new SubmenuAction(`menu-action-${++lastId}`, label, actions, undefined);
    };
    const createEnumAction = (label, enabled, configName, configuredValue, options) => {
      if (!enabled) {
        return createAction({
          label,
          enabled,
          run: () => {}
        });
      }
      const createRunner = value => {
        return () => {
          this._configurationService.updateValue(configName, value);
        };
      };
      const actions = [];
      for (const option of options) {
        actions.push(createAction({
          label: option.label,
          checked: configuredValue === option.value,
          run: createRunner(option.value)
        }));
      }
      return createSubmenuAction(label, actions);
    };
    const actions = [];
    actions.push(createAction({
      label: localizeWithPath(_moduleId, 0, "Minimap"),
      checked: minimapOptions.enabled,
      run: () => {
        this._configurationService.updateValue(`editor.minimap.enabled`, !minimapOptions.enabled);
      }
    }));
    actions.push(new Separator());
    actions.push(createAction({
      label: localizeWithPath(_moduleId, 1, "Render Characters"),
      enabled: minimapOptions.enabled,
      checked: minimapOptions.renderCharacters,
      run: () => {
        this._configurationService.updateValue(`editor.minimap.renderCharacters`, !minimapOptions.renderCharacters);
      }
    }));
    actions.push(createEnumAction(localizeWithPath(_moduleId, 2, "Vertical size"), minimapOptions.enabled, 'editor.minimap.size', minimapOptions.size, [{
      label: localizeWithPath(_moduleId, 3, "Proportional"),
      value: 'proportional'
    }, {
      label: localizeWithPath(_moduleId, 4, "Fill"),
      value: 'fill'
    }, {
      label: localizeWithPath(_moduleId, 5, "Fit"),
      value: 'fit'
    }]));
    actions.push(createEnumAction(localizeWithPath(_moduleId, 6, "Slider"), minimapOptions.enabled, 'editor.minimap.showSlider', minimapOptions.showSlider, [{
      label: localizeWithPath(_moduleId, 7, "Mouse Over"),
      value: 'mouseover'
    }, {
      label: localizeWithPath(_moduleId, 8, "Always"),
      value: 'always'
    }]));
    const useShadowDOM = this._editor.getOption(127) && !isIOS;
    this._contextMenuIsBeingShownCount++;
    this._contextMenuService.showContextMenu({
      domForShadowRoot: useShadowDOM ? this._editor.getDomNode() : undefined,
      getAnchor: () => anchor,
      getActions: () => actions,
      onHide: wasCancelled => {
        this._contextMenuIsBeingShownCount--;
        this._editor.focus();
      }
    });
  }
  _keybindingFor(action) {
    return this._keybindingService.lookupKeybinding(action.id);
  }
  dispose() {
    if (this._contextMenuIsBeingShownCount > 0) {
      this._contextViewService.hideContextView();
    }
    this._toDispose.dispose();
  }
};
ContextMenuController = ContextMenuController_1 = __decorate([__param(1, IContextMenuService), __param(2, IContextViewService), __param(3, IContextKeyService), __param(4, IKeybindingService), __param(5, IMenuService), __param(6, IConfigurationService), __param(7, IWorkspaceContextService)], ContextMenuController);
class ShowContextMenu extends EditorAction {
  constructor() {
    super({
      id: 'editor.action.showContextMenu',
      label: localizeWithPath(_moduleId, 9, "Show Editor Context Menu"),
      alias: 'Show Editor Context Menu',
      precondition: undefined,
      kbOpts: {
        kbExpr: EditorContextKeys.textInputFocus,
        primary: 1024 | 68,
        weight: 100
      }
    });
  }
  run(accessor, editor) {
    ContextMenuController.get(editor)?.showContextMenu();
  }
}
registerEditorContribution(ContextMenuController.ID, ContextMenuController, 2);
registerEditorAction(ShowContextMenu);
exports.ContextMenuController = ContextMenuController;