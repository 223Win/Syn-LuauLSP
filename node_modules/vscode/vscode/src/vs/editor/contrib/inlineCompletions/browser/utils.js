const {
  BugIndicatingError
} = require('../../../../base/common/errors.js');
const {
  DisposableStore
} = require('../../../../base/common/lifecycle.js');
const {} = require('../../../../base/common/arrays.js');
const {} = require('../../../../base/common/observableInternal/derived.js');
const {
  autorunOpts
} = require('../../../../base/common/observableInternal/autorun.js');
const {} = require('../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../base/common/cancellation.js');
const {
  Position
} = require('../../../common/core/position.js');
const {
  Range
} = require('../../../common/core/range.js');
const array = [];
function getReadonlyEmptyArray() {
  return array;
}
class ColumnRange {
  constructor(startColumn, endColumnExclusive) {
    this.startColumn = startColumn;
    this.endColumnExclusive = endColumnExclusive;
    if (startColumn > endColumnExclusive) {
      throw new BugIndicatingError(`startColumn ${startColumn} cannot be after endColumnExclusive ${endColumnExclusive}`);
    }
  }
  toRange(lineNumber) {
    return new Range(lineNumber, this.startColumn, lineNumber, this.endColumnExclusive);
  }
  equals(other) {
    return this.startColumn === other.startColumn && this.endColumnExclusive === other.endColumnExclusive;
  }
}
function applyObservableDecorations(editor, decorations) {
  const d = new DisposableStore();
  const decorationsCollection = editor.createDecorationsCollection();
  d.add(autorunOpts({
    debugName: () => `Apply decorations from ${decorations.debugName}`
  }, reader => {
    const d = decorations.read(reader);
    decorationsCollection.set(d);
  }));
  d.add({
    dispose: () => {
      decorationsCollection.clear();
    }
  });
  return d;
}
function addPositions(pos1, pos2) {
  return new Position(pos1.lineNumber + pos2.lineNumber - 1, pos2.lineNumber === 1 ? pos1.column + pos2.column - 1 : pos2.column);
}
function subtractPositions(pos1, pos2) {
  return new Position(pos1.lineNumber - pos2.lineNumber + 1, pos1.lineNumber - pos2.lineNumber === 0 ? pos1.column - pos2.column + 1 : pos1.column);
}
exports.ColumnRange = ColumnRange;
exports.addPositions = addPositions;
exports.applyObservableDecorations = applyObservableDecorations;
exports.getReadonlyEmptyArray = getReadonlyEmptyArray;
exports.subtractPositions = subtractPositions;