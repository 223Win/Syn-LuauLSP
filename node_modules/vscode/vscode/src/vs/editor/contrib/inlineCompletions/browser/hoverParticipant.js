const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  append,
  reset,
  $
} = require('../../../../base/browser/dom.js');
const {
  MarkdownString
} = require('../../../../base/common/htmlContent.js');
const {
  DisposableStore
} = require('../../../../base/common/lifecycle.js');
const {} = require('../../../../base/common/arrays.js');
const {} = require('../../../../base/common/observableInternal/derived.js');
const {
  autorun
} = require('../../../../base/common/observableInternal/autorun.js');
const {
  constObservable
} = require('../../../../base/common/observableInternal/utils.js');
const {} = require('../../../../base/common/cancellation.js');
const {
  Range
} = require('../../../common/core/range.js');
const {
  ILanguageService
} = require('../../../common/languages/language.js');
const {
  HoverForeignElementAnchor
} = require('../../hover/browser/hoverTypes.js');
const {
  InlineCompletionsController
} = require('./inlineCompletionsController.js');
const {
  InlineSuggestionHintsContentWidget
} = require('./inlineCompletionsHintsWidget.js');
const {
  MarkdownRenderer
} = require('../../../browser/widget/markdownRenderer/browser/markdownRenderer.js');
const {
  localizeWithPath
} = require('../../../../nls.js');
const {
  IAccessibilityService
} = require('../../../../platform/accessibility/common/accessibility.service.js');
const {
  IInstantiationService
} = require('../../../../platform/instantiation/common/instantiation.js');
const {
  IOpenerService
} = require('../../../../platform/opener/common/opener.service.js');
const {
  ITelemetryService
} = require('../../../../platform/telemetry/common/telemetry.service.js');
const _moduleId = "vs/editor/contrib/inlineCompletions/browser/hoverParticipant";
class InlineCompletionsHover {
  constructor(owner, range, controller) {
    this.owner = owner;
    this.range = range;
    this.controller = controller;
  }
  isValidForHoverAnchor(anchor) {
    return anchor.type === 1 && this.range.startColumn <= anchor.range.startColumn && this.range.endColumn >= anchor.range.endColumn;
  }
}
let InlineCompletionsHoverParticipant = class InlineCompletionsHoverParticipant {
  constructor(_editor, _languageService, _openerService, accessibilityService, _instantiationService, _telemetryService) {
    this._editor = _editor;
    this._languageService = _languageService;
    this._openerService = _openerService;
    this.accessibilityService = accessibilityService;
    this._instantiationService = _instantiationService;
    this._telemetryService = _telemetryService;
    this.hoverOrdinal = 4;
  }
  suggestHoverAnchor(mouseEvent) {
    const controller = InlineCompletionsController.get(this._editor);
    if (!controller) {
      return null;
    }
    const target = mouseEvent.target;
    if (target.type === 8) {
      const viewZoneData = target.detail;
      if (controller.shouldShowHoverAtViewZone(viewZoneData.viewZoneId)) {
        return new HoverForeignElementAnchor(1000, this, Range.fromPositions(this._editor.getModel().validatePosition(viewZoneData.positionBefore || viewZoneData.position)), mouseEvent.event.posx, mouseEvent.event.posy, false);
      }
    }
    if (target.type === 7) {
      if (controller.shouldShowHoverAt(target.range)) {
        return new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);
      }
    }
    if (target.type === 6) {
      const mightBeForeignElement = target.detail.mightBeForeignElement;
      if (mightBeForeignElement && controller.shouldShowHoverAt(target.range)) {
        return new HoverForeignElementAnchor(1000, this, target.range, mouseEvent.event.posx, mouseEvent.event.posy, false);
      }
    }
    return null;
  }
  computeSync(anchor, lineDecorations) {
    if (this._editor.getOption(62).showToolbar !== 'onHover') {
      return [];
    }
    const controller = InlineCompletionsController.get(this._editor);
    if (controller && controller.shouldShowHoverAt(anchor.range)) {
      return [new InlineCompletionsHover(this, anchor.range, controller)];
    }
    return [];
  }
  renderHoverParts(context, hoverParts) {
    const disposableStore = new DisposableStore();
    const part = hoverParts[0];
    this._telemetryService.publicLog2('inlineCompletionHover.shown');
    if (this.accessibilityService.isScreenReaderOptimized() && !this._editor.getOption(8)) {
      this.renderScreenReaderText(context, part, disposableStore);
    }
    const model = part.controller.model.get();
    const w = this._instantiationService.createInstance(InlineSuggestionHintsContentWidget, this._editor, false, constObservable(null), model.selectedInlineCompletionIndex, model.inlineCompletionsCount, model.activeCommands);
    context.fragment.appendChild(w.getDomNode());
    model.triggerExplicitly();
    disposableStore.add(w);
    return disposableStore;
  }
  renderScreenReaderText(context, part, disposableStore) {
    const $$1 = $;
    const markdownHoverElement = $$1('div.hover-row.markdown-hover');
    const hoverContentsElement = append(markdownHoverElement, $$1('div.hover-contents', {
      ['aria-live']: 'assertive'
    }));
    const renderer = disposableStore.add(new MarkdownRenderer({
      editor: this._editor
    }, this._languageService, this._openerService));
    const render = code => {
      disposableStore.add(renderer.onDidRenderAsync(() => {
        hoverContentsElement.className = 'hover-contents code-hover-contents';
        context.onContentsChanged();
      }));
      const inlineSuggestionAvailable = localizeWithPath(_moduleId, 0, "Suggestion:");
      const renderedContents = disposableStore.add(renderer.render(new MarkdownString().appendText(inlineSuggestionAvailable).appendCodeblock('text', code)));
      hoverContentsElement.replaceChildren(renderedContents.element);
    };
    disposableStore.add(autorun(reader => {
      const ghostText = part.controller.model.read(reader)?.primaryGhostText.read(reader);
      if (ghostText) {
        const lineText = this._editor.getModel().getLineContent(ghostText.lineNumber);
        render(ghostText.renderForScreenReader(lineText));
      } else {
        reset(hoverContentsElement);
      }
    }));
    context.fragment.appendChild(markdownHoverElement);
  }
};
InlineCompletionsHoverParticipant = __decorate([__param(1, ILanguageService), __param(2, IOpenerService), __param(3, IAccessibilityService), __param(4, IInstantiationService), __param(5, ITelemetryService)], InlineCompletionsHoverParticipant);
exports.InlineCompletionsHover = InlineCompletionsHover;
exports.InlineCompletionsHoverParticipant = InlineCompletionsHoverParticipant;