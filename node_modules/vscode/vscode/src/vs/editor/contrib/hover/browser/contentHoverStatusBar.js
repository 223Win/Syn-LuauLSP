const {
  __decorate,
  __param
} = require('../../../../../../../external/tslib/tslib.es6.js');
const {
  append,
  $$1
} = require('../../../../base/browser/dom.js');
const {
  HoverAction
} = require('../../../../base/browser/ui/hover/hoverWidget.js');
const {
  Disposable
} = require('../../../../base/common/lifecycle.js');
const {
  IKeybindingService
} = require('../../../../platform/keybinding/common/keybinding.service.js');
const $ = $$1;
let EditorHoverStatusBar = class EditorHoverStatusBar extends Disposable {
  get hasContent() {
    return this._hasContent;
  }
  constructor(_keybindingService) {
    super();
    this._keybindingService = _keybindingService;
    this._hasContent = false;
    this.hoverElement = $('div.hover-row.status-bar');
    this.hoverElement.tabIndex = 0;
    this.actionsElement = append(this.hoverElement, $('div.actions'));
  }
  addAction(actionOptions) {
    const keybinding = this._keybindingService.lookupKeybinding(actionOptions.commandId);
    const keybindingLabel = keybinding ? keybinding.getLabel() : null;
    this._hasContent = true;
    return this._register(HoverAction.render(this.actionsElement, actionOptions, keybindingLabel));
  }
  append(element) {
    const result = append(this.actionsElement, element);
    this._hasContent = true;
    return result;
  }
};
EditorHoverStatusBar = __decorate([__param(0, IKeybindingService)], EditorHoverStatusBar);
exports.EditorHoverStatusBar = EditorHoverStatusBar;