const {
  __decorate,
  __param
} = require('../../../../../../external/tslib/tslib.es6.js');
const {
  Disposable
} = require('../../../base/common/lifecycle.js');
const {
  ILanguageService
} = require('../languages/language.js');
const {
  IThemeService
} = require('../../../platform/theme/common/themeService.service.js');
const {
  ILogService
} = require('../../../platform/log/common/log.service.js');
const {
  SemanticTokensProviderStyling
} = require('./semanticTokensProviderStyling.js');
const {
  ISemanticTokensStylingService
} = require('./semanticTokensStyling.js');
const {
  registerSingleton
} = require('../../../platform/instantiation/common/extensions.js');
let SemanticTokensStylingService = class SemanticTokensStylingService extends Disposable {
  constructor(_themeService, _logService, _languageService) {
    super();
    this._themeService = _themeService;
    this._logService = _logService;
    this._languageService = _languageService;
    this._caches = new WeakMap();
    this._register(this._themeService.onDidColorThemeChange(() => {
      this._caches = new WeakMap();
    }));
  }
  getStyling(provider) {
    if (!this._caches.has(provider)) {
      this._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._languageService, this._logService));
    }
    return this._caches.get(provider);
  }
};
SemanticTokensStylingService = __decorate([__param(0, IThemeService), __param(1, ILogService), __param(2, ILanguageService)], SemanticTokensStylingService);
registerSingleton(ISemanticTokensStylingService, SemanticTokensStylingService, 1);
exports.SemanticTokensStylingService = SemanticTokensStylingService;