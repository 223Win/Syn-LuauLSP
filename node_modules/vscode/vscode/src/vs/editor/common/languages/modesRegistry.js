const {
  localizeWithPath
} = require('../../../nls.js');
const {
  Emitter
} = require('../../../base/common/event.js');
const {
  Registry
} = require('../../../platform/registry/common/platform.js');
const {
  Mimes
} = require('../../../base/common/mime.js');
const {
  Extensions
} = require('../../../platform/configuration/common/configurationRegistry.js');
const _moduleId = "vs/editor/common/languages/modesRegistry";
const Extensions$1 = {
  ModesRegistry: 'editor.modesRegistry'
};
class EditorModesRegistry {
  constructor() {
    this._onDidChangeLanguages = new Emitter();
    this.onDidChangeLanguages = this._onDidChangeLanguages.event;
    this._languages = [];
  }
  registerLanguage(def) {
    this._languages.push(def);
    this._onDidChangeLanguages.fire(undefined);
    return {
      dispose: () => {
        for (let i = 0, len = this._languages.length; i < len; i++) {
          if (this._languages[i] === def) {
            this._languages.splice(i, 1);
            return;
          }
        }
      }
    };
  }
  getLanguages() {
    return this._languages;
  }
}
const ModesRegistry = new EditorModesRegistry();
Registry.add(Extensions$1.ModesRegistry, ModesRegistry);
const PLAINTEXT_LANGUAGE_ID = 'plaintext';
const PLAINTEXT_EXTENSION = '.txt';
ModesRegistry.registerLanguage({
  id: PLAINTEXT_LANGUAGE_ID,
  extensions: [PLAINTEXT_EXTENSION],
  aliases: [localizeWithPath(_moduleId, 0, "Plain Text"), 'text'],
  mimetypes: [Mimes.text]
});
Registry.as(Extensions.Configuration).registerDefaultConfigurations([{
  overrides: {
    '[plaintext]': {
      'editor.unicodeHighlight.ambiguousCharacters': false,
      'editor.unicodeHighlight.invisibleCharacters': false
    }
  }
}]);
exports.EditorModesRegistry = EditorModesRegistry;
exports.Extensions = Extensions$1;
exports.ModesRegistry = ModesRegistry;
exports.PLAINTEXT_EXTENSION = PLAINTEXT_EXTENSION;
exports.PLAINTEXT_LANGUAGE_ID = PLAINTEXT_LANGUAGE_ID;