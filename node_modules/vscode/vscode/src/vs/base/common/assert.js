const {
  onUnexpectedError,
  BugIndicatingError
} = require('./errors.js');
function ok(value, message) {
  if (!value) {
    throw new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');
  }
}
function assertNever(value, message = 'Unreachable') {
  throw new Error(message);
}
function softAssert(condition) {
  if (!condition) {
    onUnexpectedError(new BugIndicatingError('Soft Assertion Failed'));
  }
}
function assertFn(condition) {
  if (!condition()) {
    debugger;
    condition();
    onUnexpectedError(new BugIndicatingError('Assertion Failed'));
  }
}
function checkAdjacentItems(items, predicate) {
  let i = 0;
  while (i < items.length - 1) {
    const a = items[i];
    const b = items[i + 1];
    if (!predicate(a, b)) {
      return false;
    }
    i++;
  }
  return true;
}
exports.assertFn = assertFn;
exports.assertNever = assertNever;
exports.checkAdjacentItems = checkAdjacentItems;
exports.ok = ok;
exports.softAssert = softAssert;