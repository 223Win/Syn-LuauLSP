const {} = require('../list/listWidget.js');
const {
  SelectBoxList
} = require('./selectBoxCustom.js');
const {
  SelectBoxNative
} = require('./selectBoxNative.js');
const {
  Widget
} = require('../widget.js');
const {
  isMacintosh
} = require('../../../common/platform.js');
const {} = require('./selectBox.css.js');
class SelectBox extends Widget {
  constructor(options, selected, contextViewProvider, styles, selectBoxOptions) {
    super();
    if (isMacintosh && !selectBoxOptions?.useCustomDrawn) {
      this.selectBoxDelegate = new SelectBoxNative(options, selected, styles, selectBoxOptions);
    } else {
      this.selectBoxDelegate = new SelectBoxList(options, selected, contextViewProvider, styles, selectBoxOptions);
    }
    this._register(this.selectBoxDelegate);
  }
  get onDidSelect() {
    return this.selectBoxDelegate.onDidSelect;
  }
  setOptions(options, selected) {
    this.selectBoxDelegate.setOptions(options, selected);
  }
  select(index) {
    this.selectBoxDelegate.select(index);
  }
  setAriaLabel(label) {
    this.selectBoxDelegate.setAriaLabel(label);
  }
  focus() {
    this.selectBoxDelegate.focus();
  }
  blur() {
    this.selectBoxDelegate.blur();
  }
  setFocusable(focusable) {
    this.selectBoxDelegate.setFocusable(focusable);
  }
  render(container) {
    this.selectBoxDelegate.render(container);
  }
}
exports.SelectBox = SelectBox;