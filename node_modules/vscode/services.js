const {
  __decorate,
  __param
} = require('./external/tslib/tslib.es6.js');
const {} = require('./missing-services.js');
const {} = require('./vscode/src/vs/workbench/api/common/jsonValidationExtensionPoint.js');
const {} = require('./vscode/src/vs/workbench/services/themes/common/colorExtensionPoint.js');
const {} = require('./vscode/src/vs/workbench/services/themes/common/iconExtensionPoint.js');
const {} = require('./vscode/src/vs/platform/actions/common/actions.contribution.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/workbenchReferenceSearch.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/menuPreventer.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/diffEditorHelper.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/largeFileOptimizations.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/saveParticipants.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMinimap.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/toggleMultiCursorModifier.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/toggleRenderControlCharacter.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/toggleWordWrap.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/toggleRenderWhitespace.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/editorLineNumberMenu.js');
const {} = require('./vscode/src/vs/workbench/contrib/format/browser/formatActionsMultiple.js');
const {} = require('./vscode/src/vs/workbench/contrib/format/browser/formatActionsNone.js');
const {} = require('./vscode/src/vs/workbench/contrib/format/browser/formatModified.js');
const {} = require('./vscode/src/vs/workbench/contrib/folding/browser/folding.contribution.js');
const {} = require('./vscode/src/vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeActions/browser/codeActions.contribution.js');
const {} = require('./vscode/src/vs/workbench/contrib/list/browser/list.contribution.js');
const {} = require('./vscode/src/vs/workbench/contrib/codeEditor/browser/editorFeatures.js');
const {} = require('./vscode/src/vs/workbench/contrib/contextmenu/browser/contextmenu.contribution.js');
const {} = require('./vscode/src/vs/workbench/contrib/mappedEdits/common/mappedEdits.contribution.js');
const {} = require('./vscode/src/vs/workbench/browser/actions/textInputActions.js');
const {} = require('./vscode/src/vs/workbench/browser/actions/developerActions.js');
const {} = require('./vscode/src/vs/editor/browser/coreCommands.js');
const {} = require('./vscode/src/vs/editor/browser/widget/codeEditor/codeEditorWidget.js');
const {} = require('./vscode/src/vs/editor/browser/widget/diffEditor/diffEditor.contribution.js');
const {} = require('./vscode/src/vs/editor/contrib/anchorSelect/browser/anchorSelect.js');
const {} = require('./vscode/src/vs/editor/contrib/bracketMatching/browser/bracketMatching.js');
const {} = require('./vscode/src/vs/editor/contrib/caretOperations/browser/caretOperations.js');
const {} = require('./vscode/src/vs/editor/contrib/caretOperations/browser/transpose.js');
const {} = require('./vscode/src/vs/editor/contrib/clipboard/browser/clipboard.js');
const {} = require('./vscode/src/vs/editor/contrib/codeAction/browser/codeActionContributions.js');
const {} = require('./vscode/src/vs/editor/contrib/codelens/browser/codelensController.js');
const {} = require('./vscode/src/vs/editor/contrib/colorPicker/browser/colorContributions.js');
const {} = require('./vscode/src/vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions.js');
const {} = require('./vscode/src/vs/editor/contrib/comment/browser/comment.js');
const {} = require('./vscode/src/vs/editor/contrib/contextmenu/browser/contextmenu.js');
const {} = require('./vscode/src/vs/editor/contrib/cursorUndo/browser/cursorUndo.js');
const {} = require('./vscode/src/vs/editor/contrib/dnd/browser/dnd.js');
const {} = require('./vscode/src/vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.js');
const {} = require('./vscode/src/vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.js');
const {} = require('./vscode/src/vs/editor/contrib/find/browser/findController.js');
const {} = require('./vscode/src/vs/editor/contrib/folding/browser/folding.js');
const {} = require('./vscode/src/vs/editor/contrib/fontZoom/browser/fontZoom.js');
const {} = require('./vscode/src/vs/editor/contrib/format/browser/formatActions.js');
const {} = require('./vscode/src/vs/editor/contrib/documentSymbols/browser/documentSymbols.js');
const {} = require('./vscode/src/vs/editor/contrib/inlineCompletions/browser/inlineCompletions.contribution.js');
const {} = require('./vscode/src/vs/editor/contrib/inlineProgress/browser/inlineProgress.js');
const {} = require('./vscode/src/vs/editor/contrib/gotoSymbol/browser/goToCommands.js');
const {} = require('./vscode/src/vs/editor/contrib/gotoSymbol/browser/link/goToDefinitionAtPosition.js');
const {} = require('./vscode/src/vs/editor/contrib/gotoError/browser/gotoError.js');
const {} = require('./vscode/src/vs/editor/contrib/hover/browser/hoverContribution.js');
const {} = require('./vscode/src/vs/editor/contrib/indentation/browser/indentation.js');
const {} = require('./vscode/src/vs/editor/contrib/inlayHints/browser/inlayHintsContribution.js');
const {} = require('./vscode/src/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplace.js');
const {} = require('./vscode/src/vs/editor/contrib/lineSelection/browser/lineSelection.js');
const {} = require('./vscode/src/vs/editor/contrib/linesOperations/browser/linesOperations.js');
const {} = require('./vscode/src/vs/editor/contrib/linkedEditing/browser/linkedEditing.js');
const {} = require('./vscode/src/vs/editor/contrib/links/browser/links.js');
const {} = require('./vscode/src/vs/editor/contrib/longLinesHelper/browser/longLinesHelper.js');
const {} = require('./vscode/src/vs/editor/contrib/multicursor/browser/multicursor.js');
const {} = require('./vscode/src/vs/editor/contrib/inlineEdit/browser/inlineEdit.contribution.js');
const {} = require('./vscode/src/vs/editor/contrib/parameterHints/browser/parameterHints.js');
const {} = require('./vscode/src/vs/editor/contrib/rename/browser/rename.js');
const {} = require('./vscode/src/vs/editor/contrib/sectionHeaders/browser/sectionHeaders.js');
const {} = require('./vscode/src/vs/editor/contrib/semanticTokens/browser/documentSemanticTokens.js');
const {} = require('./vscode/src/vs/editor/contrib/semanticTokens/browser/viewportSemanticTokens.js');
const {} = require('./vscode/src/vs/editor/contrib/smartSelect/browser/smartSelect.js');
const {} = require('./vscode/src/vs/editor/contrib/snippet/browser/snippetController2.js');
const {} = require('./vscode/src/vs/editor/contrib/stickyScroll/browser/stickyScrollContribution.js');
const {} = require('./vscode/src/vs/editor/contrib/suggest/browser/suggestController.js');
const {} = require('./vscode/src/vs/editor/contrib/suggest/browser/suggestInlineCompletions.js');
const {} = require('./vscode/src/vs/editor/contrib/tokenization/browser/tokenization.js');
const {} = require('./vscode/src/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js');
const {} = require('./vscode/src/vs/editor/contrib/unicodeHighlighter/browser/unicodeHighlighter.js');
const {} = require('./vscode/src/vs/editor/contrib/unusualLineTerminators/browser/unusualLineTerminators.js');
const {} = require('./vscode/src/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js');
const {} = require('./vscode/src/vs/editor/contrib/wordOperations/browser/wordOperations.js');
const {} = require('./vscode/src/vs/editor/contrib/wordPartOperations/browser/wordPartOperations.js');
const {} = require('./vscode/src/vs/editor/contrib/readOnlyMessage/browser/contribution.js');
const {} = require('./vscode/src/vs/editor/contrib/diffEditorBreadcrumbs/browser/contribution.js');
const {} = require('./vscode/src/vs/editor/common/standaloneStrings.js');
const {} = require('./vscode/src/vs/base/browser/ui/codicons/codicon/codicon.css.js');
const {} = require('./vscode/src/vs/base/browser/ui/codicons/codicon/codicon-modifiers.css.js');
const {} = require('./vscode/src/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js');
exports.Severity = "default";
exports.StorageScope = StorageScope;
exports.StorageTarget = StorageTarget;
const {
  StandaloneServices
} = require('./vscode/src/vs/editor/standalone/browser/standaloneServices.js');
const {
  mixin
} = require('./vscode/src/vs/base/common/objects.js');
const {
  IInstantiationService
} = require('./vscode/src/vs/platform/instantiation/common/instantiation.js');
const {
  DisposableStore
} = require('./vscode/src/vs/base/common/lifecycle.js');
const {
  registerWorkbenchContribution2
} = require('./vscode/src/vs/workbench/common/contributions.js');
exports.WorkbenchPhase = WorkbenchPhase;
const {
  IProductService
} = require('./vscode/src/vs/platform/product/common/productService.service.js');
const {
  initialize$1
} = require('./workbench.js');
const {
  checkServicesNotInitialized,
  startup,
  waitServicesReady,
  checkServicesReady,
  serviceInitializedBarrier,
  serviceInitializedEmitter
} = require('./lifecycle.js');
const getServiceOverride$2$1 = require('@codingame/monaco-vscode-quickaccess-service-override');
const getServiceOverride$1$1 = require('@codingame/monaco-vscode-files-service-override');
const getServiceOverride$2 = require('@codingame/monaco-vscode-extensions-service-override');
const getServiceOverride$1 = require('@codingame/monaco-vscode-environment-service-override');
const getServiceOverride = require('@codingame/monaco-vscode-layout-service-override');
const getServiceOverride$5 = require('@codingame/monaco-vscode-host-service-override');
const getServiceOverride$6 = require('@codingame/monaco-vscode-base-service-override');
exports.SyncDescriptor = SyncDescriptor;
exports.ICommandService = ICommandService;
exports.INotificationService = INotificationService;
exports.IBulkEditService = IBulkEditService;
exports.ICodeEditorService = ICodeEditorService;
exports.ILanguageService = ILanguageService;
exports.ILanguageConfigurationService = ILanguageConfigurationService;
exports.IEditorWorkerService = IEditorWorkerService;
exports.ILanguageFeaturesService = ILanguageFeaturesService;
exports.IModelService = IModelService;
exports.ITextModelService = ITextModelService;
exports.IClipboardService = IClipboardService;
exports.IDialogService = IDialogService;
exports.IFileDialogService = IFileDialogService;
exports.IFileService = IFileService;
exports.IMarkerService = IMarkerService;
exports.IOpenerService = IOpenerService;
exports.IQuickInputService = IQuickInputService;
exports.ITelemetryService = ITelemetryService;
exports.IUriIdentityService = IUriIdentityService;
exports.IBreadcrumbsService = IBreadcrumbsService;
exports.IEditorGroupsService = IEditorGroupsService;
exports.GroupDirection = GroupDirection;
exports.GroupLocation = GroupLocation;
exports.GroupOrientation = GroupOrientation;
exports.GroupsArrangement = GroupsArrangement;
exports.GroupsOrder = GroupsOrder;
exports.MergeGroupMode = MergeGroupMode;
exports.CloseDirection = CloseDirection;
exports.EditorsOrder = EditorsOrder;
exports.EditorInput = EditorInput;
exports.IEditorService = IEditorService;
exports.IEditorResolverService = IEditorResolverService;
exports.ITextEditorService = ITextEditorService;
exports.IWorkbenchEnvironmentService = IWorkbenchEnvironmentService;
exports.IHostService = IHostService;
exports.ILanguageStatusService = ILanguageStatusService;
exports.IPaneCompositePartService = IPaneCompositePartService;
exports.IPathService = IPathService;
exports.ITextFileService = ITextFileService;
exports.IWorkingCopyFileService = IWorkingCopyFileService;
exports.IConfigurationService = IConfigurationService;
exports.IContextKeyService = IContextKeyService;
exports.IThemeService = IThemeService;
exports.ISnippetsService = ISnippetsService;
exports.IWorkspaceContextService = IWorkspaceContextService;
exports.IStorageService = IStorageService;
exports.IAccessibilitySignalService = IAccessibilitySignalService;
exports.IDebugService = IDebugService;
exports.ILogService = ILogService;
exports.ILoggerService = ILoggerService;
exports.LogLevel = LogLevel;
exports.IViewDescriptorService = IViewDescriptorService;
exports.IViewsService = IViewsService;
exports.ILayoutService = ILayoutService;
exports.IPreferencesService = IPreferencesService;
exports.IPreferencesSearchService = IPreferencesSearchService;
exports.IKeybindingEditingService = IKeybindingEditingService;
exports.IOutputService = IOutputService;
exports.IHistoryService = IHistoryService;
exports.GoFilter = GoFilter;
exports.GoScope = GoScope;
exports.IRemoteAgentService = IRemoteAgentService;
exports.IRemoteAuthorityResolverService = IRemoteAuthorityResolverService;
exports.IRemoteSocketFactoryService = IRemoteSocketFactoryService;
exports.IFilesConfigurationService = IFilesConfigurationService;
exports.ILabelService = ILabelService;
exports.IWorkbenchLayoutService = IWorkbenchLayoutService;
exports.ILanguagePackService = ILanguagePackService;
exports.ILocaleService = ILocaleService;
exports.NeverShowAgainScope = NeverShowAgainScope;
exports.NoOpNotification = NoOpNotification;
exports.NoOpProgress = NoOpProgress;
exports.NotificationPriority = NotificationPriority;
exports.NotificationsFilter = NotificationsFilter;
exports.IActivityService = IActivityService;
exports.IHoverService = IHoverService;
exports.IExplorerService = IExplorerService;
exports.IStatusbarService = IStatusbarService;
exports.ITitleService = ITitleService;
exports.IBannerService = IBannerService;
exports.IWorkspaceTrustEnablementService = IWorkspaceTrustEnablementService;
exports.IWorkspaceTrustManagementService = IWorkspaceTrustManagementService;
exports.IWorkspaceTrustRequestService = IWorkspaceTrustRequestService;
exports.IKeybindingService = IKeybindingService;
exports.ISecretStorageService = ISecretStorageService;
async function initialize(overrides, container = document.body, configuration = {}, env) {
  checkServicesNotInitialized();
  initialize$1(container, configuration, env);
  const instantiationService = StandaloneServices.initialize({
    [IProductService.toString()]: mixin({
      version: "1.89.1",
      quality: 'stable',
      commit: "dc96b837cf6bb4af9cd736aa3af08cf8279f7685",
      nameShort: 'Code - OSS',
      nameLong: 'Code - OSS',
      applicationName: 'code-oss',
      dataFolderName: '.vscode-oss',
      urlProtocol: 'code-oss',
      reportIssueUrl: 'https://github.com/microsoft/vscode/issues/new',
      licenseName: 'MIT',
      licenseUrl: 'https://github.com/microsoft/vscode/blob/main/LICENSE.txt',
      serverApplicationName: 'code-server-oss'
    }, configuration.productConfiguration ?? {}),
    ...getServiceOverride(),
    ...getServiceOverride$1(),
    ...getServiceOverride$2(),
    ...getServiceOverride$1$1(),
    ...getServiceOverride$2$1(),
    ...getServiceOverride$5(),
    ...getServiceOverride$6(),
    ...overrides
  });
  await startup(instantiationService);
}
async function getService(identifier) {
  await waitServicesReady();
  return StandaloneServices.get(identifier);
}
async function createInstance(ctor, ...args) {
  await waitServicesReady();
  return StandaloneServices.get(IInstantiationService).createInstance(ctor, ...args);
}
function createInstanceSync(ctor, ...args) {
  checkServicesReady();
  return StandaloneServices.get(IInstantiationService).createInstance(ctor, ...args);
}
function withReadyServices(callback) {
  if (serviceInitializedBarrier.isOpen()) {
    return StandaloneServices.get(IInstantiationService).invokeFunction(callback);
  }
  const disposable = new DisposableStore();
  const listener = disposable.add(serviceInitializedEmitter.event(() => {
    listener.dispose();
    disposable.add(StandaloneServices.get(IInstantiationService).invokeFunction(callback));
  }));
  return disposable;
}
const registerWorkbenchContribution = (id, contribution, instantiation) => {
  let Contribution = class Contribution {
    constructor(instantiationService) {
      instantiationService.invokeFunction(contribution);
    }
  };
  Contribution = __decorate([__param(0, IInstantiationService)], Contribution);
  registerWorkbenchContribution2(id, Contribution, instantiation);
};
exports.IInstantiationService = IInstantiationService;
exports.IProductService = IProductService;
exports.StandaloneServices = StandaloneServices;
exports.createInstance = createInstance;
exports.createInstanceSync = createInstanceSync;
exports.getService = getService;
exports.initialize = initialize;
exports.registerWorkbenchContribution = registerWorkbenchContribution;
exports.withReadyServices = withReadyServices;